
Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00003638  000036cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080014a  0080014a  000037b6  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001350  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000beb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 1a 	call	0x3594	; 0x3594 <main>
      8a:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Safe_MainFunction>:
	uint8 Idx;
	for (Idx = 0; Idx < 8; Idx++) {
		LCD_Write_CGRAM(Extra_Char[Idx], Idx);
	}
}*/
void Safe_MainFunction(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a6 97       	sbiw	r28, 0x26	; 38
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 sum1, sum2, sum3, sum4, sum5, key_value, f1, flag = 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8d 8f       	std	Y+29, r24	; 0x1d

	switch (STATE) {
     b5e:	80 91 4a 01 	lds	r24, 0x014A
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	3e a3       	std	Y+38, r19	; 0x26
     b68:	2d a3       	std	Y+37, r18	; 0x25
     b6a:	8d a1       	ldd	r24, Y+37	; 0x25
     b6c:	9e a1       	ldd	r25, Y+38	; 0x26
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	91 05       	cpc	r25, r1
     b72:	09 f4       	brne	.+2      	; 0xb76 <Safe_MainFunction+0x30>
     b74:	67 c1       	rjmp	.+718    	; 0xe44 <Safe_MainFunction+0x2fe>
     b76:	2d a1       	ldd	r18, Y+37	; 0x25
     b78:	3e a1       	ldd	r19, Y+38	; 0x26
     b7a:	24 30       	cpi	r18, 0x04	; 4
     b7c:	31 05       	cpc	r19, r1
     b7e:	8c f4       	brge	.+34     	; 0xba2 <Safe_MainFunction+0x5c>
     b80:	8d a1       	ldd	r24, Y+37	; 0x25
     b82:	9e a1       	ldd	r25, Y+38	; 0x26
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <Safe_MainFunction+0x46>
     b8a:	c6 c0       	rjmp	.+396    	; 0xd18 <Safe_MainFunction+0x1d2>
     b8c:	2d a1       	ldd	r18, Y+37	; 0x25
     b8e:	3e a1       	ldd	r19, Y+38	; 0x26
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	0c f0       	brlt	.+2      	; 0xb98 <Safe_MainFunction+0x52>
     b96:	4d c1       	rjmp	.+666    	; 0xe32 <Safe_MainFunction+0x2ec>
     b98:	8d a1       	ldd	r24, Y+37	; 0x25
     b9a:	9e a1       	ldd	r25, Y+38	; 0x26
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	a1 f0       	breq	.+40     	; 0xbc8 <Safe_MainFunction+0x82>
     ba0:	da c1       	rjmp	.+948    	; 0xf56 <Safe_MainFunction+0x410>
     ba2:	2d a1       	ldd	r18, Y+37	; 0x25
     ba4:	3e a1       	ldd	r19, Y+38	; 0x26
     ba6:	25 30       	cpi	r18, 0x05	; 5
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <Safe_MainFunction+0x68>
     bac:	ad c1       	rjmp	.+858    	; 0xf08 <Safe_MainFunction+0x3c2>
     bae:	8d a1       	ldd	r24, Y+37	; 0x25
     bb0:	9e a1       	ldd	r25, Y+38	; 0x26
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	91 05       	cpc	r25, r1
     bb6:	0c f4       	brge	.+2      	; 0xbba <Safe_MainFunction+0x74>
     bb8:	6e c1       	rjmp	.+732    	; 0xe96 <Safe_MainFunction+0x350>
     bba:	2d a1       	ldd	r18, Y+37	; 0x25
     bbc:	3e a1       	ldd	r19, Y+38	; 0x26
     bbe:	26 30       	cpi	r18, 0x06	; 6
     bc0:	31 05       	cpc	r19, r1
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <Safe_MainFunction+0x80>
     bc4:	aa c1       	rjmp	.+852    	; 0xf1a <Safe_MainFunction+0x3d4>
     bc6:	c7 c1       	rjmp	.+910    	; 0xf56 <Safe_MainFunction+0x410>
	case New_passward:
		LCD_vidSendCommand(lcd_CLR);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Enter_New_Pass();
     bce:	0e 94 b4 07 	call	0xf68	; 0xf68 <Enter_New_Pass>
		sum1 = Password_Data();
     bd2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
     bd6:	8c a3       	std	Y+36, r24	; 0x24

		Confirm_Pass();
     bd8:	0e 94 24 09 	call	0x1248	; 0x1248 <Confirm_Pass>
		sum2 = Password_Data();
     bdc:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
     be0:	8b a3       	std	Y+35, r24	; 0x23

		LCD_vidSendCommand(lcd_CLR);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Confirmation(sum1, sum2);
     be8:	8c a1       	ldd	r24, Y+36	; 0x24
     bea:	6b a1       	ldd	r22, Y+35	; 0x23
     bec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Confirmation>

		key_value = KEYPAD_READ();
     bf0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
     bf4:	8f 8f       	std	Y+31, r24	; 0x1f
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a8 e4       	ldi	r26, 0x48	; 72
     bfc:	b3 e4       	ldi	r27, 0x43	; 67
     bfe:	89 8f       	std	Y+25, r24	; 0x19
     c00:	9a 8f       	std	Y+26, r25	; 0x1a
     c02:	ab 8f       	std	Y+27, r26	; 0x1b
     c04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c06:	69 8d       	ldd	r22, Y+25	; 0x19
     c08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a e7       	ldi	r20, 0x7A	; 122
     c14:	55 e4       	ldi	r21, 0x45	; 69
     c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8d 8b       	std	Y+21, r24	; 0x15
     c20:	9e 8b       	std	Y+22, r25	; 0x16
     c22:	af 8b       	std	Y+23, r26	; 0x17
     c24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c26:	6d 89       	ldd	r22, Y+21	; 0x15
     c28:	7e 89       	ldd	r23, Y+22	; 0x16
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	2c f4       	brge	.+10     	; 0xc48 <Safe_MainFunction+0x102>
		__ticks = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9c 8b       	std	Y+20, r25	; 0x14
     c44:	8b 8b       	std	Y+19, r24	; 0x13
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <Safe_MainFunction+0x180>
	else if (__tmp > 65535)
     c48:	6d 89       	ldd	r22, Y+21	; 0x15
     c4a:	7e 89       	ldd	r23, Y+22	; 0x16
     c4c:	8f 89       	ldd	r24, Y+23	; 0x17
     c4e:	98 8d       	ldd	r25, Y+24	; 0x18
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5c:	18 16       	cp	r1, r24
     c5e:	4c f5       	brge	.+82     	; 0xcb2 <Safe_MainFunction+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c60:	69 8d       	ldd	r22, Y+25	; 0x19
     c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9c 8b       	std	Y+20, r25	; 0x14
     c86:	8b 8b       	std	Y+19, r24	; 0x13
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <Safe_MainFunction+0x162>
     c8a:	80 e9       	ldi	r24, 0x90	; 144
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9a 8b       	std	Y+18, r25	; 0x12
     c90:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c92:	89 89       	ldd	r24, Y+17	; 0x11
     c94:	9a 89       	ldd	r25, Y+18	; 0x12
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <Safe_MainFunction+0x150>
     c9a:	9a 8b       	std	Y+18, r25	; 0x12
     c9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ca0:	9c 89       	ldd	r25, Y+20	; 0x14
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9c 8b       	std	Y+20, r25	; 0x14
     ca6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca8:	8b 89       	ldd	r24, Y+19	; 0x13
     caa:	9c 89       	ldd	r25, Y+20	; 0x14
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	69 f7       	brne	.-38     	; 0xc8a <Safe_MainFunction+0x144>
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <Safe_MainFunction+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	6d 89       	ldd	r22, Y+21	; 0x15
     cb4:	7e 89       	ldd	r23, Y+22	; 0x16
     cb6:	8f 89       	ldd	r24, Y+23	; 0x17
     cb8:	98 8d       	ldd	r25, Y+24	; 0x18
     cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9c 8b       	std	Y+20, r25	; 0x14
     cc4:	8b 8b       	std	Y+19, r24	; 0x13
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	9c 89       	ldd	r25, Y+20	; 0x14
     cca:	98 8b       	std	Y+16, r25	; 0x10
     ccc:	8f 87       	std	Y+15, r24	; 0x0f
     cce:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd0:	98 89       	ldd	r25, Y+16	; 0x10
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <Safe_MainFunction+0x18c>
     cd6:	98 8b       	std	Y+16, r25	; 0x10
     cd8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		if (key_value == 'C') {
     cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cdc:	83 34       	cpi	r24, 0x43	; 67
     cde:	31 f4       	brne	.+12     	; 0xcec <Safe_MainFunction+0x1a6>
			LCD_vidSendCommand(lcd_CLR);
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			STATE = New_passward;
     ce6:	10 92 4a 01 	sts	0x014A, r1
     cea:	35 c1       	rjmp	.+618    	; 0xf56 <Safe_MainFunction+0x410>
		} else if (key_value == 'R') {
     cec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cee:	82 35       	cpi	r24, 0x52	; 82
     cf0:	31 f4       	brne	.+12     	; 0xcfe <Safe_MainFunction+0x1b8>
			Close();
     cf2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Old_passward;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	80 93 4a 01 	sts	0x014A, r24
     cfc:	2c c1       	rjmp	.+600    	; 0xf56 <Safe_MainFunction+0x410>
		} else if (key_value == 'L') {
     cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d00:	8c 34       	cpi	r24, 0x4C	; 76
     d02:	31 f4       	brne	.+12     	; 0xd10 <Safe_MainFunction+0x1ca>
			Close();
     d04:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Safe_closed;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 4a 01 	sts	0x014A, r24
     d0e:	23 c1       	rjmp	.+582    	; 0xf56 <Safe_MainFunction+0x410>
		} else {
			STATE = Safe_opened;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 4a 01 	sts	0x014A, r24
     d16:	1f c1       	rjmp	.+574    	; 0xf56 <Safe_MainFunction+0x410>

		break;

	case Safe_opened:

		LCD_vidSendCommand(lcd_CLR);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Safe_Opened();
     d1e:	0e 94 8d 0a 	call	0x151a	; 0x151a <Safe_Opened>
		key_value = KEYPAD_READ();
     d22:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a8 e4       	ldi	r26, 0x48	; 72
     d2e:	b3 e4       	ldi	r27, 0x43	; 67
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	9c 87       	std	Y+12, r25	; 0x0c
     d34:	ad 87       	std	Y+13, r26	; 0x0d
     d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	55 e4       	ldi	r21, 0x45	; 69
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
     d54:	a9 87       	std	Y+9, r26	; 0x09
     d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <Safe_MainFunction+0x234>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <Safe_MainFunction+0x2b2>
	else if (__tmp > 65535)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <Safe_MainFunction+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	0f c0       	rjmp	.+30     	; 0xdda <Safe_MainFunction+0x294>
     dbc:	80 e9       	ldi	r24, 0x90	; 144
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <Safe_MainFunction+0x282>
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <Safe_MainFunction+0x276>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <Safe_MainFunction+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <Safe_MainFunction+0x2be>
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		if (key_value == 'R') {
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	82 35       	cpi	r24, 0x52	; 82
     e10:	31 f4       	brne	.+12     	; 0xe1e <Safe_MainFunction+0x2d8>
			Close();
     e12:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Old_passward;
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	80 93 4a 01 	sts	0x014A, r24
     e1c:	9c c0       	rjmp	.+312    	; 0xf56 <Safe_MainFunction+0x410>
		} else if (key_value == 'L') {
     e1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e20:	8c 34       	cpi	r24, 0x4C	; 76
     e22:	09 f0       	breq	.+2      	; 0xe26 <Safe_MainFunction+0x2e0>
     e24:	98 c0       	rjmp	.+304    	; 0xf56 <Safe_MainFunction+0x410>
			Close();
     e26:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Safe_closed;
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	80 93 4a 01 	sts	0x014A, r24
     e30:	92 c0       	rjmp	.+292    	; 0xf56 <Safe_MainFunction+0x410>
		}
		break;

	case Safe_closed:
		LCD_vidSendCommand(lcd_CLR);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Safe_Closed();
     e38:	0e 94 91 0b 	call	0x1722	; 0x1722 <Safe_Closed>
		STATE = Your_passward;
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	80 93 4a 01 	sts	0x014A, r24
     e42:	89 c0       	rjmp	.+274    	; 0xf56 <Safe_MainFunction+0x410>
		break;

	case Old_passward:
		LCD_vidSendCommand(lcd_CLR);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Enter_Old_Pass();
     e4a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <Enter_Old_Pass>
		sum5 = Password_Data();
     e4e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
     e52:	88 a3       	std	Y+32, r24	; 0x20
		if (sum5 == sum1)
     e54:	98 a1       	ldd	r25, Y+32	; 0x20
     e56:	8c a1       	ldd	r24, Y+36	; 0x24
     e58:	98 17       	cp	r25, r24
     e5a:	19 f4       	brne	.+6      	; 0xe62 <Safe_MainFunction+0x31c>
			STATE = New_passward;
     e5c:	10 92 4a 01 	sts	0x014A, r1
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <Safe_MainFunction+0x322>
		else {
			STATE = HARAMY;
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	80 93 4a 01 	sts	0x014A, r24
		}
		key_value = KEYPAD_READ();
     e68:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
     e6c:	8f 8f       	std	Y+31, r24	; 0x1f
		if (key_value == 'C') {
     e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e70:	83 34       	cpi	r24, 0x43	; 67
     e72:	39 f4       	brne	.+14     	; 0xe82 <Safe_MainFunction+0x33c>
			LCD_vidSendCommand(lcd_CLR);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			STATE = Old_passward;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	80 93 4a 01 	sts	0x014A, r24
     e80:	6a c0       	rjmp	.+212    	; 0xf56 <Safe_MainFunction+0x410>
		} else if (key_value == 'L') {
     e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e84:	8c 34       	cpi	r24, 0x4C	; 76
     e86:	09 f0       	breq	.+2      	; 0xe8a <Safe_MainFunction+0x344>
     e88:	66 c0       	rjmp	.+204    	; 0xf56 <Safe_MainFunction+0x410>
			Close();
     e8a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Safe_closed;
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	80 93 4a 01 	sts	0x014A, r24
     e94:	60 c0       	rjmp	.+192    	; 0xf56 <Safe_MainFunction+0x410>
		}
		break;

	case Your_passward:
		LCD_vidSendCommand(lcd_CLR);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Enter_Your_Pass();
     e9c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <Enter_Your_Pass>
		sum3 = Password_Data();
     ea0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
     ea4:	8a a3       	std	Y+34, r24	; 0x22
		key_value = KEYPAD_READ();
     ea6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
     eaa:	8f 8f       	std	Y+31, r24	; 0x1f
		if (key_value == 'C') {
     eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eae:	83 34       	cpi	r24, 0x43	; 67
     eb0:	39 f4       	brne	.+14     	; 0xec0 <Safe_MainFunction+0x37a>
			LCD_vidSendCommand(lcd_CLR);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			STATE = Your_passward;
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	80 93 4a 01 	sts	0x014A, r24
     ebe:	1d c0       	rjmp	.+58     	; 0xefa <Safe_MainFunction+0x3b4>
		} else if (key_value == 'R') {
     ec0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec2:	82 35       	cpi	r24, 0x52	; 82
     ec4:	31 f4       	brne	.+12     	; 0xed2 <Safe_MainFunction+0x38c>
			Close();
     ec6:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Old_passward;
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	80 93 4a 01 	sts	0x014A, r24
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <Safe_MainFunction+0x3b4>
		} else if (key_value == 'L') {
     ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed4:	8c 34       	cpi	r24, 0x4C	; 76
     ed6:	31 f4       	brne	.+12     	; 0xee4 <Safe_MainFunction+0x39e>
			Close();
     ed8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Close>
			STATE = Safe_closed;
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	80 93 4a 01 	sts	0x014A, r24
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <Safe_MainFunction+0x3b4>
		} else {
			f1 = Confirmation_Old_Pass(sum3, sum1);
     ee4:	8a a1       	ldd	r24, Y+34	; 0x22
     ee6:	48 2f       	mov	r20, r24
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	8c a1       	ldd	r24, Y+36	; 0x24
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	ca 01       	movw	r24, r20
     ef2:	b9 01       	movw	r22, r18
     ef4:	0e 94 2e 11 	call	0x225c	; 0x225c <Confirmation_Old_Pass>
     ef8:	8e 8f       	std	Y+30, r24	; 0x1e
		}
		if (f1 == 2) {
     efa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	59 f5       	brne	.+86     	; 0xf56 <Safe_MainFunction+0x410>

			STATE = HARAMY;
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	80 93 4a 01 	sts	0x014A, r24
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <Safe_MainFunction+0x410>
		}
		break;

	case HARAMY:
		LCD_vidSendCommand(lcd_CLR);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		//SAFE_Init();
		Haramy();
     f0e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Haramy>
		STATE = ADMIN;
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	80 93 4a 01 	sts	0x014A, r24
     f18:	1e c0       	rjmp	.+60     	; 0xf56 <Safe_MainFunction+0x410>
		break;

	case ADMIN:
		LCD_vidSendCommand(lcd_CLR);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		Call_Admin();
     f20:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Call_Admin>
		sum4 = Password_Admin();
     f24:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Password_Admin>
     f28:	89 a3       	std	Y+33, r24	; 0x21
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <Safe_MainFunction+0x40a>

		while (flag) {
			if (sum4 != 5) {
     f2c:	89 a1       	ldd	r24, Y+33	; 0x21
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	49 f0       	breq	.+18     	; 0xf44 <Safe_MainFunction+0x3fe>
				LCD_vidSendCommand(lcd_CLR);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
				Call_Admin_Pass();
     f38:	0e 94 57 10 	call	0x20ae	; 0x20ae <Call_Admin_Pass>
				sum4 = Password_Admin();
     f3c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Password_Admin>
     f40:	89 a3       	std	Y+33, r24	; 0x21
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <Safe_MainFunction+0x40a>
			} else {
				LCD_vidSendCommand(lcd_CLR);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
				STATE = New_passward;
     f4a:	10 92 4a 01 	sts	0x014A, r1
				flag = 0;
     f4e:	1d 8e       	std	Y+29, r1	; 0x1d
	case ADMIN:
		LCD_vidSendCommand(lcd_CLR);
		Call_Admin();
		sum4 = Password_Admin();

		while (flag) {
     f50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f52:	88 23       	and	r24, r24
     f54:	59 f7       	brne	.-42     	; 0xf2c <Safe_MainFunction+0x3e6>
			}
		}
		break;

	}
}
     f56:	a6 96       	adiw	r28, 0x26	; 38
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <Enter_New_Pass>:
#include"util/delay.h"

uint8 key_value = NO_PRESSED_VALUE;
uint8 P, s, sum3, sum4, sum2, f, i = 0;

void Enter_New_Pass(void) {
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	a3 97       	sbiw	r28, 0x23	; 35
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent1[] = { "Enter New Pass:" };
     f7c:	ce 01       	movw	r24, r28
     f7e:	0f 96       	adiw	r24, 0x0f	; 15
     f80:	98 a3       	std	Y+32, r25	; 0x20
     f82:	8f 8f       	std	Y+31, r24	; 0x1f
     f84:	e0 e6       	ldi	r30, 0x60	; 96
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	fa a3       	std	Y+34, r31	; 0x22
     f8a:	e9 a3       	std	Y+33, r30	; 0x21
     f8c:	f0 e1       	ldi	r31, 0x10	; 16
     f8e:	fb a3       	std	Y+35, r31	; 0x23
     f90:	e9 a1       	ldd	r30, Y+33	; 0x21
     f92:	fa a1       	ldd	r31, Y+34	; 0x22
     f94:	00 80       	ld	r0, Z
     f96:	89 a1       	ldd	r24, Y+33	; 0x21
     f98:	9a a1       	ldd	r25, Y+34	; 0x22
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a a3       	std	Y+34, r25	; 0x22
     f9e:	89 a3       	std	Y+33, r24	; 0x21
     fa0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     fa2:	f8 a1       	ldd	r31, Y+32	; 0x20
     fa4:	00 82       	st	Z, r0
     fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa8:	98 a1       	ldd	r25, Y+32	; 0x20
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	98 a3       	std	Y+32, r25	; 0x20
     fae:	8f 8f       	std	Y+31, r24	; 0x1f
     fb0:	9b a1       	ldd	r25, Y+35	; 0x23
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	9b a3       	std	Y+35, r25	; 0x23
     fb6:	eb a1       	ldd	r30, Y+35	; 0x23
     fb8:	ee 23       	and	r30, r30
     fba:	51 f7       	brne	.-44     	; 0xf90 <Enter_New_Pass+0x28>
	LCD_vidWriteString(&Ent1[0], 14);
     fbc:	ce 01       	movw	r24, r28
     fbe:	0f 96       	adiw	r24, 0x0f	; 15
     fc0:	6e e0       	ldi	r22, 0x0E	; 14
     fc2:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent1[10], 5);
     fce:	ce 01       	movw	r24, r28
     fd0:	0f 96       	adiw	r24, 0x0f	; 15
     fd2:	0a 96       	adiw	r24, 0x0a	; 10
     fd4:	65 e0       	ldi	r22, 0x05	; 5
     fd6:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 6);
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	66 e0       	ldi	r22, 0x06	; 6
     fde:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a8 e4       	ldi	r26, 0x48	; 72
     fe8:	b3 e4       	ldi	r27, 0x43	; 67
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a e7       	ldi	r20, 0x7A	; 122
    1000:	55 e4       	ldi	r21, 0x45	; 69
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <Enter_New_Pass+0xcc>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <Enter_New_Pass+0x14a>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <Enter_New_Pass+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <Enter_New_Pass+0x12c>
    1076:	80 e9       	ldi	r24, 0x90	; 144
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <Enter_New_Pass+0x11a>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <Enter_New_Pass+0x10e>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <Enter_New_Pass+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <Enter_New_Pass+0x156>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    10c6:	a3 96       	adiw	r28, 0x23	; 35
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <Enter_Your_Pass>:

void Enter_Your_Pass(void) {
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	a4 97       	sbiw	r28, 0x24	; 36
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent1[] = { "Enter Your Pass:" };
    10ec:	ce 01       	movw	r24, r28
    10ee:	0f 96       	adiw	r24, 0x0f	; 15
    10f0:	99 a3       	std	Y+33, r25	; 0x21
    10f2:	88 a3       	std	Y+32, r24	; 0x20
    10f4:	e0 e7       	ldi	r30, 0x70	; 112
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	fb a3       	std	Y+35, r31	; 0x23
    10fa:	ea a3       	std	Y+34, r30	; 0x22
    10fc:	f1 e1       	ldi	r31, 0x11	; 17
    10fe:	fc a3       	std	Y+36, r31	; 0x24
    1100:	ea a1       	ldd	r30, Y+34	; 0x22
    1102:	fb a1       	ldd	r31, Y+35	; 0x23
    1104:	00 80       	ld	r0, Z
    1106:	8a a1       	ldd	r24, Y+34	; 0x22
    1108:	9b a1       	ldd	r25, Y+35	; 0x23
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	9b a3       	std	Y+35, r25	; 0x23
    110e:	8a a3       	std	Y+34, r24	; 0x22
    1110:	e8 a1       	ldd	r30, Y+32	; 0x20
    1112:	f9 a1       	ldd	r31, Y+33	; 0x21
    1114:	00 82       	st	Z, r0
    1116:	88 a1       	ldd	r24, Y+32	; 0x20
    1118:	99 a1       	ldd	r25, Y+33	; 0x21
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	99 a3       	std	Y+33, r25	; 0x21
    111e:	88 a3       	std	Y+32, r24	; 0x20
    1120:	9c a1       	ldd	r25, Y+36	; 0x24
    1122:	91 50       	subi	r25, 0x01	; 1
    1124:	9c a3       	std	Y+36, r25	; 0x24
    1126:	ec a1       	ldd	r30, Y+36	; 0x24
    1128:	ee 23       	and	r30, r30
    112a:	51 f7       	brne	.-44     	; 0x1100 <Enter_Your_Pass+0x28>
	LCD_vidWriteString(&Ent1[0], 15);
    112c:	ce 01       	movw	r24, r28
    112e:	0f 96       	adiw	r24, 0x0f	; 15
    1130:	6f e0       	ldi	r22, 0x0F	; 15
    1132:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent1[11], 5);
    113e:	ce 01       	movw	r24, r28
    1140:	0f 96       	adiw	r24, 0x0f	; 15
    1142:	0b 96       	adiw	r24, 0x0b	; 11
    1144:	65 e0       	ldi	r22, 0x05	; 5
    1146:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 6);
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	66 e0       	ldi	r22, 0x06	; 6
    114e:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a8 e4       	ldi	r26, 0x48	; 72
    1158:	b3 e4       	ldi	r27, 0x43	; 67
    115a:	8b 87       	std	Y+11, r24	; 0x0b
    115c:	9c 87       	std	Y+12, r25	; 0x0c
    115e:	ad 87       	std	Y+13, r26	; 0x0d
    1160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	6b 85       	ldd	r22, Y+11	; 0x0b
    1164:	7c 85       	ldd	r23, Y+12	; 0x0c
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a e7       	ldi	r20, 0x7A	; 122
    1170:	55 e4       	ldi	r21, 0x45	; 69
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8f 83       	std	Y+7, r24	; 0x07
    117c:	98 87       	std	Y+8, r25	; 0x08
    117e:	a9 87       	std	Y+9, r26	; 0x09
    1180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <Enter_Your_Pass+0xcc>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <Enter_Your_Pass+0x14a>
	else if (__tmp > 65535)
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b8:	18 16       	cp	r1, r24
    11ba:	4c f5       	brge	.+82     	; 0x120e <Enter_Your_Pass+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11be:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <Enter_Your_Pass+0x12c>
    11e6:	80 e9       	ldi	r24, 0x90	; 144
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Enter_Your_Pass+0x11a>
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f7       	brne	.-38     	; 0x11e6 <Enter_Your_Pass+0x10e>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <Enter_Your_Pass+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <Enter_Your_Pass+0x156>
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1236:	a4 96       	adiw	r28, 0x24	; 36
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Confirm_Pass>:

void Confirm_Pass(void) {
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	a1 97       	sbiw	r28, 0x21	; 33
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent2[] = { "Confirm Pass:" };
    125c:	ce 01       	movw	r24, r28
    125e:	0f 96       	adiw	r24, 0x0f	; 15
    1260:	9e 8f       	std	Y+30, r25	; 0x1e
    1262:	8d 8f       	std	Y+29, r24	; 0x1d
    1264:	e1 e8       	ldi	r30, 0x81	; 129
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	f8 a3       	std	Y+32, r31	; 0x20
    126a:	ef 8f       	std	Y+31, r30	; 0x1f
    126c:	fe e0       	ldi	r31, 0x0E	; 14
    126e:	f9 a3       	std	Y+33, r31	; 0x21
    1270:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1272:	f8 a1       	ldd	r31, Y+32	; 0x20
    1274:	00 80       	ld	r0, Z
    1276:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1278:	98 a1       	ldd	r25, Y+32	; 0x20
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1282:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1284:	00 82       	st	Z, r0
    1286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1288:	9e 8d       	ldd	r25, Y+30	; 0x1e
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	9e 8f       	std	Y+30, r25	; 0x1e
    128e:	8d 8f       	std	Y+29, r24	; 0x1d
    1290:	99 a1       	ldd	r25, Y+33	; 0x21
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	99 a3       	std	Y+33, r25	; 0x21
    1296:	e9 a1       	ldd	r30, Y+33	; 0x21
    1298:	ee 23       	and	r30, r30
    129a:	51 f7       	brne	.-44     	; 0x1270 <Confirm_Pass+0x28>
	LCD_vidSendCommand(lcd_CLR);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
	LCD_vidGotoXY(1, 1);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent2[0], 12);
    12aa:	ce 01       	movw	r24, r28
    12ac:	0f 96       	adiw	r24, 0x0f	; 15
    12ae:	6c e0       	ldi	r22, 0x0C	; 12
    12b0:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent2[8], 5);
    12bc:	ce 01       	movw	r24, r28
    12be:	0f 96       	adiw	r24, 0x0f	; 15
    12c0:	08 96       	adiw	r24, 0x08	; 8
    12c2:	65 e0       	ldi	r22, 0x05	; 5
    12c4:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 6);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	66 e0       	ldi	r22, 0x06	; 6
    12cc:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a8 e4       	ldi	r26, 0x48	; 72
    12d6:	b3 e4       	ldi	r27, 0x43	; 67
    12d8:	8b 87       	std	Y+11, r24	; 0x0b
    12da:	9c 87       	std	Y+12, r25	; 0x0c
    12dc:	ad 87       	std	Y+13, r26	; 0x0d
    12de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	55 e4       	ldi	r21, 0x45	; 69
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	8f 83       	std	Y+7, r24	; 0x07
    12fa:	98 87       	std	Y+8, r25	; 0x08
    12fc:	a9 87       	std	Y+9, r26	; 0x09
    12fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <Confirm_Pass+0xda>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <Confirm_Pass+0x158>
	else if (__tmp > 65535)
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <Confirm_Pass+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	6b 85       	ldd	r22, Y+11	; 0x0b
    133c:	7c 85       	ldd	r23, Y+12	; 0x0c
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <Confirm_Pass+0x13a>
    1364:	80 e9       	ldi	r24, 0x90	; 144
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <Confirm_Pass+0x128>
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <Confirm_Pass+0x11c>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <Confirm_Pass+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <Confirm_Pass+0x164>
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    13b4:	a1 96       	adiw	r28, 0x21	; 33
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <Welcome>:

void Welcome(void) {
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	6f 97       	sbiw	r28, 0x1f	; 31
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent3[] = { "Welcome ^-^" };
    13da:	ce 01       	movw	r24, r28
    13dc:	0f 96       	adiw	r24, 0x0f	; 15
    13de:	9c 8f       	std	Y+28, r25	; 0x1c
    13e0:	8b 8f       	std	Y+27, r24	; 0x1b
    13e2:	ef e8       	ldi	r30, 0x8F	; 143
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	fe 8f       	std	Y+30, r31	; 0x1e
    13e8:	ed 8f       	std	Y+29, r30	; 0x1d
    13ea:	fc e0       	ldi	r31, 0x0C	; 12
    13ec:	ff 8f       	std	Y+31, r31	; 0x1f
    13ee:	ed 8d       	ldd	r30, Y+29	; 0x1d
    13f0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    13f2:	00 80       	ld	r0, Z
    13f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	9e 8f       	std	Y+30, r25	; 0x1e
    13fc:	8d 8f       	std	Y+29, r24	; 0x1d
    13fe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1400:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1402:	00 82       	st	Z, r0
    1404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	9c 8f       	std	Y+28, r25	; 0x1c
    140c:	8b 8f       	std	Y+27, r24	; 0x1b
    140e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1410:	91 50       	subi	r25, 0x01	; 1
    1412:	9f 8f       	std	Y+31, r25	; 0x1f
    1414:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1416:	ee 23       	and	r30, r30
    1418:	51 f7       	brne	.-44     	; 0x13ee <Welcome+0x28>
	LCD_vidWriteString(&Ent3[0], 12);
    141a:	ce 01       	movw	r24, r28
    141c:	0f 96       	adiw	r24, 0x0f	; 15
    141e:	6c e0       	ldi	r22, 0x0C	; 12
    1420:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a8 e4       	ldi	r26, 0x48	; 72
    142a:	b3 e4       	ldi	r27, 0x43	; 67
    142c:	8b 87       	std	Y+11, r24	; 0x0b
    142e:	9c 87       	std	Y+12, r25	; 0x0c
    1430:	ad 87       	std	Y+13, r26	; 0x0d
    1432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6b 85       	ldd	r22, Y+11	; 0x0b
    1436:	7c 85       	ldd	r23, Y+12	; 0x0c
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a e7       	ldi	r20, 0x7A	; 122
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	a9 87       	std	Y+9, r26	; 0x09
    1452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <Welcome+0xb0>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <Welcome+0x12e>
	else if (__tmp > 65535)
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <Welcome+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <Welcome+0x110>
    14b8:	80 e9       	ldi	r24, 0x90	; 144
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <Welcome+0xfe>
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <Welcome+0xf2>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <Welcome+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <Welcome+0x13a>
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1508:	6f 96       	adiw	r28, 0x1f	; 31
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <Safe_Opened>:

void Safe_Opened(void) {
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	e3 97       	sbiw	r28, 0x33	; 51
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent4[] = { "Open Safe" };
    152e:	ce 01       	movw	r24, r28
    1530:	0f 96       	adiw	r24, 0x0f	; 15
    1532:	9e a3       	std	Y+38, r25	; 0x26
    1534:	8d a3       	std	Y+37, r24	; 0x25
    1536:	eb e9       	ldi	r30, 0x9B	; 155
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	f8 a7       	std	Y+40, r31	; 0x28
    153c:	ef a3       	std	Y+39, r30	; 0x27
    153e:	fa e0       	ldi	r31, 0x0A	; 10
    1540:	f9 a7       	std	Y+41, r31	; 0x29
    1542:	ef a1       	ldd	r30, Y+39	; 0x27
    1544:	f8 a5       	ldd	r31, Y+40	; 0x28
    1546:	00 80       	ld	r0, Z
    1548:	8f a1       	ldd	r24, Y+39	; 0x27
    154a:	98 a5       	ldd	r25, Y+40	; 0x28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	98 a7       	std	Y+40, r25	; 0x28
    1550:	8f a3       	std	Y+39, r24	; 0x27
    1552:	ed a1       	ldd	r30, Y+37	; 0x25
    1554:	fe a1       	ldd	r31, Y+38	; 0x26
    1556:	00 82       	st	Z, r0
    1558:	8d a1       	ldd	r24, Y+37	; 0x25
    155a:	9e a1       	ldd	r25, Y+38	; 0x26
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	9e a3       	std	Y+38, r25	; 0x26
    1560:	8d a3       	std	Y+37, r24	; 0x25
    1562:	99 a5       	ldd	r25, Y+41	; 0x29
    1564:	91 50       	subi	r25, 0x01	; 1
    1566:	99 a7       	std	Y+41, r25	; 0x29
    1568:	e9 a5       	ldd	r30, Y+41	; 0x29
    156a:	ee 23       	and	r30, r30
    156c:	51 f7       	brne	.-44     	; 0x1542 <Safe_Opened+0x28>
	const uint8 Ent[] = { "Close" };
    156e:	ce 01       	movw	r24, r28
    1570:	49 96       	adiw	r24, 0x19	; 25
    1572:	9b a7       	std	Y+43, r25	; 0x2b
    1574:	8a a7       	std	Y+42, r24	; 0x2a
    1576:	e5 ea       	ldi	r30, 0xA5	; 165
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	fd a7       	std	Y+45, r31	; 0x2d
    157c:	ec a7       	std	Y+44, r30	; 0x2c
    157e:	f6 e0       	ldi	r31, 0x06	; 6
    1580:	fe a7       	std	Y+46, r31	; 0x2e
    1582:	ec a5       	ldd	r30, Y+44	; 0x2c
    1584:	fd a5       	ldd	r31, Y+45	; 0x2d
    1586:	00 80       	ld	r0, Z
    1588:	8c a5       	ldd	r24, Y+44	; 0x2c
    158a:	9d a5       	ldd	r25, Y+45	; 0x2d
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	9d a7       	std	Y+45, r25	; 0x2d
    1590:	8c a7       	std	Y+44, r24	; 0x2c
    1592:	ea a5       	ldd	r30, Y+42	; 0x2a
    1594:	fb a5       	ldd	r31, Y+43	; 0x2b
    1596:	00 82       	st	Z, r0
    1598:	8a a5       	ldd	r24, Y+42	; 0x2a
    159a:	9b a5       	ldd	r25, Y+43	; 0x2b
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	9b a7       	std	Y+43, r25	; 0x2b
    15a0:	8a a7       	std	Y+42, r24	; 0x2a
    15a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a4:	91 50       	subi	r25, 0x01	; 1
    15a6:	9e a7       	std	Y+46, r25	; 0x2e
    15a8:	ee a5       	ldd	r30, Y+46	; 0x2e
    15aa:	ee 23       	and	r30, r30
    15ac:	51 f7       	brne	.-44     	; 0x1582 <Safe_Opened+0x68>
	const uint8 Ent1[] = { "Reset" };
    15ae:	ce 01       	movw	r24, r28
    15b0:	4f 96       	adiw	r24, 0x1f	; 31
    15b2:	98 ab       	std	Y+48, r25	; 0x30
    15b4:	8f a7       	std	Y+47, r24	; 0x2f
    15b6:	eb ea       	ldi	r30, 0xAB	; 171
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	fa ab       	std	Y+50, r31	; 0x32
    15bc:	e9 ab       	std	Y+49, r30	; 0x31
    15be:	f6 e0       	ldi	r31, 0x06	; 6
    15c0:	fb ab       	std	Y+51, r31	; 0x33
    15c2:	e9 a9       	ldd	r30, Y+49	; 0x31
    15c4:	fa a9       	ldd	r31, Y+50	; 0x32
    15c6:	00 80       	ld	r0, Z
    15c8:	89 a9       	ldd	r24, Y+49	; 0x31
    15ca:	9a a9       	ldd	r25, Y+50	; 0x32
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	9a ab       	std	Y+50, r25	; 0x32
    15d0:	89 ab       	std	Y+49, r24	; 0x31
    15d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    15d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    15d6:	00 82       	st	Z, r0
    15d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15da:	98 a9       	ldd	r25, Y+48	; 0x30
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	98 ab       	std	Y+48, r25	; 0x30
    15e0:	8f a7       	std	Y+47, r24	; 0x2f
    15e2:	9b a9       	ldd	r25, Y+51	; 0x33
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	9b ab       	std	Y+51, r25	; 0x33
    15e8:	eb a9       	ldd	r30, Y+51	; 0x33
    15ea:	ee 23       	and	r30, r30
    15ec:	51 f7       	brne	.-44     	; 0x15c2 <Safe_Opened+0xa8>
	LCD_vidWriteString(&Ent4[0], 9);
    15ee:	ce 01       	movw	r24, r28
    15f0:	0f 96       	adiw	r24, 0x0f	; 15
    15f2:	69 e0       	ldi	r22, 0x09	; 9
    15f4:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent[0], 5);
    1600:	ce 01       	movw	r24, r28
    1602:	49 96       	adiw	r24, 0x19	; 25
    1604:	65 e0       	ldi	r22, 0x05	; 5
    1606:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 7);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	67 e0       	ldi	r22, 0x07	; 7
    160e:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent1[0], 5);
    1612:	ce 01       	movw	r24, r28
    1614:	4f 96       	adiw	r24, 0x1f	; 31
    1616:	65 e0       	ldi	r22, 0x05	; 5
    1618:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	DIO_Write_Channel(PORTA3, LOW);
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Channel(PORTA4, HIGH);
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a8 e4       	ldi	r26, 0x48	; 72
    1632:	b3 e4       	ldi	r27, 0x43	; 67
    1634:	8b 87       	std	Y+11, r24	; 0x0b
    1636:	9c 87       	std	Y+12, r25	; 0x0c
    1638:	ad 87       	std	Y+13, r26	; 0x0d
    163a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	6b 85       	ldd	r22, Y+11	; 0x0b
    163e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a e7       	ldi	r20, 0x7A	; 122
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8f 83       	std	Y+7, r24	; 0x07
    1656:	98 87       	std	Y+8, r25	; 0x08
    1658:	a9 87       	std	Y+9, r26	; 0x09
    165a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <Safe_Opened+0x164>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <Safe_Opened+0x1e2>
	else if (__tmp > 65535)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <Safe_Opened+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	0f c0       	rjmp	.+30     	; 0x16de <Safe_Opened+0x1c4>
    16c0:	80 e9       	ldi	r24, 0x90	; 144
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <Safe_Opened+0x1b2>
    16d0:	9c 83       	std	Y+4, r25	; 0x04
    16d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <Safe_Opened+0x1a6>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <Safe_Opened+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <Safe_Opened+0x1ee>
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(200);
}
    1710:	e3 96       	adiw	r28, 0x33	; 51
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <Safe_Closed>:

void Safe_Closed(void) {
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	6f 97       	sbiw	r28, 0x1f	; 31
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent4[] = { "Safe Closed" };
    1736:	ce 01       	movw	r24, r28
    1738:	0f 96       	adiw	r24, 0x0f	; 15
    173a:	9c 8f       	std	Y+28, r25	; 0x1c
    173c:	8b 8f       	std	Y+27, r24	; 0x1b
    173e:	e1 eb       	ldi	r30, 0xB1	; 177
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	fe 8f       	std	Y+30, r31	; 0x1e
    1744:	ed 8f       	std	Y+29, r30	; 0x1d
    1746:	fc e0       	ldi	r31, 0x0C	; 12
    1748:	ff 8f       	std	Y+31, r31	; 0x1f
    174a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    174c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    174e:	00 80       	ld	r0, Z
    1750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	9e 8f       	std	Y+30, r25	; 0x1e
    1758:	8d 8f       	std	Y+29, r24	; 0x1d
    175a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    175c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    175e:	00 82       	st	Z, r0
    1760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	9c 8f       	std	Y+28, r25	; 0x1c
    1768:	8b 8f       	std	Y+27, r24	; 0x1b
    176a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	9f 8f       	std	Y+31, r25	; 0x1f
    1770:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1772:	ee 23       	and	r30, r30
    1774:	51 f7       	brne	.-44     	; 0x174a <Safe_Closed+0x28>
	LCD_vidWriteString(&Ent4[0], 10);
    1776:	ce 01       	movw	r24, r28
    1778:	0f 96       	adiw	r24, 0x0f	; 15
    177a:	6a e0       	ldi	r22, 0x0A	; 10
    177c:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a8 e4       	ldi	r26, 0x48	; 72
    1786:	b3 e4       	ldi	r27, 0x43	; 67
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	ad 87       	std	Y+13, r26	; 0x0d
    178e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	55 e4       	ldi	r21, 0x45	; 69
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <Safe_Closed+0xb0>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <Safe_Closed+0x12e>
	else if (__tmp > 65535)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <Safe_Closed+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <Safe_Closed+0x110>
    1814:	80 e9       	ldi	r24, 0x90	; 144
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <Safe_Closed+0xfe>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <Safe_Closed+0xf2>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <Safe_Closed+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <Safe_Closed+0x13a>
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1864:	6f 96       	adiw	r28, 0x1f	; 31
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <Enter_Old_Pass>:

void Enter_Old_Pass(void) {
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	a3 97       	sbiw	r28, 0x23	; 35
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent5[] = { "Enter Old Pass:" };
    188a:	ce 01       	movw	r24, r28
    188c:	0f 96       	adiw	r24, 0x0f	; 15
    188e:	98 a3       	std	Y+32, r25	; 0x20
    1890:	8f 8f       	std	Y+31, r24	; 0x1f
    1892:	ed eb       	ldi	r30, 0xBD	; 189
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	fa a3       	std	Y+34, r31	; 0x22
    1898:	e9 a3       	std	Y+33, r30	; 0x21
    189a:	f0 e1       	ldi	r31, 0x10	; 16
    189c:	fb a3       	std	Y+35, r31	; 0x23
    189e:	e9 a1       	ldd	r30, Y+33	; 0x21
    18a0:	fa a1       	ldd	r31, Y+34	; 0x22
    18a2:	00 80       	ld	r0, Z
    18a4:	89 a1       	ldd	r24, Y+33	; 0x21
    18a6:	9a a1       	ldd	r25, Y+34	; 0x22
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
    18ae:	ef 8d       	ldd	r30, Y+31	; 0x1f
    18b0:	f8 a1       	ldd	r31, Y+32	; 0x20
    18b2:	00 82       	st	Z, r0
    18b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b6:	98 a1       	ldd	r25, Y+32	; 0x20
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	98 a3       	std	Y+32, r25	; 0x20
    18bc:	8f 8f       	std	Y+31, r24	; 0x1f
    18be:	9b a1       	ldd	r25, Y+35	; 0x23
    18c0:	91 50       	subi	r25, 0x01	; 1
    18c2:	9b a3       	std	Y+35, r25	; 0x23
    18c4:	eb a1       	ldd	r30, Y+35	; 0x23
    18c6:	ee 23       	and	r30, r30
    18c8:	51 f7       	brne	.-44     	; 0x189e <Enter_Old_Pass+0x28>
	LCD_vidWriteString(&Ent5[0], 14);
    18ca:	ce 01       	movw	r24, r28
    18cc:	0f 96       	adiw	r24, 0x0f	; 15
    18ce:	6e e0       	ldi	r22, 0x0E	; 14
    18d0:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent5[10], 5);
    18dc:	ce 01       	movw	r24, r28
    18de:	0f 96       	adiw	r24, 0x0f	; 15
    18e0:	0a 96       	adiw	r24, 0x0a	; 10
    18e2:	65 e0       	ldi	r22, 0x05	; 5
    18e4:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 6);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	66 e0       	ldi	r22, 0x06	; 6
    18ec:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a8 e4       	ldi	r26, 0x48	; 72
    18f6:	b3 e4       	ldi	r27, 0x43	; 67
    18f8:	8b 87       	std	Y+11, r24	; 0x0b
    18fa:	9c 87       	std	Y+12, r25	; 0x0c
    18fc:	ad 87       	std	Y+13, r26	; 0x0d
    18fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	55 e4       	ldi	r21, 0x45	; 69
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	a9 87       	std	Y+9, r26	; 0x09
    191e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Enter_Old_Pass+0xcc>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <Enter_Old_Pass+0x14a>
	else if (__tmp > 65535)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <Enter_Old_Pass+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <Enter_Old_Pass+0x12c>
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <Enter_Old_Pass+0x11a>
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <Enter_Old_Pass+0x10e>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <Enter_Old_Pass+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <Enter_Old_Pass+0x156>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    19d4:	a3 96       	adiw	r28, 0x23	; 35
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <Call_Admin>:

void Call_Admin(void) {
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	6d 97       	sbiw	r28, 0x1d	; 29
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent3[] = { "Admin -_-" };
    19fa:	ce 01       	movw	r24, r28
    19fc:	0f 96       	adiw	r24, 0x0f	; 15
    19fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1a00:	89 8f       	std	Y+25, r24	; 0x19
    1a02:	ed ec       	ldi	r30, 0xCD	; 205
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	fc 8f       	std	Y+28, r31	; 0x1c
    1a08:	eb 8f       	std	Y+27, r30	; 0x1b
    1a0a:	fa e0       	ldi	r31, 0x0A	; 10
    1a0c:	fd 8f       	std	Y+29, r31	; 0x1d
    1a0e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a10:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a12:	00 80       	ld	r0, Z
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9c 8f       	std	Y+28, r25	; 0x1c
    1a1c:	8b 8f       	std	Y+27, r24	; 0x1b
    1a1e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a20:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a22:	00 82       	st	Z, r0
    1a24:	89 8d       	ldd	r24, Y+25	; 0x19
    1a26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2c:	89 8f       	std	Y+25, r24	; 0x19
    1a2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a30:	91 50       	subi	r25, 0x01	; 1
    1a32:	9d 8f       	std	Y+29, r25	; 0x1d
    1a34:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1a36:	ee 23       	and	r30, r30
    1a38:	51 f7       	brne	.-44     	; 0x1a0e <Call_Admin+0x28>
	LCD_vidWriteString(&Ent3[0], 9);
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	0f 96       	adiw	r24, 0x0f	; 15
    1a3e:	69 e0       	ldi	r22, 0x09	; 9
    1a40:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a8 e4       	ldi	r26, 0x48	; 72
    1a52:	b3 e4       	ldi	r27, 0x43	; 67
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
    1a56:	9c 87       	std	Y+12, r25	; 0x0c
    1a58:	ad 87       	std	Y+13, r26	; 0x0d
    1a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a e7       	ldi	r20, 0x7A	; 122
    1a6a:	55 e4       	ldi	r21, 0x45	; 69
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	98 87       	std	Y+8, r25	; 0x08
    1a78:	a9 87       	std	Y+9, r26	; 0x09
    1a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <Call_Admin+0xb8>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <Call_Admin+0x136>
	else if (__tmp > 65535)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <Call_Admin+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <Call_Admin+0x118>
    1ae0:	80 e9       	ldi	r24, 0x90	; 144
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <Call_Admin+0x106>
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <Call_Admin+0xfa>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <Call_Admin+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <Call_Admin+0x142>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1b30:	6d 96       	adiw	r28, 0x1d	; 29
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <Haramy>:

void Haramy(void) {
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	6e 97       	sbiw	r28, 0x1e	; 30
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent3[] = { "Haramy -_-" };
    1b56:	ce 01       	movw	r24, r28
    1b58:	0f 96       	adiw	r24, 0x0f	; 15
    1b5a:	9b 8f       	std	Y+27, r25	; 0x1b
    1b5c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b5e:	e7 ed       	ldi	r30, 0xD7	; 215
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	fd 8f       	std	Y+29, r31	; 0x1d
    1b64:	ec 8f       	std	Y+28, r30	; 0x1c
    1b66:	fb e0       	ldi	r31, 0x0B	; 11
    1b68:	fe 8f       	std	Y+30, r31	; 0x1e
    1b6a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1b6c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1b6e:	00 80       	ld	r0, Z
    1b70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b72:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	9d 8f       	std	Y+29, r25	; 0x1d
    1b78:	8c 8f       	std	Y+28, r24	; 0x1c
    1b7a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b7c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1b7e:	00 82       	st	Z, r0
    1b80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b82:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	9b 8f       	std	Y+27, r25	; 0x1b
    1b88:	8a 8f       	std	Y+26, r24	; 0x1a
    1b8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b8c:	91 50       	subi	r25, 0x01	; 1
    1b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b90:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b92:	ee 23       	and	r30, r30
    1b94:	51 f7       	brne	.-44     	; 0x1b6a <Haramy+0x28>
	LCD_vidWriteString(&Ent3[0], 10);
    1b96:	ce 01       	movw	r24, r28
    1b98:	0f 96       	adiw	r24, 0x0f	; 15
    1b9a:	6a e0       	ldi	r22, 0x0A	; 10
    1b9c:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	aa ef       	ldi	r26, 0xFA	; 250
    1ba6:	b4 e4       	ldi	r27, 0x44	; 68
    1ba8:	8b 87       	std	Y+11, r24	; 0x0b
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	ad 87       	std	Y+13, r26	; 0x0d
    1bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	98 87       	std	Y+8, r25	; 0x08
    1bcc:	a9 87       	std	Y+9, r26	; 0x09
    1bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <Haramy+0xb0>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <Haramy+0x12e>
	else if (__tmp > 65535)
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <Haramy+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <Haramy+0x110>
    1c34:	80 e9       	ldi	r24, 0x90	; 144
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <Haramy+0xfe>
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <Haramy+0xf2>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <Haramy+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <Haramy+0x13a>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    1c84:	6e 96       	adiw	r28, 0x1e	; 30
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <Password_Data>:

uint8 Password_Data(void) {
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <Password_Data+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <Password_Data+0x8>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <Password_Data+0xa>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	uint8 arr[5], sum = 0;
    1ca4:	19 82       	std	Y+1, r1	; 0x01
	s = 1000;
    1ca6:	88 ee       	ldi	r24, 0xE8	; 232
    1ca8:	80 93 50 01 	sts	0x0150, r24
	for (i = 0; i < 5; i++) {
    1cac:	10 92 4b 01 	sts	0x014B, r1
    1cb0:	36 c0       	rjmp	.+108    	; 0x1d1e <Password_Data+0x88>
		key_value = NO_PRESSED_VALUE;
    1cb2:	88 e1       	ldi	r24, 0x18	; 24
    1cb4:	80 93 fb 00 	sts	0x00FB, r24
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <Password_Data+0x2c>
		while (key_value == NO_PRESSED_VALUE) {

			key_value = KEYPAD_READ();
    1cba:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
    1cbe:	80 93 fb 00 	sts	0x00FB, r24
uint8 Password_Data(void) {
	uint8 arr[5], sum = 0;
	s = 1000;
	for (i = 0; i < 5; i++) {
		key_value = NO_PRESSED_VALUE;
		while (key_value == NO_PRESSED_VALUE) {
    1cc2:	80 91 fb 00 	lds	r24, 0x00FB
    1cc6:	88 31       	cpi	r24, 0x18	; 24
    1cc8:	c1 f3       	breq	.-16     	; 0x1cba <Password_Data+0x24>

			key_value = KEYPAD_READ();
		}
		arr[i] = key_value;
    1cca:	80 91 4b 01 	lds	r24, 0x014B
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 91 fb 00 	lds	r20, 0x00FB
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	02 96       	adiw	r24, 0x02	; 2
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	40 83       	st	Z, r20
		P = key_value * s;
    1ce2:	90 91 fb 00 	lds	r25, 0x00FB
    1ce6:	80 91 50 01 	lds	r24, 0x0150
    1cea:	98 9f       	mul	r25, r24
    1cec:	80 2d       	mov	r24, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	80 93 51 01 	sts	0x0151, r24
		s = s / 10;
    1cf4:	80 91 50 01 	lds	r24, 0x0150
    1cf8:	9a e0       	ldi	r25, 0x0A	; 10
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <__udivmodqi4>
    1d00:	80 93 50 01 	sts	0x0150, r24
		LCD_vidSendData('*');
    1d04:	8a e2       	ldi	r24, 0x2A	; 42
    1d06:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_vidSendData>
		sum = sum + P;
    1d0a:	90 91 51 01 	lds	r25, 0x0151
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	89 0f       	add	r24, r25
    1d12:	89 83       	std	Y+1, r24	; 0x01
}

uint8 Password_Data(void) {
	uint8 arr[5], sum = 0;
	s = 1000;
	for (i = 0; i < 5; i++) {
    1d14:	80 91 4b 01 	lds	r24, 0x014B
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	80 93 4b 01 	sts	0x014B, r24
    1d1e:	80 91 4b 01 	lds	r24, 0x014B
    1d22:	85 30       	cpi	r24, 0x05	; 5
    1d24:	30 f2       	brcs	.-116    	; 0x1cb2 <Password_Data+0x1c>
		s = s / 10;
		LCD_vidSendData('*');
		sum = sum + P;

	}
	return sum;
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d28:	26 96       	adiw	r28, 0x06	; 6
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <Password_Admin>:

uint8 Password_Admin(void) {
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	60 97       	sbiw	r28, 0x10	; 16
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[5], sum = 0;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
	uint8 admin_arr[5] = { '2', '0', '2', '2', 'E' };
    1d50:	ce 01       	movw	r24, r28
    1d52:	07 96       	adiw	r24, 0x07	; 7
    1d54:	9d 87       	std	Y+13, r25	; 0x0d
    1d56:	8c 87       	std	Y+12, r24	; 0x0c
    1d58:	e4 e3       	ldi	r30, 0x34	; 52
    1d5a:	f1 e0       	ldi	r31, 0x01	; 1
    1d5c:	ff 87       	std	Y+15, r31	; 0x0f
    1d5e:	ee 87       	std	Y+14, r30	; 0x0e
    1d60:	f5 e0       	ldi	r31, 0x05	; 5
    1d62:	f8 8b       	std	Y+16, r31	; 0x10
    1d64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d68:	00 80       	ld	r0, Z
    1d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	9f 87       	std	Y+15, r25	; 0x0f
    1d72:	8e 87       	std	Y+14, r24	; 0x0e
    1d74:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d76:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d78:	00 82       	st	Z, r0
    1d7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	9d 87       	std	Y+13, r25	; 0x0d
    1d82:	8c 87       	std	Y+12, r24	; 0x0c
    1d84:	98 89       	ldd	r25, Y+16	; 0x10
    1d86:	91 50       	subi	r25, 0x01	; 1
    1d88:	98 8b       	std	Y+16, r25	; 0x10
    1d8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1d8c:	ee 23       	and	r30, r30
    1d8e:	51 f7       	brne	.-44     	; 0x1d64 <Password_Admin+0x2a>

	for (i = 0; i < 5; i++) {
    1d90:	10 92 4b 01 	sts	0x014B, r1
    1d94:	39 c0       	rjmp	.+114    	; 0x1e08 <Password_Admin+0xce>
		key_value = NO_PRESSED_VALUE;
    1d96:	88 e1       	ldi	r24, 0x18	; 24
    1d98:	80 93 fb 00 	sts	0x00FB, r24
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <Password_Admin+0x6c>
		while (key_value == NO_PRESSED_VALUE) {
			key_value = KEYPAD_READ();
    1d9e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
    1da2:	80 93 fb 00 	sts	0x00FB, r24
	uint8 arr[5], sum = 0;
	uint8 admin_arr[5] = { '2', '0', '2', '2', 'E' };

	for (i = 0; i < 5; i++) {
		key_value = NO_PRESSED_VALUE;
		while (key_value == NO_PRESSED_VALUE) {
    1da6:	80 91 fb 00 	lds	r24, 0x00FB
    1daa:	88 31       	cpi	r24, 0x18	; 24
    1dac:	c1 f3       	breq	.-16     	; 0x1d9e <Password_Admin+0x64>
			key_value = KEYPAD_READ();
		}

		arr[i] = key_value;
    1dae:	80 91 4b 01 	lds	r24, 0x014B
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 91 fb 00 	lds	r20, 0x00FB
    1dba:	ce 01       	movw	r24, r28
    1dbc:	02 96       	adiw	r24, 0x02	; 2
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	e2 0f       	add	r30, r18
    1dc2:	f3 1f       	adc	r31, r19
    1dc4:	40 83       	st	Z, r20
		if (arr[i] != admin_arr[i])
    1dc6:	80 91 4b 01 	lds	r24, 0x014B
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	ce 01       	movw	r24, r28
    1dd0:	02 96       	adiw	r24, 0x02	; 2
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	40 81       	ld	r20, Z
    1dda:	80 91 4b 01 	lds	r24, 0x014B
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ce 01       	movw	r24, r28
    1de4:	07 96       	adiw	r24, 0x07	; 7
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	80 81       	ld	r24, Z
    1dee:	48 17       	cp	r20, r24
    1df0:	19 f4       	brne	.+6      	; 0x1df8 <Password_Admin+0xbe>
			sum = sum + 0;
		else
			sum = sum + 1;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidSendData('*');
    1df8:	8a e2       	ldi	r24, 0x2A	; 42
    1dfa:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_vidSendData>

uint8 Password_Admin(void) {
	uint8 arr[5], sum = 0;
	uint8 admin_arr[5] = { '2', '0', '2', '2', 'E' };

	for (i = 0; i < 5; i++) {
    1dfe:	80 91 4b 01 	lds	r24, 0x014B
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 4b 01 	sts	0x014B, r24
    1e08:	80 91 4b 01 	lds	r24, 0x014B
    1e0c:	85 30       	cpi	r24, 0x05	; 5
    1e0e:	18 f2       	brcs	.-122    	; 0x1d96 <Password_Admin+0x5c>
			sum = sum + 0;
		else
			sum = sum + 1;
		LCD_vidSendData('*');
	}
	return sum;
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e12:	60 96       	adiw	r28, 0x10	; 16
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <Close>:

void Close(void) {
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	2f 97       	sbiw	r28, 0x0f	; 15
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
    1e3c:	83 c0       	rjmp	.+262    	; 0x1f44 <Close+0x120>
	while (flag) {
		DIO_Write_Channel(PORTA3, HIGH);
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
		DIO_Write_Channel(PORTA4, LOW);
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e8       	ldi	r25, 0x80	; 128
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b5 e4       	ldi	r27, 0x45	; 69
    1e56:	8b 87       	std	Y+11, r24	; 0x0b
    1e58:	9c 87       	std	Y+12, r25	; 0x0c
    1e5a:	ad 87       	std	Y+13, r26	; 0x0d
    1e5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	55 e4       	ldi	r21, 0x45	; 69
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8f 83       	std	Y+7, r24	; 0x07
    1e78:	98 87       	std	Y+8, r25	; 0x08
    1e7a:	a9 87       	std	Y+9, r26	; 0x09
    1e7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <Close+0x7c>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <Close+0xfa>
	else if (__tmp > 65535)
    1ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea2:	78 85       	ldd	r23, Y+8	; 0x08
    1ea4:	89 85       	ldd	r24, Y+9	; 0x09
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <Close+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <Close+0xdc>
    1ee2:	80 e9       	ldi	r24, 0x90	; 144
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <Close+0xca>
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <Close+0xbe>
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <Close+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0c:	78 85       	ldd	r23, Y+8	; 0x08
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <Close+0x106>
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		DIO_Write_Channel(PORTA3, LOW);
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
		DIO_Write_Channel(PORTA4, LOW);
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
		flag = 0;
    1f42:	1f 86       	std	Y+15, r1	; 0x0f
	return sum;
}

void Close(void) {
	uint8 flag = 1;
	while (flag) {
    1f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f46:	88 23       	and	r24, r24
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <Close+0x128>
    1f4a:	79 cf       	rjmp	.-270    	; 0x1e3e <Close+0x1a>
		_delay_ms(3000);
		DIO_Write_Channel(PORTA3, LOW);
		DIO_Write_Channel(PORTA4, LOW);
		flag = 0;
	}
}
    1f4c:	2f 96       	adiw	r28, 0x0f	; 15
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <Confirmation>:

void Confirmation(uint8 sum1, uint8 sum2) {
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	61 97       	sbiw	r28, 0x11	; 17
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	88 8b       	std	Y+16, r24	; 0x10
    1f74:	69 8b       	std	Y+17, r22	; 0x11
	uint8 flag = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	8f 87       	std	Y+15, r24	; 0x0f
    1f7a:	13 c0       	rjmp	.+38     	; 0x1fa2 <Confirmation+0x44>
	while (flag) {
		if (sum1 == sum2) {
    1f7c:	98 89       	ldd	r25, Y+16	; 0x10
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	98 17       	cp	r25, r24
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <Confirmation+0x2a>
			flag = 0;
    1f84:	1f 86       	std	Y+15, r1	; 0x0f
    1f86:	0d c0       	rjmp	.+26     	; 0x1fa2 <Confirmation+0x44>
		} else {
			Enter_New_Pass();
    1f88:	0e 94 b4 07 	call	0xf68	; 0xf68 <Enter_New_Pass>
			sum1 = Password_Data();
    1f8c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
    1f90:	88 8b       	std	Y+16, r24	; 0x10
			LCD_vidSendCommand(lcd_CLR);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			Confirm_Pass();
    1f98:	0e 94 24 09 	call	0x1248	; 0x1248 <Confirm_Pass>
			sum2 = Password_Data();
    1f9c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
	}
}

void Confirmation(uint8 sum1, uint8 sum2) {
	uint8 flag = 1;
	while (flag) {
    1fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa4:	88 23       	and	r24, r24
    1fa6:	51 f7       	brne	.-44     	; 0x1f7c <Confirmation+0x1e>
			LCD_vidSendCommand(lcd_CLR);
			Confirm_Pass();
			sum2 = Password_Data();
		}
	}
	LCD_vidSendCommand(lcd_CLR);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
	Welcome();
    1fae:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Welcome>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	aa ef       	ldi	r26, 0xFA	; 250
    1fb8:	b4 e4       	ldi	r27, 0x44	; 68
    1fba:	8b 87       	std	Y+11, r24	; 0x0b
    1fbc:	9c 87       	std	Y+12, r25	; 0x0c
    1fbe:	ad 87       	std	Y+13, r26	; 0x0d
    1fc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8f 83       	std	Y+7, r24	; 0x07
    1fdc:	98 87       	std	Y+8, r25	; 0x08
    1fde:	a9 87       	std	Y+9, r26	; 0x09
    1fe0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe4:	78 85       	ldd	r23, Y+8	; 0x08
    1fe6:	89 85       	ldd	r24, Y+9	; 0x09
    1fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <Confirmation+0xa6>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <Confirmation+0x124>
	else if (__tmp > 65535)
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <Confirmation+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6b 85       	ldd	r22, Y+11	; 0x0b
    201e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2020:	8d 85       	ldd	r24, Y+13	; 0x0d
    2022:	9e 85       	ldd	r25, Y+14	; 0x0e
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <Confirmation+0x106>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	8b 83       	std	Y+3, r24	; 0x03
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <Confirmation+0xf4>
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9e 83       	std	Y+6, r25	; 0x06
    2062:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <Confirmation+0xe8>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <Confirmation+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6f 81       	ldd	r22, Y+7	; 0x07
    2070:	78 85       	ldd	r23, Y+8	; 0x08
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	9a 83       	std	Y+2, r25	; 0x02
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <Confirmation+0x130>
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_vidSendCommand(lcd_CLR);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
}
    209c:	61 96       	adiw	r28, 0x11	; 17
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <Call_Admin_Pass>:

void Call_Admin_Pass(void) {
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	a9 97       	sbiw	r28, 0x29	; 41
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
	const uint8 Ent1[] = { "Call Admin" };
    20c2:	ce 01       	movw	r24, r28
    20c4:	0f 96       	adiw	r24, 0x0f	; 15
    20c6:	99 a3       	std	Y+33, r25	; 0x21
    20c8:	88 a3       	std	Y+32, r24	; 0x20
    20ca:	e2 ee       	ldi	r30, 0xE2	; 226
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	fb a3       	std	Y+35, r31	; 0x23
    20d0:	ea a3       	std	Y+34, r30	; 0x22
    20d2:	fb e0       	ldi	r31, 0x0B	; 11
    20d4:	fc a3       	std	Y+36, r31	; 0x24
    20d6:	ea a1       	ldd	r30, Y+34	; 0x22
    20d8:	fb a1       	ldd	r31, Y+35	; 0x23
    20da:	00 80       	ld	r0, Z
    20dc:	8a a1       	ldd	r24, Y+34	; 0x22
    20de:	9b a1       	ldd	r25, Y+35	; 0x23
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9b a3       	std	Y+35, r25	; 0x23
    20e4:	8a a3       	std	Y+34, r24	; 0x22
    20e6:	e8 a1       	ldd	r30, Y+32	; 0x20
    20e8:	f9 a1       	ldd	r31, Y+33	; 0x21
    20ea:	00 82       	st	Z, r0
    20ec:	88 a1       	ldd	r24, Y+32	; 0x20
    20ee:	99 a1       	ldd	r25, Y+33	; 0x21
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	99 a3       	std	Y+33, r25	; 0x21
    20f4:	88 a3       	std	Y+32, r24	; 0x20
    20f6:	9c a1       	ldd	r25, Y+36	; 0x24
    20f8:	91 50       	subi	r25, 0x01	; 1
    20fa:	9c a3       	std	Y+36, r25	; 0x24
    20fc:	ec a1       	ldd	r30, Y+36	; 0x24
    20fe:	ee 23       	and	r30, r30
    2100:	51 f7       	brne	.-44     	; 0x20d6 <Call_Admin_Pass+0x28>
	const uint8 Ent2[] = { "Pass:" };
    2102:	ce 01       	movw	r24, r28
    2104:	4a 96       	adiw	r24, 0x1a	; 26
    2106:	9e a3       	std	Y+38, r25	; 0x26
    2108:	8d a3       	std	Y+37, r24	; 0x25
    210a:	ed ee       	ldi	r30, 0xED	; 237
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	f8 a7       	std	Y+40, r31	; 0x28
    2110:	ef a3       	std	Y+39, r30	; 0x27
    2112:	f6 e0       	ldi	r31, 0x06	; 6
    2114:	f9 a7       	std	Y+41, r31	; 0x29
    2116:	ef a1       	ldd	r30, Y+39	; 0x27
    2118:	f8 a5       	ldd	r31, Y+40	; 0x28
    211a:	00 80       	ld	r0, Z
    211c:	8f a1       	ldd	r24, Y+39	; 0x27
    211e:	98 a5       	ldd	r25, Y+40	; 0x28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	98 a7       	std	Y+40, r25	; 0x28
    2124:	8f a3       	std	Y+39, r24	; 0x27
    2126:	ed a1       	ldd	r30, Y+37	; 0x25
    2128:	fe a1       	ldd	r31, Y+38	; 0x26
    212a:	00 82       	st	Z, r0
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	9e a3       	std	Y+38, r25	; 0x26
    2134:	8d a3       	std	Y+37, r24	; 0x25
    2136:	99 a5       	ldd	r25, Y+41	; 0x29
    2138:	91 50       	subi	r25, 0x01	; 1
    213a:	99 a7       	std	Y+41, r25	; 0x29
    213c:	e9 a5       	ldd	r30, Y+41	; 0x29
    213e:	ee 23       	and	r30, r30
    2140:	51 f7       	brne	.-44     	; 0x2116 <Call_Admin_Pass+0x68>
	LCD_vidWriteString(&Ent1[0], 10);
    2142:	ce 01       	movw	r24, r28
    2144:	0f 96       	adiw	r24, 0x0f	; 15
    2146:	6a e0       	ldi	r22, 0x0A	; 10
    2148:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 1);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
	LCD_vidWriteString(&Ent2[0], 5);
    2154:	ce 01       	movw	r24, r28
    2156:	4a 96       	adiw	r24, 0x1a	; 26
    2158:	65 e0       	ldi	r22, 0x05	; 5
    215a:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
	LCD_vidGotoXY(2, 6);
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	66 e0       	ldi	r22, 0x06	; 6
    2162:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_vidGotoXY>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a8 e4       	ldi	r26, 0x48	; 72
    216c:	b3 e4       	ldi	r27, 0x43	; 67
    216e:	8b 87       	std	Y+11, r24	; 0x0b
    2170:	9c 87       	std	Y+12, r25	; 0x0c
    2172:	ad 87       	std	Y+13, r26	; 0x0d
    2174:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6b 85       	ldd	r22, Y+11	; 0x0b
    2178:	7c 85       	ldd	r23, Y+12	; 0x0c
    217a:	8d 85       	ldd	r24, Y+13	; 0x0d
    217c:	9e 85       	ldd	r25, Y+14	; 0x0e
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	55 e4       	ldi	r21, 0x45	; 69
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8f 83       	std	Y+7, r24	; 0x07
    2190:	98 87       	std	Y+8, r25	; 0x08
    2192:	a9 87       	std	Y+9, r26	; 0x09
    2194:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <Call_Admin_Pass+0x10a>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <Call_Admin_Pass+0x188>
	else if (__tmp > 65535)
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <Call_Admin_Pass+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <Call_Admin_Pass+0x16a>
    21fa:	80 e9       	ldi	r24, 0x90	; 144
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <Call_Admin_Pass+0x158>
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <Call_Admin_Pass+0x14c>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <Call_Admin_Pass+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Call_Admin_Pass+0x194>
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    224a:	a9 96       	adiw	r28, 0x29	; 41
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <Confirmation_Old_Pass>:

uint8 Confirmation_Old_Pass(uint8 sum3, uint8 sum1) {
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <Confirmation_Old_Pass+0x6>
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 f = 0;
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	17 c0       	rjmp	.+46     	; 0x229e <Confirmation_Old_Pass+0x42>
	while (f < 2) {
		if (sum3 != sum1) {
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	98 17       	cp	r25, r24
    2276:	61 f0       	breq	.+24     	; 0x2290 <Confirmation_Old_Pass+0x34>
			LCD_vidSendCommand(lcd_CLR);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			Enter_Your_Pass();
    227e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <Enter_Your_Pass>
			sum3 = Password_Data();
    2282:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Password_Data>
    2286:	8a 83       	std	Y+2, r24	; 0x02
			f++;
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	8f 5f       	subi	r24, 0xFF	; 255
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	07 c0       	rjmp	.+14     	; 0x229e <Confirmation_Old_Pass+0x42>
		} else {
			f = 4;
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCommand(lcd_CLR);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			Welcome();
    229a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Welcome>
	_delay_ms(200);
}

uint8 Confirmation_Old_Pass(uint8 sum3, uint8 sum1) {
	uint8 f = 0;
	while (f < 2) {
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	30 f3       	brcs	.-52     	; 0x2270 <Confirmation_Old_Pass+0x14>
			f = 4;
			LCD_vidSendCommand(lcd_CLR);
			Welcome();
		}
	}
	return f;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <Clear>:
			_delay_ms(5);
		}
	}
}*/

void Clear(void) {
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	0f 92       	push	r0
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
	uint8 key = KEYPAD_READ();
    22bc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <KEYPAD_READ>
    22c0:	89 83       	std	Y+1, r24	; 0x01
	if (key == 'C') {
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	83 34       	cpi	r24, 0x43	; 67
    22c6:	19 f4       	brne	.+6      	; 0x22ce <Clear+0x1c>
		LCD_vidSendCommand(lcd_CLR);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
	}
}
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <DIO_INIT>:

uint8 *REG_ARR[12] = { DDRA_Address, DDRB_Address, DDRC_Address, DDRD_Address,
PORTA_Address, PORTB_Address, PORTC_Address, PORTD_Address,
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <DIO_INIT+0x6>
    22dc:	00 d0       	rcall	.+0      	; 0x22de <DIO_INIT+0x8>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <DIO_INIT+0xa>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	bd c0       	rjmp	.+378    	; 0x2462 <DIO_INIT+0x18c>
		PIN_STATE = DIO_PIN_CONFG[i];
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	fc 01       	movw	r30, r24
    22f0:	ec 5e       	subi	r30, 0xEC	; 236
    22f2:	fe 4f       	sbci	r31, 0xFE	; 254
    22f4:	80 81       	ld	r24, Z
    22f6:	8c 83       	std	Y+4, r24	; 0x04
		PIN_VALUE = i % 8;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	87 70       	andi	r24, 0x07	; 7
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		PORT_STATE = i / 8;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	86 95       	lsr	r24
    2302:	86 95       	lsr	r24
    2304:	86 95       	lsr	r24
    2306:	8a 83       	std	Y+2, r24	; 0x02
		switch (PIN_STATE) {
    2308:	8c 81       	ldd	r24, Y+4	; 0x04
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3e 83       	std	Y+6, r19	; 0x06
    2310:	2d 83       	std	Y+5, r18	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	81 f1       	breq	.+96     	; 0x237c <DIO_INIT+0xa6>
    231c:	2d 81       	ldd	r18, Y+5	; 0x05
    231e:	3e 81       	ldd	r19, Y+6	; 0x06
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <DIO_INIT+0x52>
    2326:	75 c0       	rjmp	.+234    	; 0x2412 <DIO_INIT+0x13c>
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	09 f0       	breq	.+2      	; 0x2332 <DIO_INIT+0x5c>
    2330:	95 c0       	rjmp	.+298    	; 0x245c <DIO_INIT+0x186>
		case OUTPUT:
			SET_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	fc 01       	movw	r30, r24
    233e:	e4 50       	subi	r30, 0x04	; 4
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	a0 81       	ld	r26, Z
    2344:	b1 81       	ldd	r27, Z+1	; 0x01
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	fc 01       	movw	r30, r24
    2352:	e4 50       	subi	r30, 0x04	; 4
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	01 90       	ld	r0, Z+
    2358:	f0 81       	ld	r31, Z
    235a:	e0 2d       	mov	r30, r0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <DIO_INIT+0x9c>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <DIO_INIT+0x98>
    2376:	84 2b       	or	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	70 c0       	rjmp	.+224    	; 0x245c <DIO_INIT+0x186>
			break;
		case INPUT_PULLUP:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	fc 01       	movw	r30, r24
    2388:	e4 50       	subi	r30, 0x04	; 4
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	a0 81       	ld	r26, Z
    238e:	b1 81       	ldd	r27, Z+1	; 0x01
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	fc 01       	movw	r30, r24
    239c:	e4 50       	subi	r30, 0x04	; 4
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	01 90       	ld	r0, Z+
    23a2:	f0 81       	ld	r31, Z
    23a4:	e0 2d       	mov	r30, r0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_INIT+0xe4>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	2a 95       	dec	r18
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_INIT+0xe0>
    23be:	80 95       	com	r24
    23c0:	84 23       	and	r24, r20
    23c2:	8c 93       	st	X, r24
			SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_VALUE);
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	04 96       	adiw	r24, 0x04	; 4
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	fc 01       	movw	r30, r24
    23d2:	e4 50       	subi	r30, 0x04	; 4
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	a0 81       	ld	r26, Z
    23d8:	b1 81       	ldd	r27, Z+1	; 0x01
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	04 96       	adiw	r24, 0x04	; 4
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	fc 01       	movw	r30, r24
    23e8:	e4 50       	subi	r30, 0x04	; 4
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	01 90       	ld	r0, Z+
    23ee:	f0 81       	ld	r31, Z
    23f0:	e0 2d       	mov	r30, r0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_INIT+0x132>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_INIT+0x12e>
    240c:	84 2b       	or	r24, r20
    240e:	8c 93       	st	X, r24
    2410:	25 c0       	rjmp	.+74     	; 0x245c <DIO_INIT+0x186>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	fc 01       	movw	r30, r24
    241e:	e4 50       	subi	r30, 0x04	; 4
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	a0 81       	ld	r26, Z
    2424:	b1 81       	ldd	r27, Z+1	; 0x01
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	fc 01       	movw	r30, r24
    2432:	e4 50       	subi	r30, 0x04	; 4
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	01 90       	ld	r0, Z+
    2438:	f0 81       	ld	r31, Z
    243a:	e0 2d       	mov	r30, r0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_INIT+0x17c>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <DIO_INIT+0x178>
    2456:	80 95       	com	r24
    2458:	84 23       	and	r24, r20
    245a:	8c 93       	st	X, r24
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	80 32       	cpi	r24, 0x20	; 32
    2466:	08 f4       	brcc	.+2      	; 0x246a <DIO_INIT+0x194>
    2468:	3f cf       	rjmp	.-386    	; 0x22e8 <DIO_INIT+0x12>
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
			break;
		}
	}
}
    246a:	26 96       	adiw	r28, 0x06	; 6
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <DIO_Write_Channel>:


void DIO_Write_Channel(uint8 CHANNEL, uint8 LEVEL) {
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <DIO_Write_Channel+0x6>
    2482:	00 d0       	rcall	.+0      	; 0x2484 <DIO_Write_Channel+0x8>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <DIO_Write_Channel+0xa>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 PIN_STATE = CHANNEL % 8;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	87 70       	andi	r24, 0x07	; 7
    2492:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_STATE = CHANNEL / 8;
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	86 95       	lsr	r24
    2498:	86 95       	lsr	r24
    249a:	86 95       	lsr	r24
    249c:	89 83       	std	Y+1, r24	; 0x01
	switch (LEVEL) {
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	3e 83       	std	Y+6, r19	; 0x06
    24a6:	2d 83       	std	Y+5, r18	; 0x05
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f1       	breq	.+90     	; 0x250a <DIO_Write_Channel+0x8e>
    24b0:	2d 81       	ldd	r18, Y+5	; 0x05
    24b2:	3e 81       	ldd	r19, Y+6	; 0x06
    24b4:	21 30       	cpi	r18, 0x01	; 1
    24b6:	31 05       	cpc	r19, r1
    24b8:	09 f0       	breq	.+2      	; 0x24bc <DIO_Write_Channel+0x40>
    24ba:	4e c0       	rjmp	.+156    	; 0x2558 <DIO_Write_Channel+0xdc>
	case HIGH:
		SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	04 96       	adiw	r24, 0x04	; 4
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	fc 01       	movw	r30, r24
    24ca:	e4 50       	subi	r30, 0x04	; 4
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	a0 81       	ld	r26, Z
    24d0:	b1 81       	ldd	r27, Z+1	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	04 96       	adiw	r24, 0x04	; 4
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	fc 01       	movw	r30, r24
    24e0:	e4 50       	subi	r30, 0x04	; 4
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	01 90       	ld	r0, Z+
    24e6:	f0 81       	ld	r31, Z
    24e8:	e0 2d       	mov	r30, r0
    24ea:	80 81       	ld	r24, Z
    24ec:	48 2f       	mov	r20, r24
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	02 2e       	mov	r0, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_Write_Channel+0x84>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0a 94       	dec	r0
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <DIO_Write_Channel+0x80>
    2504:	84 2b       	or	r24, r20
    2506:	8c 93       	st	X, r24
    2508:	27 c0       	rjmp	.+78     	; 0x2558 <DIO_Write_Channel+0xdc>
		break;
	case LOW:
		CLR_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	04 96       	adiw	r24, 0x04	; 4
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	fc 01       	movw	r30, r24
    2518:	e4 50       	subi	r30, 0x04	; 4
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	a0 81       	ld	r26, Z
    251e:	b1 81       	ldd	r27, Z+1	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	04 96       	adiw	r24, 0x04	; 4
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	fc 01       	movw	r30, r24
    252e:	e4 50       	subi	r30, 0x04	; 4
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	01 90       	ld	r0, Z+
    2534:	f0 81       	ld	r31, Z
    2536:	e0 2d       	mov	r30, r0
    2538:	80 81       	ld	r24, Z
    253a:	48 2f       	mov	r20, r24
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <DIO_Write_Channel+0xd2>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <DIO_Write_Channel+0xce>
    2552:	80 95       	com	r24
    2554:	84 23       	and	r24, r20
    2556:	8c 93       	st	X, r24
		break;
	}
}
    2558:	26 96       	adiw	r28, 0x06	; 6
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <DIO_Write_Port>:

void DIO_Write_Port(uint8 PORT, uint8 VALUE) {
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <DIO_Write_Port+0x6>
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	6a 83       	std	Y+2, r22	; 0x02

	*REG_ARR[PORT + 4] = VALUE;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	04 96       	adiw	r24, 0x04	; 4
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	fc 01       	movw	r30, r24
    2586:	e4 50       	subi	r30, 0x04	; 4
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	01 90       	ld	r0, Z+
    258c:	f0 81       	ld	r31, Z
    258e:	e0 2d       	mov	r30, r0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	80 83       	st	Z, r24
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <DIO_Read_Channel>:

uint8 DIO_Read_Channel(uint8 CHANNEL) {
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <DIO_Read_Channel+0x6>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <DIO_Read_Channel+0x8>
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	8c 83       	std	Y+4, r24	; 0x04
	uint8 PIN_STATE, val;
	uint8 PORT_STATE;

	PIN_STATE = CHANNEL % 8;
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	87 70       	andi	r24, 0x07	; 7
    25b0:	8b 83       	std	Y+3, r24	; 0x03
	PORT_STATE = CHANNEL / 8;
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	86 95       	lsr	r24
    25b6:	86 95       	lsr	r24
    25b8:	86 95       	lsr	r24
    25ba:	89 83       	std	Y+1, r24	; 0x01
	val = GET_BIT(*REG_ARR[PORT_STATE + 8], PIN_STATE);
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	08 96       	adiw	r24, 0x08	; 8
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	fc 01       	movw	r30, r24
    25ca:	e4 50       	subi	r30, 0x04	; 4
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	01 90       	ld	r0, Z+
    25d0:	f0 81       	ld	r31, Z
    25d2:	e0 2d       	mov	r30, r0
    25d4:	80 81       	ld	r24, Z
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	88 2f       	mov	r24, r24
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a9 01       	movw	r20, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <DIO_Read_Channel+0x4a>
    25e4:	55 95       	asr	r21
    25e6:	47 95       	ror	r20
    25e8:	8a 95       	dec	r24
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <DIO_Read_Channel+0x46>
    25ec:	ca 01       	movw	r24, r20
    25ee:	81 70       	andi	r24, 0x01	; 1
    25f0:	8a 83       	std	Y+2, r24	; 0x02


	return val;
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <DIO_Read_Port>:

uint8 DIO_Read_Port(uint8 PORT) {
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <DIO_Read_Port+0x6>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val;
	val = *REG_ARR[PORT + 8];
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	08 96       	adiw	r24, 0x08	; 8
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	fc 01       	movw	r30, r24
    261c:	e4 50       	subi	r30, 0x04	; 4
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	01 90       	ld	r0, Z+
    2622:	f0 81       	ld	r31, Z
    2624:	e0 2d       	mov	r30, r0
    2626:	80 81       	ld	r24, Z
    2628:	89 83       	std	Y+1, r24	; 0x01
	return val;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
}
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <LCD_vidInit>:
#include"util/delay.h"



void LCD_vidInit(void)
{
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	c2 56       	subi	r28, 0x62	; 98
    2644:	d0 40       	sbci	r29, 0x00	; 0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	fe 01       	movw	r30, r28
    2652:	e1 5a       	subi	r30, 0xA1	; 161
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 ef       	ldi	r26, 0xF0	; 240
    265c:	b1 e4       	ldi	r27, 0x41	; 65
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	a2 83       	std	Z+2, r26	; 0x02
    2664:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	8e 01       	movw	r16, r28
    2668:	05 5a       	subi	r16, 0xA5	; 165
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	e1 5a       	subi	r30, 0xA1	; 161
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a e7       	ldi	r20, 0x7A	; 122
    2680:	55 e4       	ldi	r21, 0x45	; 69
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	f8 01       	movw	r30, r16
    268c:	80 83       	st	Z, r24
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	a2 83       	std	Z+2, r26	; 0x02
    2692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2694:	fe 01       	movw	r30, r28
    2696:	e5 5a       	subi	r30, 0xA5	; 165
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	44 f4       	brge	.+16     	; 0x26c2 <LCD_vidInit+0x8c>
		__ticks = 1;
    26b2:	fe 01       	movw	r30, r28
    26b4:	e7 5a       	subi	r30, 0xA7	; 167
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    26c0:	64 c0       	rjmp	.+200    	; 0x278a <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    26c2:	fe 01       	movw	r30, r28
    26c4:	e5 5a       	subi	r30, 0xA5	; 165
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26dc:	18 16       	cp	r1, r24
    26de:	0c f0       	brlt	.+2      	; 0x26e2 <LCD_vidInit+0xac>
    26e0:	43 c0       	rjmp	.+134    	; 0x2768 <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	fe 01       	movw	r30, r28
    26e4:	e1 5a       	subi	r30, 0xA1	; 161
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8e 01       	movw	r16, r28
    2702:	07 5a       	subi	r16, 0xA7	; 167
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	f8 01       	movw	r30, r16
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	1f c0       	rjmp	.+62     	; 0x2758 <LCD_vidInit+0x122>
    271a:	fe 01       	movw	r30, r28
    271c:	e9 5a       	subi	r30, 0xA9	; 169
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	fe 01       	movw	r30, r28
    272a:	e9 5a       	subi	r30, 0xA9	; 169
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_vidInit+0xfc>
    2736:	fe 01       	movw	r30, r28
    2738:	e9 5a       	subi	r30, 0xA9	; 169
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	de 01       	movw	r26, r28
    2742:	a7 5a       	subi	r26, 0xA7	; 167
    2744:	bf 4f       	sbci	r27, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e7 5a       	subi	r30, 0xA7	; 167
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	11 96       	adiw	r26, 0x01	; 1
    2754:	9c 93       	st	X, r25
    2756:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	fe 01       	movw	r30, r28
    275a:	e7 5a       	subi	r30, 0xA7	; 167
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	d1 f6       	brne	.-76     	; 0x271a <LCD_vidInit+0xe4>
    2766:	27 c0       	rjmp	.+78     	; 0x27b6 <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	8e 01       	movw	r16, r28
    276a:	07 5a       	subi	r16, 0xA7	; 167
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e5 5a       	subi	r30, 0xA5	; 165
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	de 01       	movw	r26, r28
    278c:	ab 5a       	subi	r26, 0xAB	; 171
    278e:	bf 4f       	sbci	r27, 0xFF	; 255
    2790:	fe 01       	movw	r30, r28
    2792:	e7 5a       	subi	r30, 0xA7	; 167
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	8d 93       	st	X+, r24
    279c:	9c 93       	st	X, r25
    279e:	fe 01       	movw	r30, r28
    27a0:	eb 5a       	subi	r30, 0xAB	; 171
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_vidInit+0x172>
    27ac:	fe 01       	movw	r30, r28
    27ae:	eb 5a       	subi	r30, 0xAB	; 171
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
	_delay_ms(30);
	LCD_vidSendCommand(lcd_SET);
    27b6:	88 e3       	ldi	r24, 0x38	; 56
    27b8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 5a       	subi	r30, 0xAF	; 175
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e7       	ldi	r26, 0x70	; 112
    27c8:	b1 e4       	ldi	r27, 0x41	; 65
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	8e 01       	movw	r16, r28
    27d4:	03 5b       	subi	r16, 0xB3	; 179
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	ef 5a       	subi	r30, 0xAF	; 175
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a e7       	ldi	r20, 0x7A	; 122
    27ec:	55 e4       	ldi	r21, 0x45	; 69
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2800:	fe 01       	movw	r30, r28
    2802:	e3 5b       	subi	r30, 0xB3	; 179
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	44 f4       	brge	.+16     	; 0x282e <LCD_vidInit+0x1f8>
		__ticks = 1;
    281e:	fe 01       	movw	r30, r28
    2820:	e5 5b       	subi	r30, 0xB5	; 181
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	64 c0       	rjmp	.+200    	; 0x28f6 <LCD_vidInit+0x2c0>
	else if (__tmp > 65535)
    282e:	fe 01       	movw	r30, r28
    2830:	e3 5b       	subi	r30, 0xB3	; 179
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	0c f0       	brlt	.+2      	; 0x284e <LCD_vidInit+0x218>
    284c:	43 c0       	rjmp	.+134    	; 0x28d4 <LCD_vidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	fe 01       	movw	r30, r28
    2850:	ef 5a       	subi	r30, 0xAF	; 175
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8e 01       	movw	r16, r28
    286e:	05 5b       	subi	r16, 0xB5	; 181
    2870:	1f 4f       	sbci	r17, 0xFF	; 255
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	f8 01       	movw	r30, r16
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	1f c0       	rjmp	.+62     	; 0x28c4 <LCD_vidInit+0x28e>
    2886:	fe 01       	movw	r30, r28
    2888:	e7 5b       	subi	r30, 0xB7	; 183
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 e9       	ldi	r24, 0x90	; 144
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	fe 01       	movw	r30, r28
    2896:	e7 5b       	subi	r30, 0xB7	; 183
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_vidInit+0x268>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 5b       	subi	r30, 0xB7	; 183
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	de 01       	movw	r26, r28
    28ae:	a5 5b       	subi	r26, 0xB5	; 181
    28b0:	bf 4f       	sbci	r27, 0xFF	; 255
    28b2:	fe 01       	movw	r30, r28
    28b4:	e5 5b       	subi	r30, 0xB5	; 181
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e5 5b       	subi	r30, 0xB5	; 181
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	d1 f6       	brne	.-76     	; 0x2886 <LCD_vidInit+0x250>
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <LCD_vidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	8e 01       	movw	r16, r28
    28d6:	05 5b       	subi	r16, 0xB5	; 181
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	e3 5b       	subi	r30, 0xB3	; 179
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	de 01       	movw	r26, r28
    28f8:	a9 5b       	subi	r26, 0xB9	; 185
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	e5 5b       	subi	r30, 0xB5	; 181
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	8d 93       	st	X+, r24
    2908:	9c 93       	st	X, r25
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5b       	subi	r30, 0xB9	; 185
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <LCD_vidInit+0x2de>
    2918:	fe 01       	movw	r30, r28
    291a:	e9 5b       	subi	r30, 0xB9	; 185
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
	_delay_ms(15);
	LCD_vidSendCommand(lcd_HOME);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    2928:	fe 01       	movw	r30, r28
    292a:	ed 5b       	subi	r30, 0xBD	; 189
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e8       	ldi	r26, 0x80	; 128
    2934:	bf e3       	ldi	r27, 0x3F	; 63
    2936:	80 83       	st	Z, r24
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	a2 83       	std	Z+2, r26	; 0x02
    293c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	8e 01       	movw	r16, r28
    2940:	01 5c       	subi	r16, 0xC1	; 193
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	ed 5b       	subi	r30, 0xBD	; 189
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a e7       	ldi	r20, 0x7A	; 122
    2958:	55 e4       	ldi	r21, 0x45	; 69
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	f8 01       	movw	r30, r16
    2964:	80 83       	st	Z, r24
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	a2 83       	std	Z+2, r26	; 0x02
    296a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296c:	fe 01       	movw	r30, r28
    296e:	ff 96       	adiw	r30, 0x3f	; 63
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	2c f4       	brge	.+10     	; 0x2992 <LCD_vidInit+0x35c>
		__ticks = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9e af       	std	Y+62, r25	; 0x3e
    298e:	8d af       	std	Y+61, r24	; 0x3d
    2990:	46 c0       	rjmp	.+140    	; 0x2a1e <LCD_vidInit+0x3e8>
	else if (__tmp > 65535)
    2992:	fe 01       	movw	r30, r28
    2994:	ff 96       	adiw	r30, 0x3f	; 63
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	64 f5       	brge	.+88     	; 0x2a06 <LCD_vidInit+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	fe 01       	movw	r30, r28
    29b0:	ed 5b       	subi	r30, 0xBD	; 189
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e af       	std	Y+62, r25	; 0x3e
    29da:	8d af       	std	Y+61, r24	; 0x3d
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <LCD_vidInit+0x3c6>
    29de:	80 e9       	ldi	r24, 0x90	; 144
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	9c af       	std	Y+60, r25	; 0x3c
    29e4:	8b af       	std	Y+59, r24	; 0x3b
    29e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    29e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_vidInit+0x3b4>
    29ee:	9c af       	std	Y+60, r25	; 0x3c
    29f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	9e af       	std	Y+62, r25	; 0x3e
    29fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <LCD_vidInit+0x3a8>
    2a04:	16 c0       	rjmp	.+44     	; 0x2a32 <LCD_vidInit+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	fe 01       	movw	r30, r28
    2a08:	ff 96       	adiw	r30, 0x3f	; 63
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e af       	std	Y+62, r25	; 0x3e
    2a1c:	8d af       	std	Y+61, r24	; 0x3d
    2a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a22:	9a af       	std	Y+58, r25	; 0x3a
    2a24:	89 af       	std	Y+57, r24	; 0x39
    2a26:	89 ad       	ldd	r24, Y+57	; 0x39
    2a28:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_vidInit+0x3f4>
    2a2e:	9a af       	std	Y+58, r25	; 0x3a
    2a30:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_vidSendCommand(lcd_DPY_ON);
    2a32:	8c e0       	ldi	r24, 0x0C	; 12
    2a34:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e8       	ldi	r26, 0x80	; 128
    2a3e:	bf e3       	ldi	r27, 0x3F	; 63
    2a40:	8d ab       	std	Y+53, r24	; 0x35
    2a42:	9e ab       	std	Y+54, r25	; 0x36
    2a44:	af ab       	std	Y+55, r26	; 0x37
    2a46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6d a9       	ldd	r22, Y+53	; 0x35
    2a4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a e7       	ldi	r20, 0x7A	; 122
    2a56:	55 e4       	ldi	r21, 0x45	; 69
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	89 ab       	std	Y+49, r24	; 0x31
    2a62:	9a ab       	std	Y+50, r25	; 0x32
    2a64:	ab ab       	std	Y+51, r26	; 0x33
    2a66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <LCD_vidInit+0x454>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	98 ab       	std	Y+48, r25	; 0x30
    2a86:	8f a7       	std	Y+47, r24	; 0x2f
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <LCD_vidInit+0x4d2>
	else if (__tmp > 65535)
    2a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a90:	9c a9       	ldd	r25, Y+52	; 0x34
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <LCD_vidInit+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6d a9       	ldd	r22, Y+53	; 0x35
    2aa4:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	98 ab       	std	Y+48, r25	; 0x30
    2ac8:	8f a7       	std	Y+47, r24	; 0x2f
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <LCD_vidInit+0x4b4>
    2acc:	80 e9       	ldi	r24, 0x90	; 144
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	9e a7       	std	Y+46, r25	; 0x2e
    2ad2:	8d a7       	std	Y+45, r24	; 0x2d
    2ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_vidInit+0x4a2>
    2adc:	9e a7       	std	Y+46, r25	; 0x2e
    2ade:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	98 ab       	std	Y+48, r25	; 0x30
    2ae8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <LCD_vidInit+0x496>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <LCD_vidInit+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	69 a9       	ldd	r22, Y+49	; 0x31
    2af6:	7a a9       	ldd	r23, Y+50	; 0x32
    2af8:	8b a9       	ldd	r24, Y+51	; 0x33
    2afa:	9c a9       	ldd	r25, Y+52	; 0x34
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	98 ab       	std	Y+48, r25	; 0x30
    2b06:	8f a7       	std	Y+47, r24	; 0x2f
    2b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0c:	9c a7       	std	Y+44, r25	; 0x2c
    2b0e:	8b a7       	std	Y+43, r24	; 0x2b
    2b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_vidInit+0x4de>
    2b18:	9c a7       	std	Y+44, r25	; 0x2c
    2b1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(lcd_CLR);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e7       	ldi	r26, 0x70	; 112
    2b28:	b1 e4       	ldi	r27, 0x41	; 65
    2b2a:	8f a3       	std	Y+39, r24	; 0x27
    2b2c:	98 a7       	std	Y+40, r25	; 0x28
    2b2e:	a9 a7       	std	Y+41, r26	; 0x29
    2b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b32:	6f a1       	ldd	r22, Y+39	; 0x27
    2b34:	78 a5       	ldd	r23, Y+40	; 0x28
    2b36:	89 a5       	ldd	r24, Y+41	; 0x29
    2b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a e7       	ldi	r20, 0x7A	; 122
    2b40:	55 e4       	ldi	r21, 0x45	; 69
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8b a3       	std	Y+35, r24	; 0x23
    2b4c:	9c a3       	std	Y+36, r25	; 0x24
    2b4e:	ad a3       	std	Y+37, r26	; 0x25
    2b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b52:	6b a1       	ldd	r22, Y+35	; 0x23
    2b54:	7c a1       	ldd	r23, Y+36	; 0x24
    2b56:	8d a1       	ldd	r24, Y+37	; 0x25
    2b58:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <LCD_vidInit+0x53e>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	3f c0       	rjmp	.+126    	; 0x2bf2 <LCD_vidInit+0x5bc>
	else if (__tmp > 65535)
    2b74:	6b a1       	ldd	r22, Y+35	; 0x23
    2b76:	7c a1       	ldd	r23, Y+36	; 0x24
    2b78:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	4c f5       	brge	.+82     	; 0x2bde <LCD_vidInit+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b90:	89 a5       	ldd	r24, Y+41	; 0x29
    2b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9a a3       	std	Y+34, r25	; 0x22
    2bb2:	89 a3       	std	Y+33, r24	; 0x21
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <LCD_vidInit+0x59e>
    2bb6:	80 e9       	ldi	r24, 0x90	; 144
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	98 a3       	std	Y+32, r25	; 0x20
    2bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_vidInit+0x58c>
    2bc6:	98 a3       	std	Y+32, r25	; 0x20
    2bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	89 a1       	ldd	r24, Y+33	; 0x21
    2bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
    2bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	69 f7       	brne	.-38     	; 0x2bb6 <LCD_vidInit+0x580>
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <LCD_vidInit+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	6b a1       	ldd	r22, Y+35	; 0x23
    2be0:	7c a1       	ldd	r23, Y+36	; 0x24
    2be2:	8d a1       	ldd	r24, Y+37	; 0x25
    2be4:	9e a1       	ldd	r25, Y+38	; 0x26
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9a a3       	std	Y+34, r25	; 0x22
    2bf0:	89 a3       	std	Y+33, r24	; 0x21
    2bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    2bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_vidInit+0x5c8>
    2c02:	9e 8f       	std	Y+30, r25	; 0x1e
    2c04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15);
	LCD_vidSendCommand(lcd_ENT_MODE);
    2c06:	86 e0       	ldi	r24, 0x06	; 6
    2c08:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 e0       	ldi	r26, 0x00	; 0
    2c12:	b0 e4       	ldi	r27, 0x40	; 64
    2c14:	89 8f       	std	Y+25, r24	; 0x19
    2c16:	9a 8f       	std	Y+26, r25	; 0x1a
    2c18:	ab 8f       	std	Y+27, r26	; 0x1b
    2c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a e7       	ldi	r20, 0x7A	; 122
    2c2a:	55 e4       	ldi	r21, 0x45	; 69
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8d 8b       	std	Y+21, r24	; 0x15
    2c36:	9e 8b       	std	Y+22, r25	; 0x16
    2c38:	af 8b       	std	Y+23, r26	; 0x17
    2c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	2c f4       	brge	.+10     	; 0x2c5e <LCD_vidInit+0x628>
		__ticks = 1;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9c 8b       	std	Y+20, r25	; 0x14
    2c5a:	8b 8b       	std	Y+19, r24	; 0x13
    2c5c:	3f c0       	rjmp	.+126    	; 0x2cdc <LCD_vidInit+0x6a6>
	else if (__tmp > 65535)
    2c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c60:	7e 89       	ldd	r23, Y+22	; 0x16
    2c62:	8f 89       	ldd	r24, Y+23	; 0x17
    2c64:	98 8d       	ldd	r25, Y+24	; 0x18
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	4c f5       	brge	.+82     	; 0x2cc8 <LCD_vidInit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	69 8d       	ldd	r22, Y+25	; 0x19
    2c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e2       	ldi	r20, 0x20	; 32
    2c84:	51 e4       	ldi	r21, 0x41	; 65
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9c 8b       	std	Y+20, r25	; 0x14
    2c9c:	8b 8b       	std	Y+19, r24	; 0x13
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <LCD_vidInit+0x688>
    2ca0:	80 e9       	ldi	r24, 0x90	; 144
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	9a 8b       	std	Y+18, r25	; 0x12
    2ca6:	89 8b       	std	Y+17, r24	; 0x11
    2ca8:	89 89       	ldd	r24, Y+17	; 0x11
    2caa:	9a 89       	ldd	r25, Y+18	; 0x12
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <LCD_vidInit+0x676>
    2cb0:	9a 8b       	std	Y+18, r25	; 0x12
    2cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	9c 8b       	std	Y+20, r25	; 0x14
    2cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	69 f7       	brne	.-38     	; 0x2ca0 <LCD_vidInit+0x66a>
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <LCD_vidInit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cce:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9c 8b       	std	Y+20, r25	; 0x14
    2cda:	8b 8b       	std	Y+19, r24	; 0x13
    2cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cde:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce0:	98 8b       	std	Y+16, r25	; 0x10
    2ce2:	8f 87       	std	Y+15, r24	; 0x0f
    2ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce6:	98 89       	ldd	r25, Y+16	; 0x10
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_vidInit+0x6b2>
    2cec:	98 8b       	std	Y+16, r25	; 0x10
    2cee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(lcd_CURSER);
    2cf0:	80 e8       	ldi	r24, 0x80	; 128
    2cf2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 e0       	ldi	r26, 0x00	; 0
    2cfc:	b0 e4       	ldi	r27, 0x40	; 64
    2cfe:	8b 87       	std	Y+11, r24	; 0x0b
    2d00:	9c 87       	std	Y+12, r25	; 0x0c
    2d02:	ad 87       	std	Y+13, r26	; 0x0d
    2d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a e7       	ldi	r20, 0x7A	; 122
    2d14:	55 e4       	ldi	r21, 0x45	; 69
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8f 83       	std	Y+7, r24	; 0x07
    2d20:	98 87       	std	Y+8, r25	; 0x08
    2d22:	a9 87       	std	Y+9, r26	; 0x09
    2d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <LCD_vidInit+0x712>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <LCD_vidInit+0x790>
	else if (__tmp > 65535)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <LCD_vidInit+0x77c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <LCD_vidInit+0x772>
    2d8a:	80 e9       	ldi	r24, 0x90	; 144
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_vidInit+0x760>
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <LCD_vidInit+0x754>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <LCD_vidInit+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_vidInit+0x79c>
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2dda:	ce 59       	subi	r28, 0x9E	; 158
    2ddc:	df 4f       	sbci	r29, 0xFF	; 255
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	08 95       	ret

00002df2 <LCD_vidSendCommand>:


void LCD_vidSendCommand(uint8 Cmd) {
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	6d 97       	sbiw	r28, 0x1d	; 29
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write_Channel(RS, LOW);
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Channel(RW, LOW);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Channel(E, HIGH);
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Port(LCD_PORT, Cmd);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e24:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_Write_Port>

	DIO_Write_Channel(E, LOW);
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	60 e0       	ldi	r22, 0x00	; 0
    2e2c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 ea       	ldi	r26, 0xA0	; 160
    2e36:	b0 e4       	ldi	r27, 0x40	; 64
    2e38:	89 8f       	std	Y+25, r24	; 0x19
    2e3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	69 8d       	ldd	r22, Y+25	; 0x19
    2e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	4a e7       	ldi	r20, 0x7A	; 122
    2e4e:	55 e4       	ldi	r21, 0x45	; 69
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8d 8b       	std	Y+21, r24	; 0x15
    2e5a:	9e 8b       	std	Y+22, r25	; 0x16
    2e5c:	af 8b       	std	Y+23, r26	; 0x17
    2e5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e60:	6d 89       	ldd	r22, Y+21	; 0x15
    2e62:	7e 89       	ldd	r23, Y+22	; 0x16
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e74:	88 23       	and	r24, r24
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <LCD_vidSendCommand+0x90>
		__ticks = 1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
    2e80:	3f c0       	rjmp	.+126    	; 0x2f00 <LCD_vidSendCommand+0x10e>
	else if (__tmp > 65535)
    2e82:	6d 89       	ldd	r22, Y+21	; 0x15
    2e84:	7e 89       	ldd	r23, Y+22	; 0x16
    2e86:	8f 89       	ldd	r24, Y+23	; 0x17
    2e88:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	3f ef       	ldi	r19, 0xFF	; 255
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	57 e4       	ldi	r21, 0x47	; 71
    2e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	4c f5       	brge	.+82     	; 0x2eec <LCD_vidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e2       	ldi	r20, 0x20	; 32
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9c 8b       	std	Y+20, r25	; 0x14
    2ec0:	8b 8b       	std	Y+19, r24	; 0x13
    2ec2:	0f c0       	rjmp	.+30     	; 0x2ee2 <LCD_vidSendCommand+0xf0>
    2ec4:	80 e9       	ldi	r24, 0x90	; 144
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	9a 8b       	std	Y+18, r25	; 0x12
    2eca:	89 8b       	std	Y+17, r24	; 0x11
    2ecc:	89 89       	ldd	r24, Y+17	; 0x11
    2ece:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <LCD_vidSendCommand+0xde>
    2ed4:	9a 8b       	std	Y+18, r25	; 0x12
    2ed6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eda:	9c 89       	ldd	r25, Y+20	; 0x14
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	9c 8b       	std	Y+20, r25	; 0x14
    2ee0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	69 f7       	brne	.-38     	; 0x2ec4 <LCD_vidSendCommand+0xd2>
    2eea:	14 c0       	rjmp	.+40     	; 0x2f14 <LCD_vidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eec:	6d 89       	ldd	r22, Y+21	; 0x15
    2eee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9c 8b       	std	Y+20, r25	; 0x14
    2efe:	8b 8b       	std	Y+19, r24	; 0x13
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	98 8b       	std	Y+16, r25	; 0x10
    2f06:	8f 87       	std	Y+15, r24	; 0x0f
    2f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f0a:	98 89       	ldd	r25, Y+16	; 0x10
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_vidSendCommand+0x11a>
    2f10:	98 8b       	std	Y+16, r25	; 0x10
    2f12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_Write_Channel(E, HIGH);
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	61 e0       	ldi	r22, 0x01	; 1
    2f18:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e2       	ldi	r26, 0x20	; 32
    2f22:	b1 e4       	ldi	r27, 0x41	; 65
    2f24:	8b 87       	std	Y+11, r24	; 0x0b
    2f26:	9c 87       	std	Y+12, r25	; 0x0c
    2f28:	ad 87       	std	Y+13, r26	; 0x0d
    2f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	4a e7       	ldi	r20, 0x7A	; 122
    2f3a:	55 e4       	ldi	r21, 0x45	; 69
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8f 83       	std	Y+7, r24	; 0x07
    2f46:	98 87       	std	Y+8, r25	; 0x08
    2f48:	a9 87       	std	Y+9, r26	; 0x09
    2f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e8       	ldi	r20, 0x80	; 128
    2f5a:	5f e3       	ldi	r21, 0x3F	; 63
    2f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f60:	88 23       	and	r24, r24
    2f62:	2c f4       	brge	.+10     	; 0x2f6e <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	3f c0       	rjmp	.+126    	; 0x2fec <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    2f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f70:	78 85       	ldd	r23, Y+8	; 0x08
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	3f ef       	ldi	r19, 0xFF	; 255
    2f7a:	4f e7       	ldi	r20, 0x7F	; 127
    2f7c:	57 e4       	ldi	r21, 0x47	; 71
    2f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f82:	18 16       	cp	r1, r24
    2f84:	4c f5       	brge	.+82     	; 0x2fd8 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e2       	ldi	r20, 0x20	; 32
    2f94:	51 e4       	ldi	r21, 0x41	; 65
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	0f c0       	rjmp	.+30     	; 0x2fce <LCD_vidSendCommand+0x1dc>
    2fb0:	80 e9       	ldi	r24, 0x90	; 144
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <LCD_vidSendCommand+0x1ca>
    2fc0:	9c 83       	std	Y+4, r25	; 0x04
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fce:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	69 f7       	brne	.-38     	; 0x2fb0 <LCD_vidSendCommand+0x1be>
    2fd6:	14 c0       	rjmp	.+40     	; 0x3000 <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fda:	78 85       	ldd	r23, Y+8	; 0x08
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_vidSendCommand+0x206>
    2ffc:	9a 83       	std	Y+2, r25	; 0x02
    2ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3000:	6d 96       	adiw	r28, 0x1d	; 29
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <LCD_vidSendData>:

void LCD_vidSendData(uint8 Data) {
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	6d 97       	sbiw	r28, 0x1d	; 29
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write_Channel(RS, HIGH);
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Channel(RW, LOW);
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Channel(E, HIGH);
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	DIO_Write_Port(LCD_PORT, Data);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3044:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_Write_Port>

	DIO_Write_Channel(E, LOW);
    3048:	82 e0       	ldi	r24, 0x02	; 2
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a0 ea       	ldi	r26, 0xA0	; 160
    3056:	b0 e4       	ldi	r27, 0x40	; 64
    3058:	89 8f       	std	Y+25, r24	; 0x19
    305a:	9a 8f       	std	Y+26, r25	; 0x1a
    305c:	ab 8f       	std	Y+27, r26	; 0x1b
    305e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3060:	69 8d       	ldd	r22, Y+25	; 0x19
    3062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	4a e7       	ldi	r20, 0x7A	; 122
    306e:	55 e4       	ldi	r21, 0x45	; 69
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8d 8b       	std	Y+21, r24	; 0x15
    307a:	9e 8b       	std	Y+22, r25	; 0x16
    307c:	af 8b       	std	Y+23, r26	; 0x17
    307e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3080:	6d 89       	ldd	r22, Y+21	; 0x15
    3082:	7e 89       	ldd	r23, Y+22	; 0x16
    3084:	8f 89       	ldd	r24, Y+23	; 0x17
    3086:	98 8d       	ldd	r25, Y+24	; 0x18
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	5f e3       	ldi	r21, 0x3F	; 63
    3090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3094:	88 23       	and	r24, r24
    3096:	2c f4       	brge	.+10     	; 0x30a2 <LCD_vidSendData+0x90>
		__ticks = 1;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9c 8b       	std	Y+20, r25	; 0x14
    309e:	8b 8b       	std	Y+19, r24	; 0x13
    30a0:	3f c0       	rjmp	.+126    	; 0x3120 <LCD_vidSendData+0x10e>
	else if (__tmp > 65535)
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	57 e4       	ldi	r21, 0x47	; 71
    30b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	4c f5       	brge	.+82     	; 0x310c <LCD_vidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ba:	69 8d       	ldd	r22, Y+25	; 0x19
    30bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e2       	ldi	r20, 0x20	; 32
    30c8:	51 e4       	ldi	r21, 0x41	; 65
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	9c 8b       	std	Y+20, r25	; 0x14
    30e0:	8b 8b       	std	Y+19, r24	; 0x13
    30e2:	0f c0       	rjmp	.+30     	; 0x3102 <LCD_vidSendData+0xf0>
    30e4:	80 e9       	ldi	r24, 0x90	; 144
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	9a 8b       	std	Y+18, r25	; 0x12
    30ea:	89 8b       	std	Y+17, r24	; 0x11
    30ec:	89 89       	ldd	r24, Y+17	; 0x11
    30ee:	9a 89       	ldd	r25, Y+18	; 0x12
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <LCD_vidSendData+0xde>
    30f4:	9a 8b       	std	Y+18, r25	; 0x12
    30f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	9c 8b       	std	Y+20, r25	; 0x14
    3100:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3102:	8b 89       	ldd	r24, Y+19	; 0x13
    3104:	9c 89       	ldd	r25, Y+20	; 0x14
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	69 f7       	brne	.-38     	; 0x30e4 <LCD_vidSendData+0xd2>
    310a:	14 c0       	rjmp	.+40     	; 0x3134 <LCD_vidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310c:	6d 89       	ldd	r22, Y+21	; 0x15
    310e:	7e 89       	ldd	r23, Y+22	; 0x16
    3110:	8f 89       	ldd	r24, Y+23	; 0x17
    3112:	98 8d       	ldd	r25, Y+24	; 0x18
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	9c 8b       	std	Y+20, r25	; 0x14
    311e:	8b 8b       	std	Y+19, r24	; 0x13
    3120:	8b 89       	ldd	r24, Y+19	; 0x13
    3122:	9c 89       	ldd	r25, Y+20	; 0x14
    3124:	98 8b       	std	Y+16, r25	; 0x10
    3126:	8f 87       	std	Y+15, r24	; 0x0f
    3128:	8f 85       	ldd	r24, Y+15	; 0x0f
    312a:	98 89       	ldd	r25, Y+16	; 0x10
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCD_vidSendData+0x11a>
    3130:	98 8b       	std	Y+16, r25	; 0x10
    3132:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_Write_Channel(E, HIGH);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	a0 e2       	ldi	r26, 0x20	; 32
    3142:	b1 e4       	ldi	r27, 0x41	; 65
    3144:	8b 87       	std	Y+11, r24	; 0x0b
    3146:	9c 87       	std	Y+12, r25	; 0x0c
    3148:	ad 87       	std	Y+13, r26	; 0x0d
    314a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314c:	6b 85       	ldd	r22, Y+11	; 0x0b
    314e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3150:	8d 85       	ldd	r24, Y+13	; 0x0d
    3152:	9e 85       	ldd	r25, Y+14	; 0x0e
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a e7       	ldi	r20, 0x7A	; 122
    315a:	55 e4       	ldi	r21, 0x45	; 69
    315c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	8f 83       	std	Y+7, r24	; 0x07
    3166:	98 87       	std	Y+8, r25	; 0x08
    3168:	a9 87       	std	Y+9, r26	; 0x09
    316a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	89 85       	ldd	r24, Y+9	; 0x09
    3172:	9a 85       	ldd	r25, Y+10	; 0x0a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e8       	ldi	r20, 0x80	; 128
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3180:	88 23       	and	r24, r24
    3182:	2c f4       	brge	.+10     	; 0x318e <LCD_vidSendData+0x17c>
		__ticks = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	3f c0       	rjmp	.+126    	; 0x320c <LCD_vidSendData+0x1fa>
	else if (__tmp > 65535)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	4c f5       	brge	.+82     	; 0x31f8 <LCD_vidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e2       	ldi	r20, 0x20	; 32
    31b4:	51 e4       	ldi	r21, 0x41	; 65
    31b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	0f c0       	rjmp	.+30     	; 0x31ee <LCD_vidSendData+0x1dc>
    31d0:	80 e9       	ldi	r24, 0x90	; 144
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_vidSendData+0x1ca>
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	9e 81       	ldd	r25, Y+6	; 0x06
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	69 f7       	brne	.-38     	; 0x31d0 <LCD_vidSendData+0x1be>
    31f6:	14 c0       	rjmp	.+40     	; 0x3220 <LCD_vidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <LCD_vidSendData+0x206>
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3220:	6d 96       	adiw	r28, 0x1d	; 29
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <LCD_vidWriteString>:

void LCD_vidWriteString(uint8* Stg, uint8 Ind) {
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	62 97       	sbiw	r28, 0x12	; 18
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	99 8b       	std	Y+17, r25	; 0x11
    3248:	88 8b       	std	Y+16, r24	; 0x10
    324a:	6a 8b       	std	Y+18, r22	; 0x12
	for (uint8 i = 0; i < Ind; i++) {
    324c:	1f 86       	std	Y+15, r1	; 0x0f
    324e:	80 c0       	rjmp	.+256    	; 0x3350 <LCD_vidWriteString+0x11e>
		LCD_vidSendData(Stg[i]);
    3250:	8f 85       	ldd	r24, Y+15	; 0x0f
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	88 89       	ldd	r24, Y+16	; 0x10
    3258:	99 89       	ldd	r25, Y+17	; 0x11
    325a:	fc 01       	movw	r30, r24
    325c:	e2 0f       	add	r30, r18
    325e:	f3 1f       	adc	r31, r19
    3260:	80 81       	ld	r24, Z
    3262:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_vidSendData>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	a0 e0       	ldi	r26, 0x00	; 0
    326c:	b0 e4       	ldi	r27, 0x40	; 64
    326e:	8b 87       	std	Y+11, r24	; 0x0b
    3270:	9c 87       	std	Y+12, r25	; 0x0c
    3272:	ad 87       	std	Y+13, r26	; 0x0d
    3274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	6b 85       	ldd	r22, Y+11	; 0x0b
    3278:	7c 85       	ldd	r23, Y+12	; 0x0c
    327a:	8d 85       	ldd	r24, Y+13	; 0x0d
    327c:	9e 85       	ldd	r25, Y+14	; 0x0e
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a e7       	ldi	r20, 0x7A	; 122
    3284:	55 e4       	ldi	r21, 0x45	; 69
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8f 83       	std	Y+7, r24	; 0x07
    3290:	98 87       	std	Y+8, r25	; 0x08
    3292:	a9 87       	std	Y+9, r26	; 0x09
    3294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3296:	6f 81       	ldd	r22, Y+7	; 0x07
    3298:	78 85       	ldd	r23, Y+8	; 0x08
    329a:	89 85       	ldd	r24, Y+9	; 0x09
    329c:	9a 85       	ldd	r25, Y+10	; 0x0a
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <LCD_vidWriteString+0x86>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9e 83       	std	Y+6, r25	; 0x06
    32b4:	8d 83       	std	Y+5, r24	; 0x05
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <LCD_vidWriteString+0x104>
	else if (__tmp > 65535)
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <LCD_vidWriteString+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <LCD_vidWriteString+0xe6>
    32fa:	80 e9       	ldi	r24, 0x90	; 144
    32fc:	91 e0       	ldi	r25, 0x01	; 1
    32fe:	9c 83       	std	Y+4, r25	; 0x04
    3300:	8b 83       	std	Y+3, r24	; 0x03
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	9c 81       	ldd	r25, Y+4	; 0x04
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <LCD_vidWriteString+0xd4>
    330a:	9c 83       	std	Y+4, r25	; 0x04
    330c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9e 83       	std	Y+6, r25	; 0x06
    3316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
    331a:	9e 81       	ldd	r25, Y+6	; 0x06
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <LCD_vidWriteString+0xc8>
    3320:	14 c0       	rjmp	.+40     	; 0x334a <LCD_vidWriteString+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	6f 81       	ldd	r22, Y+7	; 0x07
    3324:	78 85       	ldd	r23, Y+8	; 0x08
    3326:	89 85       	ldd	r24, Y+9	; 0x09
    3328:	9a 85       	ldd	r25, Y+10	; 0x0a
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <LCD_vidWriteString+0x110>
    3346:	9a 83       	std	Y+2, r25	; 0x02
    3348:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write_Channel(E, HIGH);
	_delay_ms(10);
}

void LCD_vidWriteString(uint8* Stg, uint8 Ind) {
	for (uint8 i = 0; i < Ind; i++) {
    334a:	8f 85       	ldd	r24, Y+15	; 0x0f
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	8f 87       	std	Y+15, r24	; 0x0f
    3350:	9f 85       	ldd	r25, Y+15	; 0x0f
    3352:	8a 89       	ldd	r24, Y+18	; 0x12
    3354:	98 17       	cp	r25, r24
    3356:	08 f4       	brcc	.+2      	; 0x335a <LCD_vidWriteString+0x128>
    3358:	7b cf       	rjmp	.-266    	; 0x3250 <LCD_vidWriteString+0x1e>
		LCD_vidSendData(Stg[i]);
		_delay_ms(2);
	}
}
    335a:	62 96       	adiw	r28, 0x12	; 18
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <LCD_vidGotoXY>:

void LCD_vidGotoXY(uint8 X, uint8 Y) {
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <LCD_vidGotoXY+0x6>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <LCD_vidGotoXY+0x8>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	6a 83       	std	Y+2, r22	; 0x02
	if (Y > 0 && Y <= 16) {
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	88 23       	and	r24, r24
    3380:	e1 f0       	breq	.+56     	; 0x33ba <LCD_vidGotoXY+0x4e>
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	81 31       	cpi	r24, 0x11	; 17
    3386:	c8 f4       	brcc	.+50     	; 0x33ba <LCD_vidGotoXY+0x4e>
		switch (X) {
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	3c 83       	std	Y+4, r19	; 0x04
    3390:	2b 83       	std	Y+3, r18	; 0x03
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	91 05       	cpc	r25, r1
    339a:	31 f0       	breq	.+12     	; 0x33a8 <LCD_vidGotoXY+0x3c>
    339c:	2b 81       	ldd	r18, Y+3	; 0x03
    339e:	3c 81       	ldd	r19, Y+4	; 0x04
    33a0:	22 30       	cpi	r18, 0x02	; 2
    33a2:	31 05       	cpc	r19, r1
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <LCD_vidGotoXY+0x46>
    33a6:	09 c0       	rjmp	.+18     	; 0x33ba <LCD_vidGotoXY+0x4e>
		case 1:
			LCD_vidSendCommand(Y + 127);
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	81 58       	subi	r24, 0x81	; 129
    33ac:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
    33b0:	04 c0       	rjmp	.+8      	; 0x33ba <LCD_vidGotoXY+0x4e>
			break;
		case 2:
			LCD_vidSendCommand(Y + 191);
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	81 54       	subi	r24, 0x41	; 65
    33b6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
			break;
		}
	}
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <LCD_Write_CGRAM>:
			_delay_ms(5);
		}
	}
}*/

void LCD_Write_CGRAM(const uint8* Data, CGRAM_ROW_ID_t ROW_ID){
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <LCD_Write_CGRAM+0x6>
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <LCD_Write_CGRAM+0x8>
    33d0:	0f 92       	push	r0
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	8b 83       	std	Y+3, r24	; 0x03
    33da:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
    33dc:	8d 81       	ldd	r24, Y+5	; 0x05
    33de:	88 30       	cpi	r24, 0x08	; 8
    33e0:	20 f5       	brcc	.+72     	; 0x342a <LCD_Write_CGRAM+0x62>
		Address = (ROW_ID * 8) | (1 << 6);
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	80 64       	ori	r24, 0x40	; 64
    33f6:	8a 83       	std	Y+2, r24	; 0x02
		LCD_vidSendCommand(Address);
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
		for(Idx = 0; Idx < 8; Idx++){
    33fe:	19 82       	std	Y+1, r1	; 0x01
    3400:	11 c0       	rjmp	.+34     	; 0x3424 <LCD_Write_CGRAM+0x5c>
			LCD_vidWriteString(Data[Idx],8);
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	fc 01       	movw	r30, r24
    340e:	e2 0f       	add	r30, r18
    3410:	f3 1f       	adc	r31, r19
    3412:	80 81       	ld	r24, Z
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	68 e0       	ldi	r22, 0x08	; 8
    341a:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_vidWriteString>
void LCD_Write_CGRAM(const uint8* Data, CGRAM_ROW_ID_t ROW_ID){
	uint8 Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
		Address = (ROW_ID * 8) | (1 << 6);
		LCD_vidSendCommand(Address);
		for(Idx = 0; Idx < 8; Idx++){
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	8f 5f       	subi	r24, 0xFF	; 255
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	88 30       	cpi	r24, 0x08	; 8
    3428:	60 f3       	brcs	.-40     	; 0x3402 <LCD_Write_CGRAM+0x3a>
			LCD_vidWriteString(Data[Idx],8);
		}
	}
	LCD_vidSendCommand(lcd_HOME);
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_vidSendCommand>
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <KEYPAD_INIT>:
#include"DIO.h"
#include"DIO_Confg.h"
#include"BIT_MATH.h"
#include"KEYPAD.h"

void KEYPAD_INIT(void) {
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62

	DIO_Write_Port(KEYPAD_PORT, 0xFF);
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	6f ef       	ldi	r22, 0xFF	; 255
    344c:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_Write_Port>
}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <KEYPAD_READ>:

uint8 KEYPAD_READ(void) {
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	a1 97       	sbiw	r28, 0x21	; 33
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
	uint8 Value = NO_PRESSED_VALUE;
    346a:	88 e1       	ldi	r24, 0x18	; 24
    346c:	8c 83       	std	Y+4, r24	; 0x04
	uint8 KEYPAD_ROW_INDEX, KEYPAD_COLUMN_INDEX, KEYPAD_Pin_State;
	uint8 KEYPAD_ARR[KEYOAD_COL_IND4][KEYOAD_ROW_IND4] = KEYPAD_KEYS_4x4;
    346e:	ce 01       	movw	r24, r28
    3470:	05 96       	adiw	r24, 0x05	; 5
    3472:	9e 8f       	std	Y+30, r25	; 0x1e
    3474:	8d 8f       	std	Y+29, r24	; 0x1d
    3476:	e9 e3       	ldi	r30, 0x39	; 57
    3478:	f1 e0       	ldi	r31, 0x01	; 1
    347a:	f8 a3       	std	Y+32, r31	; 0x20
    347c:	ef 8f       	std	Y+31, r30	; 0x1f
    347e:	f0 e1       	ldi	r31, 0x10	; 16
    3480:	f9 a3       	std	Y+33, r31	; 0x21
    3482:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3484:	f8 a1       	ldd	r31, Y+32	; 0x20
    3486:	00 80       	ld	r0, Z
    3488:	8f 8d       	ldd	r24, Y+31	; 0x1f
    348a:	98 a1       	ldd	r25, Y+32	; 0x20
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	98 a3       	std	Y+32, r25	; 0x20
    3490:	8f 8f       	std	Y+31, r24	; 0x1f
    3492:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3494:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3496:	00 82       	st	Z, r0
    3498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    349a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	9e 8f       	std	Y+30, r25	; 0x1e
    34a0:	8d 8f       	std	Y+29, r24	; 0x1d
    34a2:	99 a1       	ldd	r25, Y+33	; 0x21
    34a4:	91 50       	subi	r25, 0x01	; 1
    34a6:	99 a3       	std	Y+33, r25	; 0x21
    34a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    34aa:	ee 23       	and	r30, r30
    34ac:	51 f7       	brne	.-44     	; 0x3482 <KEYPAD_READ+0x2c>
	uint8 KEYPAD_ROW_PinArr[KEYOAD_ROW_IND4] = { KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3 };
    34ae:	80 e1       	ldi	r24, 0x10	; 16
    34b0:	8d 8b       	std	Y+21, r24	; 0x15
    34b2:	81 e1       	ldi	r24, 0x11	; 17
    34b4:	8e 8b       	std	Y+22, r24	; 0x16
    34b6:	82 e1       	ldi	r24, 0x12	; 18
    34b8:	8f 8b       	std	Y+23, r24	; 0x17
    34ba:	83 e1       	ldi	r24, 0x13	; 19
    34bc:	88 8f       	std	Y+24, r24	; 0x18
	uint8 KEYPAD_COL_PinArr[KEYOAD_COL_IND4] = { KEYPAD_COLUMN0, KEYPAD_COLUMN1,
			KEYPAD_COLUMN2,KEYPAD_COLUMN3 };
    34be:	84 e1       	ldi	r24, 0x14	; 20
    34c0:	89 8f       	std	Y+25, r24	; 0x19
    34c2:	85 e1       	ldi	r24, 0x15	; 21
    34c4:	8a 8f       	std	Y+26, r24	; 0x1a
    34c6:	86 e1       	ldi	r24, 0x16	; 22
    34c8:	8b 8f       	std	Y+27, r24	; 0x1b
    34ca:	87 e1       	ldi	r24, 0x17	; 23
    34cc:	8c 8f       	std	Y+28, r24	; 0x1c
	for (KEYPAD_COLUMN_INDEX = 0; KEYPAD_COLUMN_INDEX < KEYOAD_COL_IND4;
    34ce:	1a 82       	std	Y+2, r1	; 0x02
    34d0:	53 c0       	rjmp	.+166    	; 0x3578 <KEYPAD_READ+0x122>
			KEYPAD_COLUMN_INDEX++) {
		DIO_Write_Channel(KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],LOW);
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	ce 01       	movw	r24, r28
    34da:	49 96       	adiw	r24, 0x19	; 25
    34dc:	fc 01       	movw	r30, r24
    34de:	e2 0f       	add	r30, r18
    34e0:	f3 1f       	adc	r31, r19
    34e2:	80 81       	ld	r24, Z
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
		for (KEYPAD_ROW_INDEX = 0; KEYPAD_ROW_INDEX < KEYOAD_ROW_IND4;
    34ea:	1b 82       	std	Y+3, r1	; 0x03
    34ec:	33 c0       	rjmp	.+102    	; 0x3554 <KEYPAD_READ+0xfe>
				KEYPAD_ROW_INDEX++) {
			KEYPAD_Pin_State = DIO_Read_Channel(KEYPAD_ROW_PinArr[KEYPAD_ROW_INDEX]);
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	ce 01       	movw	r24, r28
    34f6:	45 96       	adiw	r24, 0x15	; 21
    34f8:	fc 01       	movw	r30, r24
    34fa:	e2 0f       	add	r30, r18
    34fc:	f3 1f       	adc	r31, r19
    34fe:	80 81       	ld	r24, Z
    3500:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_Read_Channel>
    3504:	89 83       	std	Y+1, r24	; 0x01
			if (LOW == KEYPAD_Pin_State) {
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	88 23       	and	r24, r24
    350a:	09 f5       	brne	.+66     	; 0x354e <KEYPAD_READ+0xf8>
				Value = KEYPAD_ARR[KEYPAD_COLUMN_INDEX][KEYPAD_ROW_INDEX];
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	48 2f       	mov	r20, r24
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	22 0f       	add	r18, r18
    351a:	33 1f       	adc	r19, r19
    351c:	22 0f       	add	r18, r18
    351e:	33 1f       	adc	r19, r19
    3520:	ce 01       	movw	r24, r28
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	82 0f       	add	r24, r18
    3526:	93 1f       	adc	r25, r19
    3528:	84 0f       	add	r24, r20
    352a:	95 1f       	adc	r25, r21
    352c:	fc 01       	movw	r30, r24
    352e:	34 96       	adiw	r30, 0x04	; 4
    3530:	80 81       	ld	r24, Z
    3532:	8c 83       	std	Y+4, r24	; 0x04
				while (LOW == DIO_Read_Channel(KEYPAD_ROW_PinArr[KEYPAD_ROW_INDEX]))
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	28 2f       	mov	r18, r24
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	ce 01       	movw	r24, r28
    353c:	45 96       	adiw	r24, 0x15	; 21
    353e:	fc 01       	movw	r30, r24
    3540:	e2 0f       	add	r30, r18
    3542:	f3 1f       	adc	r31, r19
    3544:	80 81       	ld	r24, Z
    3546:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_Read_Channel>
    354a:	88 23       	and	r24, r24
    354c:	99 f3       	breq	.-26     	; 0x3534 <KEYPAD_READ+0xde>
			KEYPAD_COLUMN2,KEYPAD_COLUMN3 };
	for (KEYPAD_COLUMN_INDEX = 0; KEYPAD_COLUMN_INDEX < KEYOAD_COL_IND4;
			KEYPAD_COLUMN_INDEX++) {
		DIO_Write_Channel(KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],LOW);
		for (KEYPAD_ROW_INDEX = 0; KEYPAD_ROW_INDEX < KEYOAD_ROW_IND4;
				KEYPAD_ROW_INDEX++) {
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	8b 83       	std	Y+3, r24	; 0x03
	uint8 KEYPAD_COL_PinArr[KEYOAD_COL_IND4] = { KEYPAD_COLUMN0, KEYPAD_COLUMN1,
			KEYPAD_COLUMN2,KEYPAD_COLUMN3 };
	for (KEYPAD_COLUMN_INDEX = 0; KEYPAD_COLUMN_INDEX < KEYOAD_COL_IND4;
			KEYPAD_COLUMN_INDEX++) {
		DIO_Write_Channel(KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],LOW);
		for (KEYPAD_ROW_INDEX = 0; KEYPAD_ROW_INDEX < KEYOAD_ROW_IND4;
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	84 30       	cpi	r24, 0x04	; 4
    3558:	50 f2       	brcs	.-108    	; 0x34ee <KEYPAD_READ+0x98>
					;
				//DIO_WRITE_PIN_VALUE(KEYPAD_PORT, KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],HIGH);
				//return Value;
			}
		}
		DIO_Write_Channel(KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	ce 01       	movw	r24, r28
    3562:	49 96       	adiw	r24, 0x19	; 25
    3564:	fc 01       	movw	r30, r24
    3566:	e2 0f       	add	r30, r18
    3568:	f3 1f       	adc	r31, r19
    356a:	80 81       	ld	r24, Z
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	0e 94 3e 12 	call	0x247c	; 0x247c <DIO_Write_Channel>
	uint8 KEYPAD_ARR[KEYOAD_COL_IND4][KEYOAD_ROW_IND4] = KEYPAD_KEYS_4x4;
	uint8 KEYPAD_ROW_PinArr[KEYOAD_ROW_IND4] = { KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3 };
	uint8 KEYPAD_COL_PinArr[KEYOAD_COL_IND4] = { KEYPAD_COLUMN0, KEYPAD_COLUMN1,
			KEYPAD_COLUMN2,KEYPAD_COLUMN3 };
	for (KEYPAD_COLUMN_INDEX = 0; KEYPAD_COLUMN_INDEX < KEYOAD_COL_IND4;
			KEYPAD_COLUMN_INDEX++) {
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 KEYPAD_ROW_INDEX, KEYPAD_COLUMN_INDEX, KEYPAD_Pin_State;
	uint8 KEYPAD_ARR[KEYOAD_COL_IND4][KEYOAD_ROW_IND4] = KEYPAD_KEYS_4x4;
	uint8 KEYPAD_ROW_PinArr[KEYOAD_ROW_IND4] = { KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3 };
	uint8 KEYPAD_COL_PinArr[KEYOAD_COL_IND4] = { KEYPAD_COLUMN0, KEYPAD_COLUMN1,
			KEYPAD_COLUMN2,KEYPAD_COLUMN3 };
	for (KEYPAD_COLUMN_INDEX = 0; KEYPAD_COLUMN_INDEX < KEYOAD_COL_IND4;
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	84 30       	cpi	r24, 0x04	; 4
    357c:	08 f4       	brcc	.+2      	; 0x3580 <KEYPAD_READ+0x12a>
    357e:	a9 cf       	rjmp	.-174    	; 0x34d2 <KEYPAD_READ+0x7c>
			}
		}
		DIO_Write_Channel(KEYPAD_COL_PinArr[KEYPAD_COLUMN_INDEX],
				HIGH);
	}
	return Value;
    3580:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3582:	a1 96       	adiw	r28, 0x21	; 33
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <main>:
#include"Safe.h"
#include"util/delay.h"



uint8 main(void) {
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT();
    359c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_INIT>
	KEYPAD_INIT();
    35a0:	0e 94 20 1a 	call	0x3440	; 0x3440 <KEYPAD_INIT>
	LCD_vidInit();
    35a4:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_vidInit>
	//Safe_Main();
	while(1){
	Safe_MainFunction();
    35a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Safe_MainFunction>
    35ac:	fd cf       	rjmp	.-6      	; 0x35a8 <main+0x14>

000035ae <__udivmodqi4>:
    35ae:	99 1b       	sub	r25, r25
    35b0:	79 e0       	ldi	r23, 0x09	; 9
    35b2:	04 c0       	rjmp	.+8      	; 0x35bc <__udivmodqi4_ep>

000035b4 <__udivmodqi4_loop>:
    35b4:	99 1f       	adc	r25, r25
    35b6:	96 17       	cp	r25, r22
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <__udivmodqi4_ep>
    35ba:	96 1b       	sub	r25, r22

000035bc <__udivmodqi4_ep>:
    35bc:	88 1f       	adc	r24, r24
    35be:	7a 95       	dec	r23
    35c0:	c9 f7       	brne	.-14     	; 0x35b4 <__udivmodqi4_loop>
    35c2:	80 95       	com	r24
    35c4:	08 95       	ret

000035c6 <__prologue_saves__>:
    35c6:	2f 92       	push	r2
    35c8:	3f 92       	push	r3
    35ca:	4f 92       	push	r4
    35cc:	5f 92       	push	r5
    35ce:	6f 92       	push	r6
    35d0:	7f 92       	push	r7
    35d2:	8f 92       	push	r8
    35d4:	9f 92       	push	r9
    35d6:	af 92       	push	r10
    35d8:	bf 92       	push	r11
    35da:	cf 92       	push	r12
    35dc:	df 92       	push	r13
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	ca 1b       	sub	r28, r26
    35f0:	db 0b       	sbc	r29, r27
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	09 94       	ijmp

000035fe <__epilogue_restores__>:
    35fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3600:	39 88       	ldd	r3, Y+17	; 0x11
    3602:	48 88       	ldd	r4, Y+16	; 0x10
    3604:	5f 84       	ldd	r5, Y+15	; 0x0f
    3606:	6e 84       	ldd	r6, Y+14	; 0x0e
    3608:	7d 84       	ldd	r7, Y+13	; 0x0d
    360a:	8c 84       	ldd	r8, Y+12	; 0x0c
    360c:	9b 84       	ldd	r9, Y+11	; 0x0b
    360e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3610:	b9 84       	ldd	r11, Y+9	; 0x09
    3612:	c8 84       	ldd	r12, Y+8	; 0x08
    3614:	df 80       	ldd	r13, Y+7	; 0x07
    3616:	ee 80       	ldd	r14, Y+6	; 0x06
    3618:	fd 80       	ldd	r15, Y+5	; 0x05
    361a:	0c 81       	ldd	r16, Y+4	; 0x04
    361c:	1b 81       	ldd	r17, Y+3	; 0x03
    361e:	aa 81       	ldd	r26, Y+2	; 0x02
    3620:	b9 81       	ldd	r27, Y+1	; 0x01
    3622:	ce 0f       	add	r28, r30
    3624:	d1 1d       	adc	r29, r1
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	ed 01       	movw	r28, r26
    3632:	08 95       	ret

00003634 <_exit>:
    3634:	f8 94       	cli

00003636 <__stop_program>:
    3636:	ff cf       	rjmp	.-2      	; 0x3636 <__stop_program>
