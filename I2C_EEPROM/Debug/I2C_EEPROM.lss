
I2C_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000274c  000027c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002568  00000000  00000000  00002808  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001277  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006127  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006297  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0e 12 	call	0x241c	; 0x241c <main>
      7a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <TIMER_Set_Prescaler>:
#include "DIO_Confg.h"
#include "DIO.h"
#include "Timer.h"


void TIMER_Set_Prescaler(const TIMER_Prescaler PRESCALER) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= PRESCALER;
     b42:	a3 e5       	ldi	r26, 0x53	; 83
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e3 e5       	ldi	r30, 0x53	; 83
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	90 81       	ld	r25, Z
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	89 2b       	or	r24, r25
     b50:	8c 93       	st	X, r24
}
     b52:	0f 90       	pop	r0
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <TIMER_MODE>:

void TIMER_MODE(const TIMER_Mode MODE) {
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <TIMER_MODE+0x6>
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3b 83       	std	Y+3, r19	; 0x03
     b70:	2a 83       	std	Y+2, r18	; 0x02
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	9b 81       	ldd	r25, Y+3	; 0x03
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	21 f1       	breq	.+72     	; 0xbc4 <TIMER_MODE+0x6a>
     b7c:	2a 81       	ldd	r18, Y+2	; 0x02
     b7e:	3b 81       	ldd	r19, Y+3	; 0x03
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <TIMER_MODE+0x36>
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <TIMER_MODE+0x4c>
     b8e:	46 c0       	rjmp	.+140    	; 0xc1c <TIMER_MODE+0xc2>
     b90:	2a 81       	ldd	r18, Y+2	; 0x02
     b92:	3b 81       	ldd	r19, Y+3	; 0x03
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	21 f1       	breq	.+72     	; 0xbe2 <TIMER_MODE+0x88>
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	71 f1       	breq	.+92     	; 0xc00 <TIMER_MODE+0xa6>
     ba4:	3b c0       	rjmp	.+118    	; 0xc1c <TIMER_MODE+0xc2>
	case T_NORMAL:
		CLR_BIT(TCCR0, T3);
     ba6:	a3 e5       	ldi	r26, 0x53	; 83
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e3 e5       	ldi	r30, 0x53	; 83
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, T6);
     bb4:	a3 e5       	ldi	r26, 0x53	; 83
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e3 e5       	ldi	r30, 0x53	; 83
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 7b       	andi	r24, 0xBF	; 191
     bc0:	8c 93       	st	X, r24
     bc2:	2c c0       	rjmp	.+88     	; 0xc1c <TIMER_MODE+0xc2>
		break;
	case T_PWM:
		CLR_BIT(TCCR0, T3);
     bc4:	a3 e5       	ldi	r26, 0x53	; 83
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e3 e5       	ldi	r30, 0x53	; 83
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	87 7f       	andi	r24, 0xF7	; 247
     bd0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, T6);
     bd2:	a3 e5       	ldi	r26, 0x53	; 83
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e3 e5       	ldi	r30, 0x53	; 83
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c 93       	st	X, r24
     be0:	1d c0       	rjmp	.+58     	; 0xc1c <TIMER_MODE+0xc2>
		break;
	case T_CTC:
		SET_BIT(TCCR0, T3);
     be2:	a3 e5       	ldi	r26, 0x53	; 83
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e3 e5       	ldi	r30, 0x53	; 83
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 60       	ori	r24, 0x08	; 8
     bee:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, T6);
     bf0:	a3 e5       	ldi	r26, 0x53	; 83
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e3 e5       	ldi	r30, 0x53	; 83
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8f 7b       	andi	r24, 0xBF	; 191
     bfc:	8c 93       	st	X, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <TIMER_MODE+0xc2>
		break;
	case T_FAST_PWM:
		SET_BIT(TCCR0, T3);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, T6);
     c0e:	a3 e5       	ldi	r26, 0x53	; 83
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 64       	ori	r24, 0x40	; 64
     c1a:	8c 93       	st	X, r24
		break;
	}
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <TIMER_INIT>:
void TIMER_INIT(void) {
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
     c30:	e2 e5       	ldi	r30, 0x52	; 82
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	10 82       	st	Z, r1
	OCR0 = 0;
     c36:	ec e5       	ldi	r30, 0x5C	; 92
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	10 82       	st	Z, r1
}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <TIMER_INT>:
void TIMER_INT(const TIMER_EN_INT INT) {
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	00 d0       	rcall	.+0      	; 0xc48 <TIMER_INT+0x6>
     c48:	0f 92       	push	r0
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	89 83       	std	Y+1, r24	; 0x01
	switch (INT) {
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3b 83       	std	Y+3, r19	; 0x03
     c58:	2a 83       	std	Y+2, r18	; 0x02
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	e9 f0       	breq	.+58     	; 0xc9e <TIMER_INT+0x5c>
     c64:	2a 81       	ldd	r18, Y+2	; 0x02
     c66:	3b 81       	ldd	r19, Y+3	; 0x03
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <TIMER_INT+0x36>
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	9b 81       	ldd	r25, Y+3	; 0x03
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	61 f0       	breq	.+24     	; 0xc8e <TIMER_INT+0x4c>
     c76:	2a c0       	rjmp	.+84     	; 0xccc <TIMER_INT+0x8a>
     c78:	2a 81       	ldd	r18, Y+2	; 0x02
     c7a:	3b 81       	ldd	r19, Y+3	; 0x03
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	b1 f0       	breq	.+44     	; 0xcae <TIMER_INT+0x6c>
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	c9 f0       	breq	.+50     	; 0xcbe <TIMER_INT+0x7c>
     c8c:	1f c0       	rjmp	.+62     	; 0xccc <TIMER_INT+0x8a>
	case T_OV_INT_ENABLE:
		SET_BIT(TIMSK, 0);
     c8e:	a9 e5       	ldi	r26, 0x59	; 89
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e9 e5       	ldi	r30, 0x59	; 89
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	8c 93       	st	X, r24
     c9c:	17 c0       	rjmp	.+46     	; 0xccc <TIMER_INT+0x8a>
		break;
	case T_OV_INT_DISABLE:
		CLR_BIT(TIMSK, 0);
     c9e:	a9 e5       	ldi	r26, 0x59	; 89
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e9 e5       	ldi	r30, 0x59	; 89
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8e 7f       	andi	r24, 0xFE	; 254
     caa:	8c 93       	st	X, r24
     cac:	0f c0       	rjmp	.+30     	; 0xccc <TIMER_INT+0x8a>
		break;
	case T_OC_INT_ENABLE:
		SET_BIT(TIMSK, 1);
     cae:	a9 e5       	ldi	r26, 0x59	; 89
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e9 e5       	ldi	r30, 0x59	; 89
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	82 60       	ori	r24, 0x02	; 2
     cba:	8c 93       	st	X, r24
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <TIMER_INT+0x8a>
		break;
	case T_OC_INT_DISABLE:
		CLR_BIT(TIMSK, 1);
     cbe:	a9 e5       	ldi	r26, 0x59	; 89
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e9 e5       	ldi	r30, 0x59	; 89
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	8c 93       	st	X, r24
		break;
	}
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <EXTI_INIT>:
#include "MEMMAP.h"
#include "DIO_Confg.h"
#include "DIO.h"
#include "Interrupt.h"

void EXTI_INIT(const SRC_EXTI_INT EXINT_PIN) {
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <EXTI_INIT+0x6>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
	switch (EXINT_PIN) {
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3b 83       	std	Y+3, r19	; 0x03
     cee:	2a 83       	std	Y+2, r18	; 0x02
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	91 05       	cpc	r25, r1
     cf8:	59 f0       	breq	.+22     	; 0xd10 <EXTI_INIT+0x38>
     cfa:	2a 81       	ldd	r18, Y+2	; 0x02
     cfc:	3b 81       	ldd	r19, Y+3	; 0x03
     cfe:	27 30       	cpi	r18, 0x07	; 7
     d00:	31 05       	cpc	r19, r1
     d02:	71 f0       	breq	.+28     	; 0xd20 <EXTI_INIT+0x48>
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	9b 81       	ldd	r25, Y+3	; 0x03
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	91 05       	cpc	r25, r1
     d0c:	89 f0       	breq	.+34     	; 0xd30 <EXTI_INIT+0x58>
     d0e:	17 c0       	rjmp	.+46     	; 0xd3e <EXTI_INIT+0x66>
	case INT0:
		SET_BIT(GICR_Register, INT0);
     d10:	ab e5       	ldi	r26, 0x5B	; 91
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e5       	ldi	r30, 0x5B	; 91
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8c 93       	st	X, r24
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <EXTI_INIT+0x66>
		break;
	case INT1:
		SET_BIT(GICR_Register, INT1);
     d20:	ab e5       	ldi	r26, 0x5B	; 91
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	eb e5       	ldi	r30, 0x5B	; 91
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <EXTI_INIT+0x66>
		break;
	case INT2:
		SET_BIT(GICR_Register, INT2);
     d30:	ab e5       	ldi	r26, 0x5B	; 91
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	eb e5       	ldi	r30, 0x5B	; 91
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	8c 93       	st	X, r24
		break;
	}
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <EXTI_deINIT>:

void EXTI_deINIT(const SRC_EXTI_INT EXINT_PIN) {
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <EXTI_deINIT+0x6>
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
	switch (EXINT_PIN) {
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3b 83       	std	Y+3, r19	; 0x03
     d60:	2a 83       	std	Y+2, r18	; 0x02
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	9b 81       	ldd	r25, Y+3	; 0x03
     d66:	86 30       	cpi	r24, 0x06	; 6
     d68:	91 05       	cpc	r25, r1
     d6a:	59 f0       	breq	.+22     	; 0xd82 <EXTI_deINIT+0x38>
     d6c:	2a 81       	ldd	r18, Y+2	; 0x02
     d6e:	3b 81       	ldd	r19, Y+3	; 0x03
     d70:	27 30       	cpi	r18, 0x07	; 7
     d72:	31 05       	cpc	r19, r1
     d74:	71 f0       	breq	.+28     	; 0xd92 <EXTI_deINIT+0x48>
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	85 30       	cpi	r24, 0x05	; 5
     d7c:	91 05       	cpc	r25, r1
     d7e:	89 f0       	breq	.+34     	; 0xda2 <EXTI_deINIT+0x58>
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <EXTI_deINIT+0x66>
	case INT0:
		CLR_BIT(GICR_Register, INT0);
     d82:	ab e5       	ldi	r26, 0x5B	; 91
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e5       	ldi	r30, 0x5B	; 91
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 7b       	andi	r24, 0xBF	; 191
     d8e:	8c 93       	st	X, r24
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <EXTI_deINIT+0x66>
		break;
	case INT1:
		CLR_BIT(GICR_Register, INT1);
     d92:	ab e5       	ldi	r26, 0x5B	; 91
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e5       	ldi	r30, 0x5B	; 91
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	8c 93       	st	X, r24
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <EXTI_deINIT+0x66>
		break;
	case INT2:
		CLR_BIT(GICR_Register, INT2);
     da2:	ab e5       	ldi	r26, 0x5B	; 91
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e5       	ldi	r30, 0x5B	; 91
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8f 7d       	andi	r24, 0xDF	; 223
     dae:	8c 93       	st	X, r24
		CLR_BIT(MCUCR_Register, ISC00);
		CLR_BIT(MCUCR_Register, ISC01);
		CLR_BIT(MCUCR_Register, ISC10);
		CLR_BIT(MCUCR_Register, ISC11);
	}
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <EXTI_TRIG>:

void EXTI_TRIG(const SRC_EXTI_INT EXINT_Mode, const TRIG_EXTI_INT EDGE) {
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	2a 97       	sbiw	r28, 0x0a	; 10
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	6a 83       	std	Y+2, r22	; 0x02

	switch (EXINT_Mode) {
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3a 87       	std	Y+10, r19	; 0x0a
     ddc:	29 87       	std	Y+9, r18	; 0x09
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	91 05       	cpc	r25, r1
     de6:	69 f0       	breq	.+26     	; 0xe02 <EXTI_TRIG+0x46>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	27 30       	cpi	r18, 0x07	; 7
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <EXTI_TRIG+0x38>
     df2:	62 c0       	rjmp	.+196    	; 0xeb8 <EXTI_TRIG+0xfc>
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	85 30       	cpi	r24, 0x05	; 5
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <EXTI_TRIG+0x44>
     dfe:	b7 c0       	rjmp	.+366    	; 0xf6e <EXTI_TRIG+0x1b2>
     e00:	dd c0       	rjmp	.+442    	; 0xfbc <EXTI_TRIG+0x200>
	case INT0:
		switch (EDGE) {
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	38 87       	std	Y+8, r19	; 0x08
     e0a:	2f 83       	std	Y+7, r18	; 0x07
     e0c:	8f 81       	ldd	r24, Y+7	; 0x07
     e0e:	98 85       	ldd	r25, Y+8	; 0x08
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	21 f1       	breq	.+72     	; 0xe5e <EXTI_TRIG+0xa2>
     e16:	2f 81       	ldd	r18, Y+7	; 0x07
     e18:	38 85       	ldd	r19, Y+8	; 0x08
     e1a:	22 30       	cpi	r18, 0x02	; 2
     e1c:	31 05       	cpc	r19, r1
     e1e:	2c f4       	brge	.+10     	; 0xe2a <EXTI_TRIG+0x6e>
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	61 f0       	breq	.+24     	; 0xe40 <EXTI_TRIG+0x84>
     e28:	c9 c0       	rjmp	.+402    	; 0xfbc <EXTI_TRIG+0x200>
     e2a:	2f 81       	ldd	r18, Y+7	; 0x07
     e2c:	38 85       	ldd	r19, Y+8	; 0x08
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	21 f1       	breq	.+72     	; 0xe7c <EXTI_TRIG+0xc0>
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	98 85       	ldd	r25, Y+8	; 0x08
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	91 05       	cpc	r25, r1
     e3c:	71 f1       	breq	.+92     	; 0xe9a <EXTI_TRIG+0xde>
     e3e:	be c0       	rjmp	.+380    	; 0xfbc <EXTI_TRIG+0x200>
		case Low_Level:
			CLR_BIT(MCUCR_Register, ISC00);
     e40:	a5 e5       	ldi	r26, 0x55	; 85
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e5       	ldi	r30, 0x55	; 85
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC01);
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8d 7f       	andi	r24, 0xFD	; 253
     e5a:	8c 93       	st	X, r24
     e5c:	af c0       	rjmp	.+350    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Logical_Change:
			SET_BIT(MCUCR_Register, ISC00);
     e5e:	a5 e5       	ldi	r26, 0x55	; 85
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e5       	ldi	r30, 0x55	; 85
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC01);
     e6c:	a5 e5       	ldi	r26, 0x55	; 85
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e5 e5       	ldi	r30, 0x55	; 85
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8d 7f       	andi	r24, 0xFD	; 253
     e78:	8c 93       	st	X, r24
     e7a:	a0 c0       	rjmp	.+320    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC00);
     e7c:	a5 e5       	ldi	r26, 0x55	; 85
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e5       	ldi	r30, 0x55	; 85
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8e 7f       	andi	r24, 0xFE	; 254
     e88:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC01);
     e8a:	a5 e5       	ldi	r26, 0x55	; 85
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e5       	ldi	r30, 0x55	; 85
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8c 93       	st	X, r24
     e98:	91 c0       	rjmp	.+290    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC00);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC01);
     ea8:	a5 e5       	ldi	r26, 0x55	; 85
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e5       	ldi	r30, 0x55	; 85
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	8c 93       	st	X, r24
     eb6:	82 c0       	rjmp	.+260    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		}
		break;
	case INT1:
		switch (EDGE) {
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3e 83       	std	Y+6, r19	; 0x06
     ec0:	2d 83       	std	Y+5, r18	; 0x05
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	21 f1       	breq	.+72     	; 0xf14 <EXTI_TRIG+0x158>
     ecc:	2d 81       	ldd	r18, Y+5	; 0x05
     ece:	3e 81       	ldd	r19, Y+6	; 0x06
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	2c f4       	brge	.+10     	; 0xee0 <EXTI_TRIG+0x124>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	61 f0       	breq	.+24     	; 0xef6 <EXTI_TRIG+0x13a>
     ede:	6e c0       	rjmp	.+220    	; 0xfbc <EXTI_TRIG+0x200>
     ee0:	2d 81       	ldd	r18, Y+5	; 0x05
     ee2:	3e 81       	ldd	r19, Y+6	; 0x06
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	21 f1       	breq	.+72     	; 0xf32 <EXTI_TRIG+0x176>
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	71 f1       	breq	.+92     	; 0xf50 <EXTI_TRIG+0x194>
     ef4:	63 c0       	rjmp	.+198    	; 0xfbc <EXTI_TRIG+0x200>
		case Low_Level:
			CLR_BIT(MCUCR_Register, ISC10);
     ef6:	a5 e5       	ldi	r26, 0x55	; 85
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e5       	ldi	r30, 0x55	; 85
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8b 7f       	andi	r24, 0xFB	; 251
     f02:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC11);
     f04:	a5 e5       	ldi	r26, 0x55	; 85
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e5       	ldi	r30, 0x55	; 85
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	8c 93       	st	X, r24
     f12:	54 c0       	rjmp	.+168    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Logical_Change:
			SET_BIT(MCUCR_Register, ISC10);
     f14:	a5 e5       	ldi	r26, 0x55	; 85
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e5       	ldi	r30, 0x55	; 85
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	84 60       	ori	r24, 0x04	; 4
     f20:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC11);
     f22:	a5 e5       	ldi	r26, 0x55	; 85
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e5       	ldi	r30, 0x55	; 85
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	8c 93       	st	X, r24
     f30:	45 c0       	rjmp	.+138    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC10);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC11);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24
     f4e:	36 c0       	rjmp	.+108    	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC10);
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	84 60       	ori	r24, 0x04	; 4
     f5c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC11);
     f5e:	a5 e5       	ldi	r26, 0x55	; 85
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e5       	ldi	r30, 0x55	; 85
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	8c 93       	st	X, r24
     f6c:	27 c0       	rjmp	.+78     	; 0xfbc <EXTI_TRIG+0x200>
			break;
		}
		break;
	case INT2:
		switch (EDGE) {
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3c 83       	std	Y+4, r19	; 0x04
     f76:	2b 83       	std	Y+3, r18	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	31 f0       	breq	.+12     	; 0xf8e <EXTI_TRIG+0x1d2>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	23 30       	cpi	r18, 0x03	; 3
     f88:	31 05       	cpc	r19, r1
     f8a:	49 f0       	breq	.+18     	; 0xf9e <EXTI_TRIG+0x1e2>
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <EXTI_TRIG+0x1f2>
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC2);
     f8e:	a5 e5       	ldi	r26, 0x55	; 85
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e5 e5       	ldi	r30, 0x55	; 85
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 7b       	andi	r24, 0xBF	; 191
     f9a:	8c 93       	st	X, r24
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC2);
     f9e:	a5 e5       	ldi	r26, 0x55	; 85
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e5       	ldi	r30, 0x55	; 85
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	8c 93       	st	X, r24
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <EXTI_TRIG+0x200>
			break;
		default:
			CLR_BIT(MCUCR_Register, ISC2);
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7b       	andi	r24, 0xBF	; 191
     fba:	8c 93       	st	X, r24
		}
		break;
	}
}
     fbc:	2a 96       	adiw	r28, 0x0a	; 10
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_INIT>:

uint8 *REG_ARR[12] = { DDRA_Address, DDRB_Address, DDRC_Address, DDRD_Address,
PORTA_Address, PORTB_Address, PORTC_Address, PORTD_Address,
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_INIT+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_INIT+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_INIT+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
     fdc:	19 82       	std	Y+1, r1	; 0x01
     fde:	bd c0       	rjmp	.+378    	; 0x115a <DIO_INIT+0x18c>
		PIN_STATE = DIO_PIN_CONFG[i];
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	ea 57       	subi	r30, 0x7A	; 122
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	8c 83       	std	Y+4, r24	; 0x04
		PIN_VALUE = i % 8;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	87 70       	andi	r24, 0x07	; 7
     ff4:	8b 83       	std	Y+3, r24	; 0x03
		PORT_STATE = i / 8;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	86 95       	lsr	r24
     ffa:	86 95       	lsr	r24
     ffc:	86 95       	lsr	r24
     ffe:	8a 83       	std	Y+2, r24	; 0x02
		switch (PIN_STATE) {
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3e 83       	std	Y+6, r19	; 0x06
    1008:	2d 83       	std	Y+5, r18	; 0x05
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	81 f1       	breq	.+96     	; 0x1074 <DIO_INIT+0xa6>
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_INIT+0x52>
    101e:	75 c0       	rjmp	.+234    	; 0x110a <DIO_INIT+0x13c>
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	09 f0       	breq	.+2      	; 0x102a <DIO_INIT+0x5c>
    1028:	95 c0       	rjmp	.+298    	; 0x1154 <DIO_INIT+0x186>
		case OUTPUT:
			SET_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	fc 01       	movw	r30, r24
    1036:	e2 59       	subi	r30, 0x92	; 146
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	a0 81       	ld	r26, Z
    103c:	b1 81       	ldd	r27, Z+1	; 0x01
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	e2 59       	subi	r30, 0x92	; 146
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_INIT+0x9c>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_INIT+0x98>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	70 c0       	rjmp	.+224    	; 0x1154 <DIO_INIT+0x186>
			break;
		case INPUT_PULLUP:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	fc 01       	movw	r30, r24
    1080:	e2 59       	subi	r30, 0x92	; 146
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	a0 81       	ld	r26, Z
    1086:	b1 81       	ldd	r27, Z+1	; 0x01
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	fc 01       	movw	r30, r24
    1094:	e2 59       	subi	r30, 0x92	; 146
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	01 90       	ld	r0, Z+
    109a:	f0 81       	ld	r31, Z
    109c:	e0 2d       	mov	r30, r0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_INIT+0xe4>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	2a 95       	dec	r18
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_INIT+0xe0>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
			SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_VALUE);
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	04 96       	adiw	r24, 0x04	; 4
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 59       	subi	r30, 0x92	; 146
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	a0 81       	ld	r26, Z
    10d0:	b1 81       	ldd	r27, Z+1	; 0x01
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	04 96       	adiw	r24, 0x04	; 4
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 59       	subi	r30, 0x92	; 146
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	01 90       	ld	r0, Z+
    10e6:	f0 81       	ld	r31, Z
    10e8:	e0 2d       	mov	r30, r0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_INIT+0x132>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_INIT+0x12e>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	25 c0       	rjmp	.+74     	; 0x1154 <DIO_INIT+0x186>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	fc 01       	movw	r30, r24
    1116:	e2 59       	subi	r30, 0x92	; 146
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	a0 81       	ld	r26, Z
    111c:	b1 81       	ldd	r27, Z+1	; 0x01
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	fc 01       	movw	r30, r24
    112a:	e2 59       	subi	r30, 0x92	; 146
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	01 90       	ld	r0, Z+
    1130:	f0 81       	ld	r31, Z
    1132:	e0 2d       	mov	r30, r0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_INIT+0x17c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_INIT+0x178>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 32       	cpi	r24, 0x20	; 32
    115e:	08 f4       	brcc	.+2      	; 0x1162 <DIO_INIT+0x194>
    1160:	3f cf       	rjmp	.-386    	; 0xfe0 <DIO_INIT+0x12>
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
			break;
		}
	}
}
    1162:	26 96       	adiw	r28, 0x06	; 6
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <DIO_Write_Channel>:


void DIO_Write_Channel(uint8 CHANNEL, uint8 LEVEL) {
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_Write_Channel+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <DIO_Write_Channel+0x8>
    117c:	00 d0       	rcall	.+0      	; 0x117e <DIO_Write_Channel+0xa>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	6c 83       	std	Y+4, r22	; 0x04
	uint8 PIN_STATE = CHANNEL % 8;
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	87 70       	andi	r24, 0x07	; 7
    118a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_STATE = CHANNEL / 8;
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	86 95       	lsr	r24
    1190:	86 95       	lsr	r24
    1192:	86 95       	lsr	r24
    1194:	89 83       	std	Y+1, r24	; 0x01
	switch (LEVEL) {
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3e 83       	std	Y+6, r19	; 0x06
    119e:	2d 83       	std	Y+5, r18	; 0x05
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	69 f1       	breq	.+90     	; 0x1202 <DIO_Write_Channel+0x8e>
    11a8:	2d 81       	ldd	r18, Y+5	; 0x05
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	21 30       	cpi	r18, 0x01	; 1
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <DIO_Write_Channel+0x40>
    11b2:	4e c0       	rjmp	.+156    	; 0x1250 <DIO_Write_Channel+0xdc>
	case HIGH:
		SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	04 96       	adiw	r24, 0x04	; 4
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 59       	subi	r30, 0x92	; 146
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	04 96       	adiw	r24, 0x04	; 4
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	fc 01       	movw	r30, r24
    11d8:	e2 59       	subi	r30, 0x92	; 146
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_Write_Channel+0x84>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_Write_Channel+0x80>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	27 c0       	rjmp	.+78     	; 0x1250 <DIO_Write_Channel+0xdc>
		break;
	case LOW:
		CLR_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	04 96       	adiw	r24, 0x04	; 4
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	fc 01       	movw	r30, r24
    1210:	e2 59       	subi	r30, 0x92	; 146
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	a0 81       	ld	r26, Z
    1216:	b1 81       	ldd	r27, Z+1	; 0x01
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	04 96       	adiw	r24, 0x04	; 4
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	fc 01       	movw	r30, r24
    1226:	e2 59       	subi	r30, 0x92	; 146
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	01 90       	ld	r0, Z+
    122c:	f0 81       	ld	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_Write_Channel+0xd2>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_Write_Channel+0xce>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
		break;
	}
}
    1250:	26 96       	adiw	r28, 0x06	; 6
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_Write_Port>:

void DIO_Write_Port(uint8 PORT, uint8 VALUE) {
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_Write_Port+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02

	*REG_ARR[PORT + 4] = VALUE;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	04 96       	adiw	r24, 0x04	; 4
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	fc 01       	movw	r30, r24
    127e:	e2 59       	subi	r30, 0x92	; 146
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	01 90       	ld	r0, Z+
    1284:	f0 81       	ld	r31, Z
    1286:	e0 2d       	mov	r30, r0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_Read_Channel>:

uint8 DIO_Read_Channel(uint8 CHANNEL) {
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_Read_Channel+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_Read_Channel+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8c 83       	std	Y+4, r24	; 0x04
	uint8 PIN_STATE, val;
	uint8 PORT_STATE;

	PIN_STATE = CHANNEL % 8;
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	87 70       	andi	r24, 0x07	; 7
    12a8:	8b 83       	std	Y+3, r24	; 0x03
	PORT_STATE = CHANNEL / 8;
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	86 95       	lsr	r24
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	89 83       	std	Y+1, r24	; 0x01
	val = GET_BIT(*REG_ARR[PORT_STATE + 8], PIN_STATE);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	08 96       	adiw	r24, 0x08	; 8
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	fc 01       	movw	r30, r24
    12c2:	e2 59       	subi	r30, 0x92	; 146
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	01 90       	ld	r0, Z+
    12c8:	f0 81       	ld	r31, Z
    12ca:	e0 2d       	mov	r30, r0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_Read_Channel+0x4a>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_Read_Channel+0x46>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	8a 83       	std	Y+2, r24	; 0x02


	return val;
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_Read_Port>:

uint8 DIO_Read_Port(uint8 PORT) {
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_Read_Port+0x6>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val;
	val = *REG_ARR[PORT + 8];
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	08 96       	adiw	r24, 0x08	; 8
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e2 59       	subi	r30, 0x92	; 146
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
	return val;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <I2C_Init>:
#include "MEMMAP.h"
#include "DIO_Confg.h"
#include "DIO.h"
#include "I2C.h"

void I2C_Init(void) {
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;		// 0 PreScaler
    1336:	e1 e2       	ldi	r30, 0x21	; 33
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	10 82       	st	Z, r1
	TWAR = 0b10101010;
    133c:	e2 e2       	ldi	r30, 0x22	; 34
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a ea       	ldi	r24, 0xAA	; 170
    1342:	80 83       	st	Z, r24
	TWBR = 0x02;
    1344:	e0 e2       	ldi	r30, 0x20	; 32
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	80 83       	st	Z, r24
	SET_BIT(TWCR, TWEN); // Enable I2C
    134c:	a6 e5       	ldi	r26, 0x56	; 86
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e6 e5       	ldi	r30, 0x56	; 86
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	84 60       	ori	r24, 0x04	; 4
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <I2C_Start_Condition>:

void I2C_Start_Condition(void) {
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWINT); /* Interrupt flag */
    1368:	a6 e5       	ldi	r26, 0x56	; 86
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e6 e5       	ldi	r30, 0x56	; 86
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWSTA); /* START Condition*/
    1376:	a6 e5       	ldi	r26, 0x56	; 86
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e6 e5       	ldi	r30, 0x56	; 86
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 62       	ori	r24, 0x20	; 32
    1382:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN); /* Enable TWI*/
    1384:	a6 e5       	ldi	r26, 0x56	; 86
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e6 e5       	ldi	r30, 0x56	; 86
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	84 60       	ori	r24, 0x04	; 4
    1390:	8c 93       	st	X, r24
	while (!CLEAR_BIT(TWCR, TWINT))
    1392:	e6 e5       	ldi	r30, 0x56	; 86
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 23       	and	r24, r24
    139a:	dc f3       	brlt	.-10     	; 0x1392 <I2C_Start_Condition+0x32>
		;
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <I2C_Stop_Condition>:

void I2C_Stop_Condition(void) {
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWINT);
    13aa:	a6 e5       	ldi	r26, 0x56	; 86
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e6 e5       	ldi	r30, 0x56	; 86
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWSTO);
    13b8:	a6 e5       	ldi	r26, 0x56	; 86
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e6 e5       	ldi	r30, 0x56	; 86
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 61       	ori	r24, 0x10	; 16
    13c4:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    13c6:	a6 e5       	ldi	r26, 0x56	; 86
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e6 e5       	ldi	r30, 0x56	; 86
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	84 60       	ori	r24, 0x04	; 4
    13d2:	8c 93       	st	X, r24
	while (TWCR & (1 << TWSTO))
    13d4:	e6 e5       	ldi	r30, 0x56	; 86
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	80 71       	andi	r24, 0x10	; 16
    13e0:	90 70       	andi	r25, 0x00	; 0
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	b9 f7       	brne	.-18     	; 0x13d4 <I2C_Stop_Condition+0x32>
		;
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <I2C_Read_Data>:
uint8 I2C_Read_Data(void) {
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWINT);
    13f4:	a6 e5       	ldi	r26, 0x56	; 86
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e6 e5       	ldi	r30, 0x56	; 86
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1402:	a6 e5       	ldi	r26, 0x56	; 86
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e6 e5       	ldi	r30, 0x56	; 86
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	84 60       	ori	r24, 0x04	; 4
    140e:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEA);
    1410:	a6 e5       	ldi	r26, 0x56	; 86
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e6 e5       	ldi	r30, 0x56	; 86
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8c 93       	st	X, r24
	while (!CLEAR_BIT(TWCR, TWINT))
    141e:	e6 e5       	ldi	r30, 0x56	; 86
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 23       	and	r24, r24
    1426:	dc f3       	brlt	.-10     	; 0x141e <I2C_Read_Data+0x32>
		;
	return TWDR;
    1428:	e3 e2       	ldi	r30, 0x23	; 35
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <I2C_Read_NACK>:

uint8 I2C_Read_NACK(void) {
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWINT);
    143c:	a6 e5       	ldi	r26, 0x56	; 86
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e6 e5       	ldi	r30, 0x56	; 86
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    144a:	a6 e5       	ldi	r26, 0x56	; 86
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e6 e5       	ldi	r30, 0x56	; 86
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	84 60       	ori	r24, 0x04	; 4
    1456:	8c 93       	st	X, r24
	while (CLEAR_BIT(TWCR, TWINT))
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 23       	and	r24, r24
    1460:	dc f7       	brge	.-10     	; 0x1458 <I2C_Read_NACK+0x24>
		;
	return TWDR;
    1462:	e3 e2       	ldi	r30, 0x23	; 35
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <I2C_Write_Data>:

void I2C_Write_Data(uint8 Data) {
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Data;
    147a:	e3 e2       	ldi	r30, 0x23	; 35
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	80 83       	st	Z, r24
	SET_BIT(TWCR, TWINT);
    1482:	a6 e5       	ldi	r26, 0x56	; 86
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e6 e5       	ldi	r30, 0x56	; 86
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	80 68       	ori	r24, 0x80	; 128
    148e:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1490:	a6 e5       	ldi	r26, 0x56	; 86
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR, TWINT))
    149e:	e6 e5       	ldi	r30, 0x56	; 86
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 23       	and	r24, r24
    14a6:	dc f7       	brge	.-10     	; 0x149e <I2C_Write_Data+0x30>
		;
}
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <I2C_GetStatus>:

uint8 I2C_GetStatus(void) {
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0xF8;
    14ba:	e1 e2       	ldi	r30, 0x21	; 33
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 7f       	andi	r24, 0xF8	; 248
    14c2:	89 83       	std	Y+1, r24	; 0x01
	return status;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_vidInit>:
#include"LCD_Confg.h"
#include"LCD.h"
#include<util/delay.h>
#include <avr/io.h>

void LCD_vidInit(void) {
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	c3 56       	subi	r28, 0x63	; 99
    14dc:	d0 40       	sbci	r29, 0x00	; 0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
	uint8 LCD_PORT = 0xFF;
    14e8:	fe 01       	movw	r30, r28
    14ea:	ed 59       	subi	r30, 0x9D	; 157
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
	DDRD_Register |= ( (1<<E) | (1<<RS) | (1<<RW) ) ; // Enable , RS , R/W
    14f2:	a1 e3       	ldi	r26, 0x31	; 49
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8c 93       	st	X, r24
    14fe:	fe 01       	movw	r30, r28
    1500:	e1 5a       	subi	r30, 0xA1	; 161
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 ef       	ldi	r26, 0xF0	; 240
    150a:	b1 e4       	ldi	r27, 0x41	; 65
    150c:	80 83       	st	Z, r24
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	a2 83       	std	Z+2, r26	; 0x02
    1512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	8e 01       	movw	r16, r28
    1516:	05 5a       	subi	r16, 0xA5	; 165
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	fe 01       	movw	r30, r28
    151c:	e1 5a       	subi	r30, 0xA1	; 161
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	f8 01       	movw	r30, r16
    153a:	80 83       	st	Z, r24
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	a2 83       	std	Z+2, r26	; 0x02
    1540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1542:	fe 01       	movw	r30, r28
    1544:	e5 5a       	subi	r30, 0xA5	; 165
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	44 f4       	brge	.+16     	; 0x1570 <LCD_vidInit+0xa2>
		__ticks = 1;
    1560:	fe 01       	movw	r30, r28
    1562:	e7 5a       	subi	r30, 0xA7	; 167
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    156e:	64 c0       	rjmp	.+200    	; 0x1638 <LCD_vidInit+0x16a>
	else if (__tmp > 65535)
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5a       	subi	r30, 0xA5	; 165
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	0c f0       	brlt	.+2      	; 0x1590 <LCD_vidInit+0xc2>
    158e:	43 c0       	rjmp	.+134    	; 0x1616 <LCD_vidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	fe 01       	movw	r30, r28
    1592:	e1 5a       	subi	r30, 0xA1	; 161
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8e 01       	movw	r16, r28
    15b0:	07 5a       	subi	r16, 0xA7	; 167
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	f8 01       	movw	r30, r16
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
    15c6:	1f c0       	rjmp	.+62     	; 0x1606 <LCD_vidInit+0x138>
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 5a       	subi	r30, 0xA9	; 169
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15d6:	fe 01       	movw	r30, r28
    15d8:	e9 5a       	subi	r30, 0xA9	; 169
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_vidInit+0x112>
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 5a       	subi	r30, 0xA9	; 169
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ee:	de 01       	movw	r26, r28
    15f0:	a7 5a       	subi	r26, 0xA7	; 167
    15f2:	bf 4f       	sbci	r27, 0xFF	; 255
    15f4:	fe 01       	movw	r30, r28
    15f6:	e7 5a       	subi	r30, 0xA7	; 167
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	11 96       	adiw	r26, 0x01	; 1
    1602:	9c 93       	st	X, r25
    1604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	fe 01       	movw	r30, r28
    1608:	e7 5a       	subi	r30, 0xA7	; 167
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	d1 f6       	brne	.-76     	; 0x15c8 <LCD_vidInit+0xfa>
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <LCD_vidInit+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	8e 01       	movw	r16, r28
    1618:	07 5a       	subi	r16, 0xA7	; 167
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	fe 01       	movw	r30, r28
    161e:	e5 5a       	subi	r30, 0xA5	; 165
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	f8 01       	movw	r30, r16
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	de 01       	movw	r26, r28
    163a:	ab 5a       	subi	r26, 0xAB	; 171
    163c:	bf 4f       	sbci	r27, 0xFF	; 255
    163e:	fe 01       	movw	r30, r28
    1640:	e7 5a       	subi	r30, 0xA7	; 167
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	8d 93       	st	X+, r24
    164a:	9c 93       	st	X, r25
    164c:	fe 01       	movw	r30, r28
    164e:	eb 5a       	subi	r30, 0xAB	; 171
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_vidInit+0x188>
    165a:	fe 01       	movw	r30, r28
    165c:	eb 5a       	subi	r30, 0xAB	; 171
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
	_delay_ms(30);
	LCD_vidSendCommand(lcd_SET);
    1664:	88 e3       	ldi	r24, 0x38	; 56
    1666:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    166a:	fe 01       	movw	r30, r28
    166c:	ef 5a       	subi	r30, 0xAF	; 175
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 e7       	ldi	r26, 0x70	; 112
    1676:	b1 e4       	ldi	r27, 0x41	; 65
    1678:	80 83       	st	Z, r24
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	a2 83       	std	Z+2, r26	; 0x02
    167e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1680:	8e 01       	movw	r16, r28
    1682:	03 5b       	subi	r16, 0xB3	; 179
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	ef 5a       	subi	r30, 0xAF	; 175
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ae:	fe 01       	movw	r30, r28
    16b0:	e3 5b       	subi	r30, 0xB3	; 179
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	44 f4       	brge	.+16     	; 0x16dc <LCD_vidInit+0x20e>
		__ticks = 1;
    16cc:	fe 01       	movw	r30, r28
    16ce:	e5 5b       	subi	r30, 0xB5	; 181
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	64 c0       	rjmp	.+200    	; 0x17a4 <LCD_vidInit+0x2d6>
	else if (__tmp > 65535)
    16dc:	fe 01       	movw	r30, r28
    16de:	e3 5b       	subi	r30, 0xB3	; 179
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <LCD_vidInit+0x22e>
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <LCD_vidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	fe 01       	movw	r30, r28
    16fe:	ef 5a       	subi	r30, 0xAF	; 175
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8e 01       	movw	r16, r28
    171c:	05 5b       	subi	r16, 0xB5	; 181
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	1f c0       	rjmp	.+62     	; 0x1772 <LCD_vidInit+0x2a4>
    1734:	fe 01       	movw	r30, r28
    1736:	e7 5b       	subi	r30, 0xB7	; 183
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
    1742:	fe 01       	movw	r30, r28
    1744:	e7 5b       	subi	r30, 0xB7	; 183
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_vidInit+0x27e>
    1750:	fe 01       	movw	r30, r28
    1752:	e7 5b       	subi	r30, 0xB7	; 183
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	de 01       	movw	r26, r28
    175c:	a5 5b       	subi	r26, 0xB5	; 181
    175e:	bf 4f       	sbci	r27, 0xFF	; 255
    1760:	fe 01       	movw	r30, r28
    1762:	e5 5b       	subi	r30, 0xB5	; 181
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	9c 93       	st	X, r25
    1770:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	fe 01       	movw	r30, r28
    1774:	e5 5b       	subi	r30, 0xB5	; 181
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	d1 f6       	brne	.-76     	; 0x1734 <LCD_vidInit+0x266>
    1780:	27 c0       	rjmp	.+78     	; 0x17d0 <LCD_vidInit+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	8e 01       	movw	r16, r28
    1784:	05 5b       	subi	r16, 0xB5	; 181
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	e3 5b       	subi	r30, 0xB3	; 179
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	de 01       	movw	r26, r28
    17a6:	a9 5b       	subi	r26, 0xB9	; 185
    17a8:	bf 4f       	sbci	r27, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	e5 5b       	subi	r30, 0xB5	; 181
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	8d 93       	st	X+, r24
    17b6:	9c 93       	st	X, r25
    17b8:	fe 01       	movw	r30, r28
    17ba:	e9 5b       	subi	r30, 0xB9	; 185
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_vidInit+0x2f4>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e9 5b       	subi	r30, 0xB9	; 185
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
	_delay_ms(15);
	LCD_vidSendCommand(lcd_HOME);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    17d6:	fe 01       	movw	r30, r28
    17d8:	ed 5b       	subi	r30, 0xBD	; 189
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e8       	ldi	r26, 0x80	; 128
    17e2:	bf e3       	ldi	r27, 0x3F	; 63
    17e4:	80 83       	st	Z, r24
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	a2 83       	std	Z+2, r26	; 0x02
    17ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	8e 01       	movw	r16, r28
    17ee:	01 5c       	subi	r16, 0xC1	; 193
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	fe 01       	movw	r30, r28
    17f4:	ed 5b       	subi	r30, 0xBD	; 189
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a ef       	ldi	r20, 0xFA	; 250
    1806:	54 e4       	ldi	r21, 0x44	; 68
    1808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	80 83       	st	Z, r24
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	a2 83       	std	Z+2, r26	; 0x02
    1818:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    181a:	fe 01       	movw	r30, r28
    181c:	ff 96       	adiw	r30, 0x3f	; 63
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <LCD_vidInit+0x372>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9e af       	std	Y+62, r25	; 0x3e
    183c:	8d af       	std	Y+61, r24	; 0x3d
    183e:	46 c0       	rjmp	.+140    	; 0x18cc <LCD_vidInit+0x3fe>
	else if (__tmp > 65535)
    1840:	fe 01       	movw	r30, r28
    1842:	ff 96       	adiw	r30, 0x3f	; 63
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	64 f5       	brge	.+88     	; 0x18b4 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	fe 01       	movw	r30, r28
    185e:	ed 5b       	subi	r30, 0xBD	; 189
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e af       	std	Y+62, r25	; 0x3e
    1888:	8d af       	std	Y+61, r24	; 0x3d
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_vidInit+0x3dc>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c af       	std	Y+60, r25	; 0x3c
    1892:	8b af       	std	Y+59, r24	; 0x3b
    1894:	8b ad       	ldd	r24, Y+59	; 0x3b
    1896:	9c ad       	ldd	r25, Y+60	; 0x3c
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_vidInit+0x3ca>
    189c:	9c af       	std	Y+60, r25	; 0x3c
    189e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9e af       	std	Y+62, r25	; 0x3e
    18a8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_vidInit+0x3be>
    18b2:	16 c0       	rjmp	.+44     	; 0x18e0 <LCD_vidInit+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	fe 01       	movw	r30, r28
    18b6:	ff 96       	adiw	r30, 0x3f	; 63
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e af       	std	Y+62, r25	; 0x3e
    18ca:	8d af       	std	Y+61, r24	; 0x3d
    18cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d0:	9a af       	std	Y+58, r25	; 0x3a
    18d2:	89 af       	std	Y+57, r24	; 0x39
    18d4:	89 ad       	ldd	r24, Y+57	; 0x39
    18d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_vidInit+0x40a>
    18dc:	9a af       	std	Y+58, r25	; 0x3a
    18de:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_vidSendCommand(lcd_DPY_ON);
    18e0:	8c e0       	ldi	r24, 0x0C	; 12
    18e2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e8       	ldi	r26, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	8d ab       	std	Y+53, r24	; 0x35
    18f0:	9e ab       	std	Y+54, r25	; 0x36
    18f2:	af ab       	std	Y+55, r26	; 0x37
    18f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6d a9       	ldd	r22, Y+53	; 0x35
    18f8:	7e a9       	ldd	r23, Y+54	; 0x36
    18fa:	8f a9       	ldd	r24, Y+55	; 0x37
    18fc:	98 ad       	ldd	r25, Y+56	; 0x38
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	89 ab       	std	Y+49, r24	; 0x31
    1910:	9a ab       	std	Y+50, r25	; 0x32
    1912:	ab ab       	std	Y+51, r26	; 0x33
    1914:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1916:	69 a9       	ldd	r22, Y+49	; 0x31
    1918:	7a a9       	ldd	r23, Y+50	; 0x32
    191a:	8b a9       	ldd	r24, Y+51	; 0x33
    191c:	9c a9       	ldd	r25, Y+52	; 0x34
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_vidInit+0x46a>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	98 ab       	std	Y+48, r25	; 0x30
    1934:	8f a7       	std	Y+47, r24	; 0x2f
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_vidInit+0x4e8>
	else if (__tmp > 65535)
    1938:	69 a9       	ldd	r22, Y+49	; 0x31
    193a:	7a a9       	ldd	r23, Y+50	; 0x32
    193c:	8b a9       	ldd	r24, Y+51	; 0x33
    193e:	9c a9       	ldd	r25, Y+52	; 0x34
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_vidInit+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6d a9       	ldd	r22, Y+53	; 0x35
    1952:	7e a9       	ldd	r23, Y+54	; 0x36
    1954:	8f a9       	ldd	r24, Y+55	; 0x37
    1956:	98 ad       	ldd	r25, Y+56	; 0x38
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	98 ab       	std	Y+48, r25	; 0x30
    1976:	8f a7       	std	Y+47, r24	; 0x2f
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_vidInit+0x4ca>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e a7       	std	Y+46, r25	; 0x2e
    1980:	8d a7       	std	Y+45, r24	; 0x2d
    1982:	8d a5       	ldd	r24, Y+45	; 0x2d
    1984:	9e a5       	ldd	r25, Y+46	; 0x2e
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_vidInit+0x4b8>
    198a:	9e a7       	std	Y+46, r25	; 0x2e
    198c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1990:	98 a9       	ldd	r25, Y+48	; 0x30
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	98 ab       	std	Y+48, r25	; 0x30
    1996:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8f a5       	ldd	r24, Y+47	; 0x2f
    199a:	98 a9       	ldd	r25, Y+48	; 0x30
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_vidInit+0x4ac>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <LCD_vidInit+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	69 a9       	ldd	r22, Y+49	; 0x31
    19a4:	7a a9       	ldd	r23, Y+50	; 0x32
    19a6:	8b a9       	ldd	r24, Y+51	; 0x33
    19a8:	9c a9       	ldd	r25, Y+52	; 0x34
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	98 ab       	std	Y+48, r25	; 0x30
    19b4:	8f a7       	std	Y+47, r24	; 0x2f
    19b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ba:	9c a7       	std	Y+44, r25	; 0x2c
    19bc:	8b a7       	std	Y+43, r24	; 0x2b
    19be:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_vidInit+0x4f4>
    19c6:	9c a7       	std	Y+44, r25	; 0x2c
    19c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(lcd_CLR);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e7       	ldi	r26, 0x70	; 112
    19d6:	b1 e4       	ldi	r27, 0x41	; 65
    19d8:	8f a3       	std	Y+39, r24	; 0x27
    19da:	98 a7       	std	Y+40, r25	; 0x28
    19dc:	a9 a7       	std	Y+41, r26	; 0x29
    19de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6f a1       	ldd	r22, Y+39	; 0x27
    19e2:	78 a5       	ldd	r23, Y+40	; 0x28
    19e4:	89 a5       	ldd	r24, Y+41	; 0x29
    19e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8b a3       	std	Y+35, r24	; 0x23
    19fa:	9c a3       	std	Y+36, r25	; 0x24
    19fc:	ad a3       	std	Y+37, r26	; 0x25
    19fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a00:	6b a1       	ldd	r22, Y+35	; 0x23
    1a02:	7c a1       	ldd	r23, Y+36	; 0x24
    1a04:	8d a1       	ldd	r24, Y+37	; 0x25
    1a06:	9e a1       	ldd	r25, Y+38	; 0x26
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_vidInit+0x554>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9a a3       	std	Y+34, r25	; 0x22
    1a1e:	89 a3       	std	Y+33, r24	; 0x21
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_vidInit+0x5d2>
	else if (__tmp > 65535)
    1a22:	6b a1       	ldd	r22, Y+35	; 0x23
    1a24:	7c a1       	ldd	r23, Y+36	; 0x24
    1a26:	8d a1       	ldd	r24, Y+37	; 0x25
    1a28:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_vidInit+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_vidInit+0x5b4>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	98 a3       	std	Y+32, r25	; 0x20
    1a6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_vidInit+0x5a2>
    1a74:	98 a3       	std	Y+32, r25	; 0x20
    1a76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9a a3       	std	Y+34, r25	; 0x22
    1a80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	89 a1       	ldd	r24, Y+33	; 0x21
    1a84:	9a a1       	ldd	r25, Y+34	; 0x22
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_vidInit+0x596>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_vidInit+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a90:	8d a1       	ldd	r24, Y+37	; 0x25
    1a92:	9e a1       	ldd	r25, Y+38	; 0x26
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9a a3       	std	Y+34, r25	; 0x22
    1a9e:	89 a3       	std	Y+33, r24	; 0x21
    1aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_vidInit+0x5de>
    1ab0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15);
	LCD_vidSendCommand(lcd_ENT_MODE);
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	89 8f       	std	Y+25, r24	; 0x19
    1ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8d 8b       	std	Y+21, r24	; 0x15
    1ae4:	9e 8b       	std	Y+22, r25	; 0x16
    1ae6:	af 8b       	std	Y+23, r26	; 0x17
    1ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_vidInit+0x63e>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_vidInit+0x6bc>
	else if (__tmp > 65535)
    1b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b10:	8f 89       	ldd	r24, Y+23	; 0x17
    1b12:	98 8d       	ldd	r25, Y+24	; 0x18
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_vidInit+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_vidInit+0x69e>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_vidInit+0x68c>
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9c 8b       	std	Y+20, r25	; 0x14
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_vidInit+0x680>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_vidInit+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_vidInit+0x6c8>
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(lcd_CURSER);
    1b9e:	80 e8       	ldi	r24, 0x80	; 128
    1ba0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e4       	ldi	r27, 0x40	; 64
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_vidInit+0x728>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_vidInit+0x7a6>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_vidInit+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_vidInit+0x788>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_vidInit+0x776>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_vidInit+0x76a>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_vidInit+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_vidInit+0x7b2>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1c88:	cd 59       	subi	r28, 0x9D	; 157
    1c8a:	df 4f       	sbci	r29, 0xFF	; 255
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	08 95       	ret

00001ca0 <LCD_vidSendCommand>:

void LCD_vidSendCommand(uint8 Cmd) {
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	6d 97       	sbiw	r28, 0x1d	; 29
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write_Channel(RS, LOW);
    1cb6:	8d e1       	ldi	r24, 0x1D	; 29
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Channel(RW, LOW);
    1cbe:	8e e1       	ldi	r24, 0x1E	; 30
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Channel(E, HIGH);
    1cc6:	8f e1       	ldi	r24, 0x1F	; 31
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Port(LCD_PORT, Cmd);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cd2:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_Write_Port>

	DIO_Write_Channel(E, LOW);
    1cd6:	8f e1       	ldi	r24, 0x1F	; 31
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ce4:	b0 e4       	ldi	r27, 0x40	; 64
    1ce6:	89 8f       	std	Y+25, r24	; 0x19
    1ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cea:	ab 8f       	std	Y+27, r26	; 0x1b
    1cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8d 8b       	std	Y+21, r24	; 0x15
    1d08:	9e 8b       	std	Y+22, r25	; 0x16
    1d0a:	af 8b       	std	Y+23, r26	; 0x17
    1d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_vidSendCommand+0x90>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_vidSendCommand+0x10e>
	else if (__tmp > 65535)
    1d30:	6d 89       	ldd	r22, Y+21	; 0x15
    1d32:	7e 89       	ldd	r23, Y+22	; 0x16
    1d34:	8f 89       	ldd	r24, Y+23	; 0x17
    1d36:	98 8d       	ldd	r25, Y+24	; 0x18
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_vidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_vidSendCommand+0xf0>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9a 8b       	std	Y+18, r25	; 0x12
    1d78:	89 8b       	std	Y+17, r24	; 0x11
    1d7a:	89 89       	ldd	r24, Y+17	; 0x11
    1d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_vidSendCommand+0xde>
    1d82:	9a 8b       	std	Y+18, r25	; 0x12
    1d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_vidSendCommand+0xd2>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <LCD_vidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9c 8b       	std	Y+20, r25	; 0x14
    1dac:	8b 8b       	std	Y+19, r24	; 0x13
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	98 8b       	std	Y+16, r25	; 0x10
    1db4:	8f 87       	std	Y+15, r24	; 0x0f
    1db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db8:	98 89       	ldd	r25, Y+16	; 0x10
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_vidSendCommand+0x11a>
    1dbe:	98 8b       	std	Y+16, r25	; 0x10
    1dc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_Write_Channel(E, HIGH);
    1dc2:	8f e1       	ldi	r24, 0x1F	; 31
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e2       	ldi	r26, 0x20	; 32
    1dd0:	b1 e4       	ldi	r27, 0x41	; 65
    1dd2:	8b 87       	std	Y+11, r24	; 0x0b
    1dd4:	9c 87       	std	Y+12, r25	; 0x0c
    1dd6:	ad 87       	std	Y+13, r26	; 0x0d
    1dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a ef       	ldi	r20, 0xFA	; 250
    1de8:	54 e4       	ldi	r21, 0x44	; 68
    1dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8f 83       	std	Y+7, r24	; 0x07
    1df4:	98 87       	std	Y+8, r25	; 0x08
    1df6:	a9 87       	std	Y+9, r26	; 0x09
    1df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	5f e3       	ldi	r21, 0x3F	; 63
    1e0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	3f c0       	rjmp	.+126    	; 0x1e9a <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e30:	18 16       	cp	r1, r24
    1e32:	4c f5       	brge	.+82     	; 0x1e86 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e2       	ldi	r20, 0x20	; 32
    1e42:	51 e4       	ldi	r21, 0x41	; 65
    1e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <LCD_vidSendCommand+0x1dc>
    1e5e:	88 ec       	ldi	r24, 0xC8	; 200
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_vidSendCommand+0x1ca>
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	69 f7       	brne	.-38     	; 0x1e5e <LCD_vidSendCommand+0x1be>
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_vidSendCommand+0x206>
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1eae:	6d 96       	adiw	r28, 0x1d	; 29
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <LCD_vidSendData>:

void LCD_vidSendData(uint8 Data) {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	6d 97       	sbiw	r28, 0x1d	; 29
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write_Channel(RS, HIGH);
    1ed6:	8d e1       	ldi	r24, 0x1D	; 29
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Channel(RW, LOW);
    1ede:	8e e1       	ldi	r24, 0x1E	; 30
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Channel(E, HIGH);
    1ee6:	8f e1       	ldi	r24, 0x1F	; 31
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
	DIO_Write_Port(LCD_PORT, Data);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ef2:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_Write_Port>

	DIO_Write_Channel(E, LOW);
    1ef6:	8f e1       	ldi	r24, 0x1F	; 31
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 ea       	ldi	r26, 0xA0	; 160
    1f04:	b0 e4       	ldi	r27, 0x40	; 64
    1f06:	89 8f       	std	Y+25, r24	; 0x19
    1f08:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8d 8b       	std	Y+21, r24	; 0x15
    1f28:	9e 8b       	std	Y+22, r25	; 0x16
    1f2a:	af 8b       	std	Y+23, r26	; 0x17
    1f2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_vidSendData+0x90>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_vidSendData+0x10e>
	else if (__tmp > 65535)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_vidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_vidSendData+0xf0>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	89 89       	ldd	r24, Y+17	; 0x11
    1f9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_vidSendData+0xde>
    1fa2:	9a 8b       	std	Y+18, r25	; 0x12
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_vidSendData+0xd2>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_vidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	98 89       	ldd	r25, Y+16	; 0x10
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_vidSendData+0x11a>
    1fde:	98 8b       	std	Y+16, r25	; 0x10
    1fe0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_Write_Channel(E, HIGH);
    1fe2:	8f e1       	ldi	r24, 0x1F	; 31
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_Write_Channel>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e2       	ldi	r26, 0x20	; 32
    1ff0:	b1 e4       	ldi	r27, 0x41	; 65
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_vidSendData+0x17c>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_vidSendData+0x1fa>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_vidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_vidSendData+0x1dc>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_vidSendData+0x1ca>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_vidSendData+0x1be>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_vidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_vidSendData+0x206>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    20ce:	6d 96       	adiw	r28, 0x1d	; 29
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_vidWriteString>:

void LCD_vidWriteString(uint8* Stg) {
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	61 97       	sbiw	r28, 0x11	; 17
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	99 8b       	std	Y+17, r25	; 0x11
    20f6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    20f8:	1f 86       	std	Y+15, r1	; 0x0f
    20fa:	80 c0       	rjmp	.+256    	; 0x21fc <LCD_vidWriteString+0x11c>
	while (Stg[i] != '\0') {
		LCD_vidSendData(Stg[i]);
    20fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	99 89       	ldd	r25, Y+17	; 0x11
    2106:	fc 01       	movw	r30, r24
    2108:	e2 0f       	add	r30, r18
    210a:	f3 1f       	adc	r31, r19
    210c:	80 81       	ld	r24, Z
    210e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_vidSendData>
		i++;
    2112:	8f 85       	ldd	r24, Y+15	; 0x0f
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e4       	ldi	r27, 0x40	; 64
    2120:	8b 87       	std	Y+11, r24	; 0x0b
    2122:	9c 87       	std	Y+12, r25	; 0x0c
    2124:	ad 87       	std	Y+13, r26	; 0x0d
    2126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8f 83       	std	Y+7, r24	; 0x07
    2142:	98 87       	std	Y+8, r25	; 0x08
    2144:	a9 87       	std	Y+9, r26	; 0x09
    2146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <LCD_vidWriteString+0x8a>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <LCD_vidWriteString+0x108>
	else if (__tmp > 65535)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <LCD_vidWriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_vidWriteString+0xea>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_vidWriteString+0xd8>
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <LCD_vidWriteString+0xcc>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <LCD_vidWriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_vidWriteString+0x114>
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_vidWriteString(uint8* Stg) {
	uint8 i = 0;
	while (Stg[i] != '\0') {
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	88 89       	ldd	r24, Y+16	; 0x10
    2204:	99 89       	ldd	r25, Y+17	; 0x11
    2206:	fc 01       	movw	r30, r24
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	80 81       	ld	r24, Z
    220e:	88 23       	and	r24, r24
    2210:	09 f0       	breq	.+2      	; 0x2214 <LCD_vidWriteString+0x134>
    2212:	74 cf       	rjmp	.-280    	; 0x20fc <LCD_vidWriteString+0x1c>
		LCD_vidSendData(Stg[i]);
		i++;
		_delay_ms(2);
	}
}
    2214:	61 96       	adiw	r28, 0x11	; 17
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_vidGotoXY>:

void LCD_vidGotoXY(uint8 X, uint8 Y) {
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <LCD_vidGotoXY+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <LCD_vidGotoXY+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	6a 83       	std	Y+2, r22	; 0x02
	if (Y > 0 && Y <= 16) {
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	88 23       	and	r24, r24
    223a:	e1 f0       	breq	.+56     	; 0x2274 <LCD_vidGotoXY+0x4e>
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	81 31       	cpi	r24, 0x11	; 17
    2240:	c8 f4       	brcc	.+50     	; 0x2274 <LCD_vidGotoXY+0x4e>
		switch (X) {
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	3c 83       	std	Y+4, r19	; 0x04
    224a:	2b 83       	std	Y+3, r18	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	91 05       	cpc	r25, r1
    2254:	31 f0       	breq	.+12     	; 0x2262 <LCD_vidGotoXY+0x3c>
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	22 30       	cpi	r18, 0x02	; 2
    225c:	31 05       	cpc	r19, r1
    225e:	31 f0       	breq	.+12     	; 0x226c <LCD_vidGotoXY+0x46>
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <LCD_vidGotoXY+0x4e>
		case 1:
			LCD_vidSendCommand(Y + 127);
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	81 58       	subi	r24, 0x81	; 129
    2266:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <LCD_vidGotoXY+0x4e>
			break;
		case 2:
			LCD_vidSendCommand(Y + 191);
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	81 54       	subi	r24, 0x41	; 65
    2270:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
			break;
		}
	}
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_IntegerToStringPrint>:

void LCD_IntegerToStringPrint(uint8 num){
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	61 97       	sbiw	r28, 0x11	; 17
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16];
	itoa(num,buff,10);
    2298:	89 89       	ldd	r24, Y+17	; 0x11
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e 01       	movw	r18, r28
    22a0:	2f 5f       	subi	r18, 0xFF	; 255
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	b9 01       	movw	r22, r18
    22a6:	4a e0       	ldi	r20, 0x0A	; 10
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	0e 94 5f 13 	call	0x26be	; 0x26be <itoa>
	LCD_vidWriteString(buff);
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_vidWriteString>
}
    22b6:	61 96       	adiw	r28, 0x11	; 17
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <EEPROM_Init>:
#include "DIO_Confg.h"
#include "DIO.h"
#include "I2C.h"
#include "EEPROM.h"

void EEPROM_Init(void){
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
	I2C_Init();
    22d0:	0e 94 97 09 	call	0x132e	; 0x132e <I2C_Init>
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <EEPROM_Read>:

uint8 EEPROM_Read(uint16 Address, uint8 *Data){
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <EEPROM_Read+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <EEPROM_Read+0x8>
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	7c 83       	std	Y+4, r23	; 0x04
    22ee:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Start_Condition();
    22f0:	0e 94 b0 09 	call	0x1360	; 0x1360 <I2C_Start_Condition>
	if(I2C_GetStatus()!= TW_START){
    22f4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    22f8:	88 30       	cpi	r24, 0x08	; 8
    22fa:	11 f0       	breq	.+4      	; 0x2300 <EEPROM_Read+0x26>
		return 0;
    22fc:	1d 82       	std	Y+5, r1	; 0x05
    22fe:	44 c0       	rjmp	.+136    	; 0x2388 <EEPROM_Read+0xae>
	}

	I2C_Write_Data((uint8)(0xA0 | ((Address & 0x0700)>>7)));
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	80 70       	andi	r24, 0x00	; 0
    2306:	97 70       	andi	r25, 0x07	; 7
    2308:	88 0f       	add	r24, r24
    230a:	89 2f       	mov	r24, r25
    230c:	88 1f       	adc	r24, r24
    230e:	99 0b       	sbc	r25, r25
    2310:	91 95       	neg	r25
    2312:	80 6a       	ori	r24, 0xA0	; 160
    2314:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_SLA_W_ACK){
    2318:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    231c:	88 31       	cpi	r24, 0x18	; 24
    231e:	11 f0       	breq	.+4      	; 0x2324 <EEPROM_Read+0x4a>
		return 0;
    2320:	1d 82       	std	Y+5, r1	; 0x05
    2322:	32 c0       	rjmp	.+100    	; 0x2388 <EEPROM_Read+0xae>
	}
	I2C_Write_Data((uint8)(Address));
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_DATA_ACK){
    232a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    232e:	88 32       	cpi	r24, 0x28	; 40
    2330:	11 f0       	breq	.+4      	; 0x2336 <EEPROM_Read+0x5c>
			return 0;
    2332:	1d 82       	std	Y+5, r1	; 0x05
    2334:	29 c0       	rjmp	.+82     	; 0x2388 <EEPROM_Read+0xae>
	}
	I2C_Start_Condition();
    2336:	0e 94 b0 09 	call	0x1360	; 0x1360 <I2C_Start_Condition>
	if(I2C_GetStatus()!= TW_REP_START){
    233a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    233e:	80 31       	cpi	r24, 0x10	; 16
    2340:	11 f0       	breq	.+4      	; 0x2346 <EEPROM_Read+0x6c>
		return 0;
    2342:	1d 82       	std	Y+5, r1	; 0x05
    2344:	21 c0       	rjmp	.+66     	; 0x2388 <EEPROM_Read+0xae>
	}
	I2C_Write_Data((uint8)(0xA0 | ((Address & 0x0700)>>7))|1);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	80 70       	andi	r24, 0x00	; 0
    234c:	97 70       	andi	r25, 0x07	; 7
    234e:	88 0f       	add	r24, r24
    2350:	89 2f       	mov	r24, r25
    2352:	88 1f       	adc	r24, r24
    2354:	99 0b       	sbc	r25, r25
    2356:	91 95       	neg	r25
    2358:	81 6a       	ori	r24, 0xA1	; 161
    235a:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_SLA_R_ACK){
    235e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    2362:	80 34       	cpi	r24, 0x40	; 64
    2364:	11 f0       	breq	.+4      	; 0x236a <EEPROM_Read+0x90>
		return 0;
    2366:	1d 82       	std	Y+5, r1	; 0x05
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <EEPROM_Read+0xae>
	}
	*Data = I2C_Read_NACK();
    236a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <I2C_Read_NACK>
    236e:	eb 81       	ldd	r30, Y+3	; 0x03
    2370:	fc 81       	ldd	r31, Y+4	; 0x04
    2372:	80 83       	st	Z, r24
	if(I2C_GetStatus()!= TW_MR_DATA_NACK){
    2374:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    2378:	88 35       	cpi	r24, 0x58	; 88
    237a:	11 f0       	breq	.+4      	; 0x2380 <EEPROM_Read+0xa6>
		return 0;
    237c:	1d 82       	std	Y+5, r1	; 0x05
    237e:	04 c0       	rjmp	.+8      	; 0x2388 <EEPROM_Read+0xae>
	}

	I2C_Stop_Condition();
    2380:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <I2C_Stop_Condition>
	return 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	8d 81       	ldd	r24, Y+5	; 0x05

}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <EEPROM_Write>:
uint8 EEPROM_Write(uint16 Address, uint8 Data){
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <EEPROM_Write+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <EEPROM_Write+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Start_Condition();
    23ac:	0e 94 b0 09 	call	0x1360	; 0x1360 <I2C_Start_Condition>
	if(I2C_GetStatus() != TW_START){
    23b0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    23b4:	88 30       	cpi	r24, 0x08	; 8
    23b6:	11 f0       	breq	.+4      	; 0x23bc <EEPROM_Write+0x22>
		return 0;
    23b8:	1c 82       	std	Y+4, r1	; 0x04
    23ba:	28 c0       	rjmp	.+80     	; 0x240c <EEPROM_Write+0x72>
	}

	I2C_Write_Data((uint8)(0xA0 | ((Address & 0x0700)>>7)));
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	80 70       	andi	r24, 0x00	; 0
    23c2:	97 70       	andi	r25, 0x07	; 7
    23c4:	88 0f       	add	r24, r24
    23c6:	89 2f       	mov	r24, r25
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 0b       	sbc	r25, r25
    23cc:	91 95       	neg	r25
    23ce:	80 6a       	ori	r24, 0xA0	; 160
    23d0:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_SLA_W_ACK){
    23d4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    23d8:	88 31       	cpi	r24, 0x18	; 24
    23da:	11 f0       	breq	.+4      	; 0x23e0 <EEPROM_Write+0x46>
		return 0;
    23dc:	1c 82       	std	Y+4, r1	; 0x04
    23de:	16 c0       	rjmp	.+44     	; 0x240c <EEPROM_Write+0x72>
	}
	I2C_Write_Data((uint8)(Address));
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_DATA_ACK){
    23e6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    23ea:	88 32       	cpi	r24, 0x28	; 40
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <EEPROM_Write+0x58>
			return 0;
    23ee:	1c 82       	std	Y+4, r1	; 0x04
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <EEPROM_Write+0x72>
	}
	I2C_Write_Data(Data);
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_Write_Data>
	if(I2C_GetStatus()!= TW_MT_DATA_ACK){
    23f8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <I2C_GetStatus>
    23fc:	88 32       	cpi	r24, 0x28	; 40
    23fe:	11 f0       	breq	.+4      	; 0x2404 <EEPROM_Write+0x6a>
			return 0;
    2400:	1c 82       	std	Y+4, r1	; 0x04
    2402:	04 c0       	rjmp	.+8      	; 0x240c <EEPROM_Write+0x72>
	}

	I2C_Stop_Condition();
    2404:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <I2C_Stop_Condition>
	return 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	8c 83       	std	Y+4, r24	; 0x04
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <main>:
#include <avr/delay.h>
#include <avr/interrupt.h>

#define F_CPU   8000000UL  //8MHz Clock frequency

uint8 main(void) {
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	6d 97       	sbiw	r28, 0x1d	; 29
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61

	uint8 val = 0;
    2430:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_vidInit();
    2432:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_vidInit>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e2       	ldi	r26, 0x20	; 32
    243c:	b1 e4       	ldi	r27, 0x41	; 65
    243e:	89 8f       	std	Y+25, r24	; 0x19
    2440:	9a 8f       	std	Y+26, r25	; 0x1a
    2442:	ab 8f       	std	Y+27, r26	; 0x1b
    2444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	69 8d       	ldd	r22, Y+25	; 0x19
    2448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    244c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8d 8b       	std	Y+21, r24	; 0x15
    2460:	9e 8b       	std	Y+22, r25	; 0x16
    2462:	af 8b       	std	Y+23, r26	; 0x17
    2464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <main+0x6c>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 8b       	std	Y+20, r25	; 0x14
    2484:	8b 8b       	std	Y+19, r24	; 0x13
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <main+0xea>
	else if (__tmp > 65535)
    2488:	6d 89       	ldd	r22, Y+21	; 0x15
    248a:	7e 89       	ldd	r23, Y+22	; 0x16
    248c:	8f 89       	ldd	r24, Y+23	; 0x17
    248e:	98 8d       	ldd	r25, Y+24	; 0x18
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	69 8d       	ldd	r22, Y+25	; 0x19
    24a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <main+0xcc>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a 8b       	std	Y+18, r25	; 0x12
    24d0:	89 8b       	std	Y+17, r24	; 0x11
    24d2:	89 89       	ldd	r24, Y+17	; 0x11
    24d4:	9a 89       	ldd	r25, Y+18	; 0x12
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <main+0xba>
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <main+0xae>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <main+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9c 8b       	std	Y+20, r25	; 0x14
    2504:	8b 8b       	std	Y+19, r24	; 0x13
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	98 8b       	std	Y+16, r25	; 0x10
    250c:	8f 87       	std	Y+15, r24	; 0x0f
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	98 89       	ldd	r25, Y+16	; 0x10
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <main+0xf6>
    2516:	98 8b       	std	Y+16, r25	; 0x10
    2518:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vidSendCommand(lcd_CLR);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_vidSendCommand>
	EEPROM_Init();
    2520:	0e 94 64 11 	call	0x22c8	; 0x22c8 <EEPROM_Init>
	EEPROM_Write(0x0311, 0x01); /* Write 0x0F in the external EEPROM */
    2524:	81 e1       	ldi	r24, 0x11	; 17
    2526:	93 e0       	ldi	r25, 0x03	; 3
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	0e 94 cd 11 	call	0x239a	; 0x239a <EEPROM_Write>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a8 ec       	ldi	r26, 0xC8	; 200
    2534:	b2 e4       	ldi	r27, 0x42	; 66
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a ef       	ldi	r20, 0xFA	; 250
    254c:	54 e4       	ldi	r21, 0x44	; 68
    254e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <main+0x164>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <main+0x1e2>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <main+0x1c4>
    25c2:	88 ec       	ldi	r24, 0xC8	; 200
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <main+0x1b2>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <main+0x1a6>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <main+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <main+0x1ee>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	EEPROM_Read(0x0311, &val); /* Read 0x0F from the external EEPROM */
    2612:	9e 01       	movw	r18, r28
    2614:	23 5e       	subi	r18, 0xE3	; 227
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	81 e1       	ldi	r24, 0x11	; 17
    261a:	93 e0       	ldi	r25, 0x03	; 3
    261c:	b9 01       	movw	r22, r18
    261e:	0e 94 6d 11 	call	0x22da	; 0x22da <EEPROM_Read>
	while (1) {
		LCD_vidGotoXY(1, 1);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_vidGotoXY>
		LCD_vidWriteString("Samaa");
    262a:	80 e6       	ldi	r24, 0x60	; 96
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_vidWriteString>
		LCD_vidGotoXY(1, 2);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_vidGotoXY>
		LCD_IntegerToStringPrint(val);
    263a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    263c:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_IntegerToStringPrint>
		LCD_vidGotoXY(1, 3);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_vidGotoXY>
		LCD_vidSendData(val);
    2648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    264a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_vidSendData>
    264e:	e9 cf       	rjmp	.-46     	; 0x2622 <main+0x206>

00002650 <__prologue_saves__>:
    2650:	2f 92       	push	r2
    2652:	3f 92       	push	r3
    2654:	4f 92       	push	r4
    2656:	5f 92       	push	r5
    2658:	6f 92       	push	r6
    265a:	7f 92       	push	r7
    265c:	8f 92       	push	r8
    265e:	9f 92       	push	r9
    2660:	af 92       	push	r10
    2662:	bf 92       	push	r11
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	ca 1b       	sub	r28, r26
    267a:	db 0b       	sbc	r29, r27
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	09 94       	ijmp

00002688 <__epilogue_restores__>:
    2688:	2a 88       	ldd	r2, Y+18	; 0x12
    268a:	39 88       	ldd	r3, Y+17	; 0x11
    268c:	48 88       	ldd	r4, Y+16	; 0x10
    268e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2690:	6e 84       	ldd	r6, Y+14	; 0x0e
    2692:	7d 84       	ldd	r7, Y+13	; 0x0d
    2694:	8c 84       	ldd	r8, Y+12	; 0x0c
    2696:	9b 84       	ldd	r9, Y+11	; 0x0b
    2698:	aa 84       	ldd	r10, Y+10	; 0x0a
    269a:	b9 84       	ldd	r11, Y+9	; 0x09
    269c:	c8 84       	ldd	r12, Y+8	; 0x08
    269e:	df 80       	ldd	r13, Y+7	; 0x07
    26a0:	ee 80       	ldd	r14, Y+6	; 0x06
    26a2:	fd 80       	ldd	r15, Y+5	; 0x05
    26a4:	0c 81       	ldd	r16, Y+4	; 0x04
    26a6:	1b 81       	ldd	r17, Y+3	; 0x03
    26a8:	aa 81       	ldd	r26, Y+2	; 0x02
    26aa:	b9 81       	ldd	r27, Y+1	; 0x01
    26ac:	ce 0f       	add	r28, r30
    26ae:	d1 1d       	adc	r29, r1
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	ed 01       	movw	r28, r26
    26bc:	08 95       	ret

000026be <itoa>:
    26be:	fb 01       	movw	r30, r22
    26c0:	9f 01       	movw	r18, r30
    26c2:	e8 94       	clt
    26c4:	42 30       	cpi	r20, 0x02	; 2
    26c6:	c4 f0       	brlt	.+48     	; 0x26f8 <itoa+0x3a>
    26c8:	45 32       	cpi	r20, 0x25	; 37
    26ca:	b4 f4       	brge	.+44     	; 0x26f8 <itoa+0x3a>
    26cc:	4a 30       	cpi	r20, 0x0A	; 10
    26ce:	29 f4       	brne	.+10     	; 0x26da <itoa+0x1c>
    26d0:	97 fb       	bst	r25, 7
    26d2:	1e f4       	brtc	.+6      	; 0x26da <itoa+0x1c>
    26d4:	90 95       	com	r25
    26d6:	81 95       	neg	r24
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	64 2f       	mov	r22, r20
    26dc:	77 27       	eor	r23, r23
    26de:	0e 94 90 13 	call	0x2720	; 0x2720 <__udivmodhi4>
    26e2:	80 5d       	subi	r24, 0xD0	; 208
    26e4:	8a 33       	cpi	r24, 0x3A	; 58
    26e6:	0c f0       	brlt	.+2      	; 0x26ea <itoa+0x2c>
    26e8:	89 5d       	subi	r24, 0xD9	; 217
    26ea:	81 93       	st	Z+, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	a1 f7       	brne	.-24     	; 0x26da <itoa+0x1c>
    26f2:	16 f4       	brtc	.+4      	; 0x26f8 <itoa+0x3a>
    26f4:	5d e2       	ldi	r21, 0x2D	; 45
    26f6:	51 93       	st	Z+, r21
    26f8:	10 82       	st	Z, r1
    26fa:	c9 01       	movw	r24, r18
    26fc:	0c 94 80 13 	jmp	0x2700	; 0x2700 <strrev>

00002700 <strrev>:
    2700:	dc 01       	movw	r26, r24
    2702:	fc 01       	movw	r30, r24
    2704:	67 2f       	mov	r22, r23
    2706:	71 91       	ld	r23, Z+
    2708:	77 23       	and	r23, r23
    270a:	e1 f7       	brne	.-8      	; 0x2704 <strrev+0x4>
    270c:	32 97       	sbiw	r30, 0x02	; 2
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <strrev+0x18>
    2710:	7c 91       	ld	r23, X
    2712:	6d 93       	st	X+, r22
    2714:	70 83       	st	Z, r23
    2716:	62 91       	ld	r22, -Z
    2718:	ae 17       	cp	r26, r30
    271a:	bf 07       	cpc	r27, r31
    271c:	c8 f3       	brcs	.-14     	; 0x2710 <strrev+0x10>
    271e:	08 95       	ret

00002720 <__udivmodhi4>:
    2720:	aa 1b       	sub	r26, r26
    2722:	bb 1b       	sub	r27, r27
    2724:	51 e1       	ldi	r21, 0x11	; 17
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <__udivmodhi4_ep>

00002728 <__udivmodhi4_loop>:
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	a6 17       	cp	r26, r22
    272e:	b7 07       	cpc	r27, r23
    2730:	10 f0       	brcs	.+4      	; 0x2736 <__udivmodhi4_ep>
    2732:	a6 1b       	sub	r26, r22
    2734:	b7 0b       	sbc	r27, r23

00002736 <__udivmodhi4_ep>:
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	5a 95       	dec	r21
    273c:	a9 f7       	brne	.-22     	; 0x2728 <__udivmodhi4_loop>
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	08 95       	ret

00002748 <_exit>:
    2748:	f8 94       	cli

0000274a <__stop_program>:
    274a:	ff cf       	rjmp	.-2      	; 0x274a <__stop_program>
