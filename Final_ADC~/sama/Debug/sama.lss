
sama.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800098  00800098  00000766  2**0
                  ALLOC
  3 .stab         00000bc4  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b68  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 02 	call	0x520	; 0x520 <main>
  8a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include "MEMMAP.h"
#include "DIO_Confg.h"
#include "DIO.h"
#include "ADC.h"

void ADC_INIT(void) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

	//Enable the Vref
	SET_BIT(ADMUX, CH6);
  9a:	a7 e2       	ldi	r26, 0x27	; 39
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e7 e2       	ldi	r30, 0x27	; 39
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, CH7);
  a8:	a7 e2       	ldi	r26, 0x27	; 39
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e7 e2       	ldi	r30, 0x27	; 39
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	8c 93       	st	X, r24

	// ADC Pre-scaler
	SET_BIT(ADCSRA, CH0);
  b6:	a6 e2       	ldi	r26, 0x26	; 38
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e6 e2       	ldi	r30, 0x26	; 38
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, CH1);
  c4:	a6 e2       	ldi	r26, 0x26	; 38
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e6 e2       	ldi	r30, 0x26	; 38
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, CH2);
  d2:	a6 e2       	ldi	r26, 0x26	; 38
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e2       	ldi	r30, 0x26	; 38
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8c 93       	st	X, r24

	// Enable ADC
	SET_BIT(ADCSRA, CH7);
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e2       	ldi	r30, 0x26	; 38
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8c 93       	st	X, r24

	// Enable ADC Interrupt
	SET_BIT(ADCSRA, CH3);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	8c 93       	st	X, r24

	// Enable Global Interrupt
	SET_BIT(SREG,CH7);
  fc:	af e5       	ldi	r26, 0x5F	; 95
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	ef e5       	ldi	r30, 0x5F	; 95
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	9c 93       	st	X, r25
 10e:	8e 93       	st	-X, r24
	ADMUX &= 0xf0;
 110:	a7 e2       	ldi	r26, 0x27	; 39
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e7 e2       	ldi	r30, 0x27	; 39
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	8c 93       	st	X, r24
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <ADC_StartConversion>:

void ADC_StartConversion(void) {
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62

	//Start Conversion
	SET_BIT(ADCSRA, CH6);
 12c:	a6 e2       	ldi	r26, 0x26	; 38
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e6 e2       	ldi	r30, 0x26	; 38
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	8c 93       	st	X, r24
}
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <ADC_Read>:

uint16 ADC_Read(void) {
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	return ADC;
 148:	e4 e2       	ldi	r30, 0x24	; 36
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	91 81       	ldd	r25, Z+1	; 0x01
}
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	08 95       	ret

00000156 <DIO_INIT>:

uint8 *REG_ARR[12] = { DDRA_Address, DDRB_Address, DDRC_Address, DDRD_Address,
PORTA_Address, PORTB_Address, PORTC_Address, PORTD_Address,
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	00 d0       	rcall	.+0      	; 0x15c <DIO_INIT+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <DIO_INIT+0x8>
 15e:	00 d0       	rcall	.+0      	; 0x160 <DIO_INIT+0xa>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
 164:	19 82       	std	Y+1, r1	; 0x01
 166:	bd c0       	rjmp	.+378    	; 0x2e2 <DIO_INIT+0x18c>
		PIN_STATE = DIO_PIN_CONFG[i];
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	e8 58       	subi	r30, 0x88	; 136
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	8c 83       	std	Y+4, r24	; 0x04
		PIN_VALUE = i % 8;
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	87 70       	andi	r24, 0x07	; 7
 17c:	8b 83       	std	Y+3, r24	; 0x03
		PORT_STATE = i / 8;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	86 95       	lsr	r24
 186:	8a 83       	std	Y+2, r24	; 0x02
		switch (PIN_STATE) {
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	3e 83       	std	Y+6, r19	; 0x06
 190:	2d 83       	std	Y+5, r18	; 0x05
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	9e 81       	ldd	r25, Y+6	; 0x06
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 05       	cpc	r25, r1
 19a:	81 f1       	breq	.+96     	; 0x1fc <DIO_INIT+0xa6>
 19c:	2d 81       	ldd	r18, Y+5	; 0x05
 19e:	3e 81       	ldd	r19, Y+6	; 0x06
 1a0:	22 30       	cpi	r18, 0x02	; 2
 1a2:	31 05       	cpc	r19, r1
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_INIT+0x52>
 1a6:	75 c0       	rjmp	.+234    	; 0x292 <DIO_INIT+0x13c>
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <DIO_INIT+0x5c>
 1b0:	95 c0       	rjmp	.+298    	; 0x2dc <DIO_INIT+0x186>
		case OUTPUT:
			SET_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	fc 01       	movw	r30, r24
 1be:	e0 5a       	subi	r30, 0xA0	; 160
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	a0 81       	ld	r26, Z
 1c4:	b1 81       	ldd	r27, Z+1	; 0x01
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	88 2f       	mov	r24, r24
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	fc 01       	movw	r30, r24
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	01 90       	ld	r0, Z+
 1d8:	f0 81       	ld	r31, Z
 1da:	e0 2d       	mov	r30, r0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_INIT+0x9c>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_INIT+0x98>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	70 c0       	rjmp	.+224    	; 0x2dc <DIO_INIT+0x186>
			break;
		case INPUT_PULLUP:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	fc 01       	movw	r30, r24
 208:	e0 5a       	subi	r30, 0xA0	; 160
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	a0 81       	ld	r26, Z
 20e:	b1 81       	ldd	r27, Z+1	; 0x01
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	fc 01       	movw	r30, r24
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	01 90       	ld	r0, Z+
 222:	f0 81       	ld	r31, Z
 224:	e0 2d       	mov	r30, r0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_INIT+0xe4>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	2a 95       	dec	r18
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_INIT+0xe0>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
			SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_VALUE);
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	04 96       	adiw	r24, 0x04	; 4
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	fc 01       	movw	r30, r24
 252:	e0 5a       	subi	r30, 0xA0	; 160
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	a0 81       	ld	r26, Z
 258:	b1 81       	ldd	r27, Z+1	; 0x01
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	04 96       	adiw	r24, 0x04	; 4
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	fc 01       	movw	r30, r24
 268:	e0 5a       	subi	r30, 0xA0	; 160
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	01 90       	ld	r0, Z+
 26e:	f0 81       	ld	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_INIT+0x132>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_INIT+0x12e>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	25 c0       	rjmp	.+74     	; 0x2dc <DIO_INIT+0x186>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	a0 81       	ld	r26, Z
 2a4:	b1 81       	ldd	r27, Z+1	; 0x01
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	fc 01       	movw	r30, r24
 2b2:	e0 5a       	subi	r30, 0xA0	; 160
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	01 90       	ld	r0, Z+
 2b8:	f0 81       	ld	r31, Z
 2ba:	e0 2d       	mov	r30, r0
 2bc:	80 81       	ld	r24, Z
 2be:	48 2f       	mov	r20, r24
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_INIT+0x17c>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_INIT+0x178>
 2d6:	80 95       	com	r24
 2d8:	84 23       	and	r24, r20
 2da:	8c 93       	st	X, r24
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	80 32       	cpi	r24, 0x20	; 32
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <DIO_INIT+0x194>
 2e8:	3f cf       	rjmp	.-386    	; 0x168 <DIO_INIT+0x12>
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
			break;
		}
	}
}
 2ea:	26 96       	adiw	r28, 0x06	; 6
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <DIO_Write_Channel>:


void DIO_Write_Channel(uint8 CHANNEL, uint8 LEVEL) {
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_Write_Channel+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_Write_Channel+0x8>
 304:	00 d0       	rcall	.+0      	; 0x306 <DIO_Write_Channel+0xa>
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	8b 83       	std	Y+3, r24	; 0x03
 30c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 PIN_STATE = CHANNEL % 8;
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	87 70       	andi	r24, 0x07	; 7
 312:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_STATE = CHANNEL / 8;
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	86 95       	lsr	r24
 318:	86 95       	lsr	r24
 31a:	86 95       	lsr	r24
 31c:	89 83       	std	Y+1, r24	; 0x01
	switch (LEVEL) {
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	3e 83       	std	Y+6, r19	; 0x06
 326:	2d 83       	std	Y+5, r18	; 0x05
 328:	8d 81       	ldd	r24, Y+5	; 0x05
 32a:	9e 81       	ldd	r25, Y+6	; 0x06
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	69 f1       	breq	.+90     	; 0x38a <DIO_Write_Channel+0x8e>
 330:	2d 81       	ldd	r18, Y+5	; 0x05
 332:	3e 81       	ldd	r19, Y+6	; 0x06
 334:	21 30       	cpi	r18, 0x01	; 1
 336:	31 05       	cpc	r19, r1
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_Write_Channel+0x40>
 33a:	4e c0       	rjmp	.+156    	; 0x3d8 <DIO_Write_Channel+0xdc>
	case HIGH:
		SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	88 2f       	mov	r24, r24
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	04 96       	adiw	r24, 0x04	; 4
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	fc 01       	movw	r30, r24
 34a:	e0 5a       	subi	r30, 0xA0	; 160
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	a0 81       	ld	r26, Z
 350:	b1 81       	ldd	r27, Z+1	; 0x01
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	04 96       	adiw	r24, 0x04	; 4
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	fc 01       	movw	r30, r24
 360:	e0 5a       	subi	r30, 0xA0	; 160
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	01 90       	ld	r0, Z+
 366:	f0 81       	ld	r31, Z
 368:	e0 2d       	mov	r30, r0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_Write_Channel+0x84>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_Write_Channel+0x80>
 384:	84 2b       	or	r24, r20
 386:	8c 93       	st	X, r24
 388:	27 c0       	rjmp	.+78     	; 0x3d8 <DIO_Write_Channel+0xdc>
		break;
	case LOW:
		CLR_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	88 2f       	mov	r24, r24
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	04 96       	adiw	r24, 0x04	; 4
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	fc 01       	movw	r30, r24
 398:	e0 5a       	subi	r30, 0xA0	; 160
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	a0 81       	ld	r26, Z
 39e:	b1 81       	ldd	r27, Z+1	; 0x01
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	04 96       	adiw	r24, 0x04	; 4
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	fc 01       	movw	r30, r24
 3ae:	e0 5a       	subi	r30, 0xA0	; 160
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	01 90       	ld	r0, Z+
 3b4:	f0 81       	ld	r31, Z
 3b6:	e0 2d       	mov	r30, r0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_Write_Channel+0xd2>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_Write_Channel+0xce>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
		break;
	}
}
 3d8:	26 96       	adiw	r28, 0x06	; 6
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	cf 91       	pop	r28
 3e6:	df 91       	pop	r29
 3e8:	08 95       	ret

000003ea <DIO_Write_Port>:

void DIO_Write_Port(uint8 PORT, uint8 VALUE) {
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <DIO_Write_Port+0x6>
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	6a 83       	std	Y+2, r22	; 0x02

	*REG_ARR[PORT + 4] = VALUE;
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	88 2f       	mov	r24, r24
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	04 96       	adiw	r24, 0x04	; 4
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	fc 01       	movw	r30, r24
 406:	e0 5a       	subi	r30, 0xA0	; 160
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	01 90       	ld	r0, Z+
 40c:	f0 81       	ld	r31, Z
 40e:	e0 2d       	mov	r30, r0
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	80 83       	st	Z, r24
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	08 95       	ret

0000041e <DIO_Read_Channel>:

uint8 DIO_Read_Channel(uint8 CHANNEL) {
 41e:	df 93       	push	r29
 420:	cf 93       	push	r28
 422:	00 d0       	rcall	.+0      	; 0x424 <DIO_Read_Channel+0x6>
 424:	00 d0       	rcall	.+0      	; 0x426 <DIO_Read_Channel+0x8>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	8c 83       	std	Y+4, r24	; 0x04
	uint8 PIN_STATE, val;
	uint8 PORT_STATE;

	PIN_STATE = CHANNEL % 8;
 42c:	8c 81       	ldd	r24, Y+4	; 0x04
 42e:	87 70       	andi	r24, 0x07	; 7
 430:	8b 83       	std	Y+3, r24	; 0x03
	PORT_STATE = CHANNEL / 8;
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	86 95       	lsr	r24
 436:	86 95       	lsr	r24
 438:	86 95       	lsr	r24
 43a:	89 83       	std	Y+1, r24	; 0x01
	val = GET_BIT(*REG_ARR[PORT_STATE + 8], PIN_STATE);
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	08 96       	adiw	r24, 0x08	; 8
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	fc 01       	movw	r30, r24
 44a:	e0 5a       	subi	r30, 0xA0	; 160
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	01 90       	ld	r0, Z+
 450:	f0 81       	ld	r31, Z
 452:	e0 2d       	mov	r30, r0
 454:	80 81       	ld	r24, Z
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	88 2f       	mov	r24, r24
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	a9 01       	movw	r20, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_Read_Channel+0x4a>
 464:	55 95       	asr	r21
 466:	47 95       	ror	r20
 468:	8a 95       	dec	r24
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_Read_Channel+0x46>
 46c:	ca 01       	movw	r24, r20
 46e:	81 70       	andi	r24, 0x01	; 1
 470:	8a 83       	std	Y+2, r24	; 0x02


	return val;
 472:	8a 81       	ldd	r24, Y+2	; 0x02
}
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	08 95       	ret

00000482 <DIO_Read_Port>:

uint8 DIO_Read_Port(uint8 PORT) {
 482:	df 93       	push	r29
 484:	cf 93       	push	r28
 486:	00 d0       	rcall	.+0      	; 0x488 <DIO_Read_Port+0x6>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val;
	val = *REG_ARR[PORT + 8];
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	88 2f       	mov	r24, r24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 96       	adiw	r24, 0x08	; 8
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	fc 01       	movw	r30, r24
 49c:	e0 5a       	subi	r30, 0xA0	; 160
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	01 90       	ld	r0, Z+
 4a2:	f0 81       	ld	r31, Z
 4a4:	e0 2d       	mov	r30, r0
 4a6:	80 81       	ld	r24, Z
 4a8:	89 83       	std	Y+1, r24	; 0x01
	return val;
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	cf 91       	pop	r28
 4b2:	df 91       	pop	r29
 4b4:	08 95       	ret

000004b6 <__vector_16>:
#include "ADC.h"


volatile uint32 Global_ADC;

ISR( __vector_16) {
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
	Global_ADC = ADC_Read();
 4e0:	0e 94 a0 00 	call	0x140	; 0x140 <ADC_Read>
 4e4:	cc 01       	movw	r24, r24
 4e6:	a0 e0       	ldi	r26, 0x00	; 0
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	80 93 98 00 	sts	0x0098, r24
 4ee:	90 93 99 00 	sts	0x0099, r25
 4f2:	a0 93 9a 00 	sts	0x009A, r26
 4f6:	b0 93 9b 00 	sts	0x009B, r27
}
 4fa:	cf 91       	pop	r28
 4fc:	df 91       	pop	r29
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <main>:

uint8 main() {
 520:	df 93       	push	r29
 522:	cf 93       	push	r28
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	28 97       	sbiw	r28, 0x08	; 8
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
	DIO_INIT();
 534:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_INIT>
	ADC_INIT();
 538:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
	DIO_Write_Channel(LED1, HIGH);
 53c:	88 e0       	ldi	r24, 0x08	; 8
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
	while (1) {
		ADC_StartConversion();
 544:	0e 94 92 00 	call	0x124	; 0x124 <ADC_StartConversion>
		volatile uint32 Analog = ((uint32)(1000 *(Global_ADC * Vref))) / 1024;
 548:	80 91 98 00 	lds	r24, 0x0098
 54c:	90 91 99 00 	lds	r25, 0x0099
 550:	a0 91 9a 00 	lds	r26, 0x009A
 554:	b0 91 9b 00 	lds	r27, 0x009B
 558:	28 e8       	ldi	r18, 0x88	; 136
 55a:	33 e1       	ldi	r19, 0x13	; 19
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	bc 01       	movw	r22, r24
 562:	cd 01       	movw	r24, r26
 564:	0e 94 2c 03 	call	0x658	; 0x658 <__mulsi3>
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	07 2e       	mov	r0, r23
 56e:	7a e0       	ldi	r23, 0x0A	; 10
 570:	b6 95       	lsr	r27
 572:	a7 95       	ror	r26
 574:	97 95       	ror	r25
 576:	87 95       	ror	r24
 578:	7a 95       	dec	r23
 57a:	d1 f7       	brne	.-12     	; 0x570 <main+0x50>
 57c:	70 2d       	mov	r23, r0
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	9a 83       	std	Y+2, r25	; 0x02
 582:	ab 83       	std	Y+3, r26	; 0x03
 584:	bc 83       	std	Y+4, r27	; 0x04

		if (Analog >= 0 && Analog <= 1500) {
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	9a 81       	ldd	r25, Y+2	; 0x02
 58a:	ab 81       	ldd	r26, Y+3	; 0x03
 58c:	bc 81       	ldd	r27, Y+4	; 0x04
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
 592:	ab 81       	ldd	r26, Y+3	; 0x03
 594:	bc 81       	ldd	r27, Y+4	; 0x04
 596:	8d 3d       	cpi	r24, 0xDD	; 221
 598:	25 e0       	ldi	r18, 0x05	; 5
 59a:	92 07       	cpc	r25, r18
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	a2 07       	cpc	r26, r18
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	b2 07       	cpc	r27, r18
 5a4:	68 f4       	brcc	.+26     	; 0x5c0 <main+0xa0>
			DIO_Write_Channel(LED1, HIGH);
 5a6:	88 e0       	ldi	r24, 0x08	; 8
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED2, LOW);
 5ae:	89 e0       	ldi	r24, 0x09	; 9
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED3, LOW);
 5b6:	8a e0       	ldi	r24, 0x0A	; 10
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
 5be:	c2 cf       	rjmp	.-124    	; 0x544 <main+0x24>
		} else if (Analog > 1500 && Analog <= 3000) {
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	9a 81       	ldd	r25, Y+2	; 0x02
 5c4:	ab 81       	ldd	r26, Y+3	; 0x03
 5c6:	bc 81       	ldd	r27, Y+4	; 0x04
 5c8:	8d 3d       	cpi	r24, 0xDD	; 221
 5ca:	25 e0       	ldi	r18, 0x05	; 5
 5cc:	92 07       	cpc	r25, r18
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	a2 07       	cpc	r26, r18
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	b2 07       	cpc	r27, r18
 5d6:	c8 f0       	brcs	.+50     	; 0x60a <main+0xea>
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	ab 81       	ldd	r26, Y+3	; 0x03
 5de:	bc 81       	ldd	r27, Y+4	; 0x04
 5e0:	89 3b       	cpi	r24, 0xB9	; 185
 5e2:	2b e0       	ldi	r18, 0x0B	; 11
 5e4:	92 07       	cpc	r25, r18
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	a2 07       	cpc	r26, r18
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	b2 07       	cpc	r27, r18
 5ee:	68 f4       	brcc	.+26     	; 0x60a <main+0xea>
			DIO_Write_Channel(LED1, LOW);
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED2, HIGH);
 5f8:	89 e0       	ldi	r24, 0x09	; 9
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED3, LOW);
 600:	8a e0       	ldi	r24, 0x0A	; 10
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
 608:	9d cf       	rjmp	.-198    	; 0x544 <main+0x24>
		} else if (Analog > 3000 && Analog <= 5000) {
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	9a 81       	ldd	r25, Y+2	; 0x02
 60e:	ab 81       	ldd	r26, Y+3	; 0x03
 610:	bc 81       	ldd	r27, Y+4	; 0x04
 612:	89 3b       	cpi	r24, 0xB9	; 185
 614:	2b e0       	ldi	r18, 0x0B	; 11
 616:	92 07       	cpc	r25, r18
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	a2 07       	cpc	r26, r18
 61c:	20 e0       	ldi	r18, 0x00	; 0
 61e:	b2 07       	cpc	r27, r18
 620:	08 f4       	brcc	.+2      	; 0x624 <main+0x104>
 622:	90 cf       	rjmp	.-224    	; 0x544 <main+0x24>
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	ab 81       	ldd	r26, Y+3	; 0x03
 62a:	bc 81       	ldd	r27, Y+4	; 0x04
 62c:	89 38       	cpi	r24, 0x89	; 137
 62e:	23 e1       	ldi	r18, 0x13	; 19
 630:	92 07       	cpc	r25, r18
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	a2 07       	cpc	r26, r18
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	b2 07       	cpc	r27, r18
 63a:	08 f0       	brcs	.+2      	; 0x63e <main+0x11e>
 63c:	83 cf       	rjmp	.-250    	; 0x544 <main+0x24>
			DIO_Write_Channel(LED1, LOW);
 63e:	88 e0       	ldi	r24, 0x08	; 8
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED2, LOW);
 646:	89 e0       	ldi	r24, 0x09	; 9
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
			DIO_Write_Channel(LED3, HIGH);
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_Write_Channel>
 656:	76 cf       	rjmp	.-276    	; 0x544 <main+0x24>

00000658 <__mulsi3>:
 658:	62 9f       	mul	r22, r18
 65a:	d0 01       	movw	r26, r0
 65c:	73 9f       	mul	r23, r19
 65e:	f0 01       	movw	r30, r0
 660:	82 9f       	mul	r24, r18
 662:	e0 0d       	add	r30, r0
 664:	f1 1d       	adc	r31, r1
 666:	64 9f       	mul	r22, r20
 668:	e0 0d       	add	r30, r0
 66a:	f1 1d       	adc	r31, r1
 66c:	92 9f       	mul	r25, r18
 66e:	f0 0d       	add	r31, r0
 670:	83 9f       	mul	r24, r19
 672:	f0 0d       	add	r31, r0
 674:	74 9f       	mul	r23, r20
 676:	f0 0d       	add	r31, r0
 678:	65 9f       	mul	r22, r21
 67a:	f0 0d       	add	r31, r0
 67c:	99 27       	eor	r25, r25
 67e:	72 9f       	mul	r23, r18
 680:	b0 0d       	add	r27, r0
 682:	e1 1d       	adc	r30, r1
 684:	f9 1f       	adc	r31, r25
 686:	63 9f       	mul	r22, r19
 688:	b0 0d       	add	r27, r0
 68a:	e1 1d       	adc	r30, r1
 68c:	f9 1f       	adc	r31, r25
 68e:	bd 01       	movw	r22, r26
 690:	cf 01       	movw	r24, r30
 692:	11 24       	eor	r1, r1
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
