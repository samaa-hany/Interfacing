
UART_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000aaa  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a4  008000a4  00000b82  2**0
                  ALLOC
  3 .stab         000012e4  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001001  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
  8a:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_INIT>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <UART_INIT+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	e9 e2       	ldi	r30, 0x29	; 41
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	80 83       	st	Z, r24
  a8:	aa e2       	ldi	r26, 0x2A	; 42
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ea e2       	ldi	r30, 0x2A	; 42
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	8c 93       	st	X, r24
  b6:	aa e2       	ldi	r26, 0x2A	; 42
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ea e2       	ldi	r30, 0x2A	; 42
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8c 93       	st	X, r24
  c4:	a0 e4       	ldi	r26, 0x40	; 64
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e0 e4       	ldi	r30, 0x40	; 64
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	8c 93       	st	X, r24
  d2:	a0 e4       	ldi	r26, 0x40	; 64
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e0 e4       	ldi	r30, 0x40	; 64
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	8c 93       	st	X, r24
  e0:	aa e2       	ldi	r26, 0x2A	; 42
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e2       	ldi	r30, 0x2A	; 42
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8c 93       	st	X, r24
  ee:	af e5       	ldi	r26, 0x5F	; 95
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	ef e5       	ldi	r30, 0x5F	; 95
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	91 81       	ldd	r25, Z+1	; 0x01
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	11 96       	adiw	r26, 0x01	; 1
  fe:	9c 93       	st	X, r25
 100:	8e 93       	st	-X, r24
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <UART_Send_Char>:
	/*Enable Interrupt & Global Interrupt*/
	SET_BIT(UCSRB, Uart7);
	SET_BIT(SREG, Uart7);
}

void UART_Send_Char(uint8 data) {
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	0f 92       	push	r0
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit (UDRE)*/
	while (!( UCSRA & (1 << Uart5)))
 118:	eb e2       	ldi	r30, 0x2B	; 43
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	80 72       	andi	r24, 0x20	; 32
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	b9 f3       	breq	.-18     	; 0x118 <UART_Send_Char+0xc>
		;

	/* Sends the data */
	UDR = data;
 12a:	ec e2       	ldi	r30, 0x2C	; 44
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	80 83       	st	Z, r24
}
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <UART_Send_String>:

void UART_Send_String(uint8* data, uint8 Length) {
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	00 d0       	rcall	.+0      	; 0x140 <UART_Send_String+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <UART_Send_String+0x8>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	8a 83       	std	Y+2, r24	; 0x02
 14a:	6c 83       	std	Y+4, r22	; 0x04
	/* Sends the array of chars*/
	uint8 iteration = 0;
 14c:	19 82       	std	Y+1, r1	; 0x01
	for (iteration = 0; iteration <= Length; iteration++) {
 14e:	19 82       	std	Y+1, r1	; 0x01
 150:	32 c0       	rjmp	.+100    	; 0x1b6 <UART_Send_String+0x7c>
		if (data[iteration] != '0') {
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	9b 81       	ldd	r25, Y+3	; 0x03
 15c:	fc 01       	movw	r30, r24
 15e:	e2 0f       	add	r30, r18
 160:	f3 1f       	adc	r31, r19
 162:	80 81       	ld	r24, Z
 164:	80 33       	cpi	r24, 0x30	; 48
 166:	61 f0       	breq	.+24     	; 0x180 <UART_Send_String+0x46>
			UART_Send_Char(data[iteration]);
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	9b 81       	ldd	r25, Y+3	; 0x03
 172:	fc 01       	movw	r30, r24
 174:	e2 0f       	add	r30, r18
 176:	f3 1f       	adc	r31, r19
 178:	80 81       	ld	r24, Z
 17a:	0e 94 86 00 	call	0x10c	; 0x10c <UART_Send_Char>
 17e:	18 c0       	rjmp	.+48     	; 0x1b0 <UART_Send_String+0x76>
		} else if (data[iteration] == '0') {
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	9b 81       	ldd	r25, Y+3	; 0x03
 18a:	fc 01       	movw	r30, r24
 18c:	e2 0f       	add	r30, r18
 18e:	f3 1f       	adc	r31, r19
 190:	80 81       	ld	r24, Z
 192:	80 33       	cpi	r24, 0x30	; 48
 194:	69 f4       	brne	.+26     	; 0x1b0 <UART_Send_String+0x76>
			UART_Send_Char(data[iteration]);
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	fc 01       	movw	r30, r24
 1a2:	e2 0f       	add	r30, r18
 1a4:	f3 1f       	adc	r31, r19
 1a6:	80 81       	ld	r24, Z
 1a8:	0e 94 86 00 	call	0x10c	; 0x10c <UART_Send_Char>
			Length = iteration;
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	8c 83       	std	Y+4, r24	; 0x04
}

void UART_Send_String(uint8* data, uint8 Length) {
	/* Sends the array of chars*/
	uint8 iteration = 0;
	for (iteration = 0; iteration <= Length; iteration++) {
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	99 81       	ldd	r25, Y+1	; 0x01
 1b8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ba:	89 17       	cp	r24, r25
 1bc:	50 f6       	brcc	.-108    	; 0x152 <UART_Send_String+0x18>
		} else if (data[iteration] == '0') {
			UART_Send_Char(data[iteration]);
			Length = iteration;
		}
	}
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <UART_Receiver_Char>:

uint8 UART_Receiver_Char(void) {
 1cc:	df 93       	push	r29
 1ce:	cf 93       	push	r28
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received (RXC)*/
	while (!(UCSRA & (1 << Uart7)))
 1d4:	eb e2       	ldi	r30, 0x2B	; 43
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	dc f7       	brge	.-10     	; 0x1d4 <UART_Receiver_Char+0x8>
		;

	/* Get and return received data */
	return UDR;
 1de:	ec e2       	ldi	r30, 0x2C	; 44
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
}
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <UART_Receiver_With_Interrupt>:

uint8 UART_Receiver_With_Interrupt(void) {
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62

	/* Get and return received data */
	return UDR;
 1f2:	ec e2       	ldi	r30, 0x2C	; 44
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
}
 1f8:	cf 91       	pop	r28
 1fa:	df 91       	pop	r29
 1fc:	08 95       	ret

000001fe <TIMER_Set_Prescaler>:
#include "DIO_Confg.h"
#include "DIO.h"
#include "Timer.h"


void TIMER_Set_Prescaler(const TIMER_Prescaler PRESCALER) {
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	0f 92       	push	r0
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= PRESCALER;
 20a:	a3 e5       	ldi	r26, 0x53	; 83
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e3 e5       	ldi	r30, 0x53	; 83
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	89 2b       	or	r24, r25
 218:	8c 93       	st	X, r24
}
 21a:	0f 90       	pop	r0
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <TIMER_MODE>:

void TIMER_MODE(const TIMER_Mode MODE) {
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	00 d0       	rcall	.+0      	; 0x228 <TIMER_MODE+0x6>
 228:	0f 92       	push	r0
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	3b 83       	std	Y+3, r19	; 0x03
 238:	2a 83       	std	Y+2, r18	; 0x02
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	91 05       	cpc	r25, r1
 242:	21 f1       	breq	.+72     	; 0x28c <TIMER_MODE+0x6a>
 244:	2a 81       	ldd	r18, Y+2	; 0x02
 246:	3b 81       	ldd	r19, Y+3	; 0x03
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	31 05       	cpc	r19, r1
 24c:	2c f4       	brge	.+10     	; 0x258 <TIMER_MODE+0x36>
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	9b 81       	ldd	r25, Y+3	; 0x03
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	61 f0       	breq	.+24     	; 0x26e <TIMER_MODE+0x4c>
 256:	46 c0       	rjmp	.+140    	; 0x2e4 <TIMER_MODE+0xc2>
 258:	2a 81       	ldd	r18, Y+2	; 0x02
 25a:	3b 81       	ldd	r19, Y+3	; 0x03
 25c:	22 30       	cpi	r18, 0x02	; 2
 25e:	31 05       	cpc	r19, r1
 260:	21 f1       	breq	.+72     	; 0x2aa <TIMER_MODE+0x88>
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	9b 81       	ldd	r25, Y+3	; 0x03
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	91 05       	cpc	r25, r1
 26a:	71 f1       	breq	.+92     	; 0x2c8 <TIMER_MODE+0xa6>
 26c:	3b c0       	rjmp	.+118    	; 0x2e4 <TIMER_MODE+0xc2>
	case T_NORMAL:
		CLR_BIT(TCCR0, T3);
 26e:	a3 e5       	ldi	r26, 0x53	; 83
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e3 e5       	ldi	r30, 0x53	; 83
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	87 7f       	andi	r24, 0xF7	; 247
 27a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, T6);
 27c:	a3 e5       	ldi	r26, 0x53	; 83
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e3 e5       	ldi	r30, 0x53	; 83
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8f 7b       	andi	r24, 0xBF	; 191
 288:	8c 93       	st	X, r24
 28a:	2c c0       	rjmp	.+88     	; 0x2e4 <TIMER_MODE+0xc2>
		break;
	case T_PWM:
		CLR_BIT(TCCR0, T3);
 28c:	a3 e5       	ldi	r26, 0x53	; 83
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e3 e5       	ldi	r30, 0x53	; 83
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	87 7f       	andi	r24, 0xF7	; 247
 298:	8c 93       	st	X, r24
		SET_BIT(TCCR0, T6);
 29a:	a3 e5       	ldi	r26, 0x53	; 83
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	e3 e5       	ldi	r30, 0x53	; 83
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	8c 93       	st	X, r24
 2a8:	1d c0       	rjmp	.+58     	; 0x2e4 <TIMER_MODE+0xc2>
		break;
	case T_CTC:
		SET_BIT(TCCR0, T3);
 2aa:	a3 e5       	ldi	r26, 0x53	; 83
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	e3 e5       	ldi	r30, 0x53	; 83
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, T6);
 2b8:	a3 e5       	ldi	r26, 0x53	; 83
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e3 e5       	ldi	r30, 0x53	; 83
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	8f 7b       	andi	r24, 0xBF	; 191
 2c4:	8c 93       	st	X, r24
 2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <TIMER_MODE+0xc2>
		break;
	case T_FAST_PWM:
		SET_BIT(TCCR0, T3);
 2c8:	a3 e5       	ldi	r26, 0x53	; 83
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e3 e5       	ldi	r30, 0x53	; 83
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, T6);
 2d6:	a3 e5       	ldi	r26, 0x53	; 83
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e3 e5       	ldi	r30, 0x53	; 83
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	8c 93       	st	X, r24
		break;
	}
}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <TIMER_INIT>:
void TIMER_INIT(void) {
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
 2f8:	e2 e5       	ldi	r30, 0x52	; 82
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	10 82       	st	Z, r1
	OCR0 = 0;
 2fe:	ec e5       	ldi	r30, 0x5C	; 92
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
}
 304:	cf 91       	pop	r28
 306:	df 91       	pop	r29
 308:	08 95       	ret

0000030a <TIMER_INT>:
void TIMER_INT(const TIMER_EN_INT INT) {
 30a:	df 93       	push	r29
 30c:	cf 93       	push	r28
 30e:	00 d0       	rcall	.+0      	; 0x310 <TIMER_INT+0x6>
 310:	0f 92       	push	r0
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	89 83       	std	Y+1, r24	; 0x01
	switch (INT) {
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	3b 83       	std	Y+3, r19	; 0x03
 320:	2a 83       	std	Y+2, r18	; 0x02
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	9b 81       	ldd	r25, Y+3	; 0x03
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	91 05       	cpc	r25, r1
 32a:	e9 f0       	breq	.+58     	; 0x366 <TIMER_INT+0x5c>
 32c:	2a 81       	ldd	r18, Y+2	; 0x02
 32e:	3b 81       	ldd	r19, Y+3	; 0x03
 330:	22 30       	cpi	r18, 0x02	; 2
 332:	31 05       	cpc	r19, r1
 334:	2c f4       	brge	.+10     	; 0x340 <TIMER_INT+0x36>
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	9b 81       	ldd	r25, Y+3	; 0x03
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	61 f0       	breq	.+24     	; 0x356 <TIMER_INT+0x4c>
 33e:	2a c0       	rjmp	.+84     	; 0x394 <TIMER_INT+0x8a>
 340:	2a 81       	ldd	r18, Y+2	; 0x02
 342:	3b 81       	ldd	r19, Y+3	; 0x03
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	b1 f0       	breq	.+44     	; 0x376 <TIMER_INT+0x6c>
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	9b 81       	ldd	r25, Y+3	; 0x03
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	91 05       	cpc	r25, r1
 352:	c9 f0       	breq	.+50     	; 0x386 <TIMER_INT+0x7c>
 354:	1f c0       	rjmp	.+62     	; 0x394 <TIMER_INT+0x8a>
	case T_OV_INT_ENABLE:
		SET_BIT(TIMSK, 0);
 356:	a9 e5       	ldi	r26, 0x59	; 89
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e9 e5       	ldi	r30, 0x59	; 89
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	81 60       	ori	r24, 0x01	; 1
 362:	8c 93       	st	X, r24
 364:	17 c0       	rjmp	.+46     	; 0x394 <TIMER_INT+0x8a>
		break;
	case T_OV_INT_DISABLE:
		CLR_BIT(TIMSK, 0);
 366:	a9 e5       	ldi	r26, 0x59	; 89
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e9 e5       	ldi	r30, 0x59	; 89
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	8c 93       	st	X, r24
 374:	0f c0       	rjmp	.+30     	; 0x394 <TIMER_INT+0x8a>
		break;
	case T_OC_INT_ENABLE:
		SET_BIT(TIMSK, 1);
 376:	a9 e5       	ldi	r26, 0x59	; 89
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e9 e5       	ldi	r30, 0x59	; 89
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	82 60       	ori	r24, 0x02	; 2
 382:	8c 93       	st	X, r24
 384:	07 c0       	rjmp	.+14     	; 0x394 <TIMER_INT+0x8a>
		break;
	case T_OC_INT_DISABLE:
		CLR_BIT(TIMSK, 1);
 386:	a9 e5       	ldi	r26, 0x59	; 89
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e9 e5       	ldi	r30, 0x59	; 89
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	8d 7f       	andi	r24, 0xFD	; 253
 392:	8c 93       	st	X, r24
		break;
	}
}
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <EXTI_INIT>:
#include "MEMMAP.h"
#include "DIO_Confg.h"
#include "DIO.h"
#include "Interrupt.h"

void EXTI_INIT(const SRC_EXTI_INT EXINT_PIN) {
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <EXTI_INIT+0x6>
 3a6:	0f 92       	push	r0
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	89 83       	std	Y+1, r24	; 0x01
	switch (EXINT_PIN) {
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3b 83       	std	Y+3, r19	; 0x03
 3b6:	2a 83       	std	Y+2, r18	; 0x02
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	9b 81       	ldd	r25, Y+3	; 0x03
 3bc:	86 30       	cpi	r24, 0x06	; 6
 3be:	91 05       	cpc	r25, r1
 3c0:	59 f0       	breq	.+22     	; 0x3d8 <EXTI_INIT+0x38>
 3c2:	2a 81       	ldd	r18, Y+2	; 0x02
 3c4:	3b 81       	ldd	r19, Y+3	; 0x03
 3c6:	27 30       	cpi	r18, 0x07	; 7
 3c8:	31 05       	cpc	r19, r1
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <EXTI_INIT+0x48>
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	9b 81       	ldd	r25, Y+3	; 0x03
 3d0:	85 30       	cpi	r24, 0x05	; 5
 3d2:	91 05       	cpc	r25, r1
 3d4:	89 f0       	breq	.+34     	; 0x3f8 <EXTI_INIT+0x58>
 3d6:	17 c0       	rjmp	.+46     	; 0x406 <EXTI_INIT+0x66>
	case INT0:
		SET_BIT(GICR_Register, INT0);
 3d8:	ab e5       	ldi	r26, 0x5B	; 91
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	eb e5       	ldi	r30, 0x5B	; 91
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	8c 93       	st	X, r24
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <EXTI_INIT+0x66>
		break;
	case INT1:
		SET_BIT(GICR_Register, INT1);
 3e8:	ab e5       	ldi	r26, 0x5B	; 91
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	eb e5       	ldi	r30, 0x5B	; 91
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	80 68       	ori	r24, 0x80	; 128
 3f4:	8c 93       	st	X, r24
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <EXTI_INIT+0x66>
		break;
	case INT2:
		SET_BIT(GICR_Register, INT2);
 3f8:	ab e5       	ldi	r26, 0x5B	; 91
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	eb e5       	ldi	r30, 0x5B	; 91
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	80 62       	ori	r24, 0x20	; 32
 404:	8c 93       	st	X, r24
		break;
	}
}
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	cf 91       	pop	r28
 40e:	df 91       	pop	r29
 410:	08 95       	ret

00000412 <EXTI_deINIT>:

void EXTI_deINIT(const SRC_EXTI_INT EXINT_PIN) {
 412:	df 93       	push	r29
 414:	cf 93       	push	r28
 416:	00 d0       	rcall	.+0      	; 0x418 <EXTI_deINIT+0x6>
 418:	0f 92       	push	r0
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	89 83       	std	Y+1, r24	; 0x01
	switch (EXINT_PIN) {
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	3b 83       	std	Y+3, r19	; 0x03
 428:	2a 83       	std	Y+2, r18	; 0x02
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	9b 81       	ldd	r25, Y+3	; 0x03
 42e:	86 30       	cpi	r24, 0x06	; 6
 430:	91 05       	cpc	r25, r1
 432:	59 f0       	breq	.+22     	; 0x44a <EXTI_deINIT+0x38>
 434:	2a 81       	ldd	r18, Y+2	; 0x02
 436:	3b 81       	ldd	r19, Y+3	; 0x03
 438:	27 30       	cpi	r18, 0x07	; 7
 43a:	31 05       	cpc	r19, r1
 43c:	71 f0       	breq	.+28     	; 0x45a <EXTI_deINIT+0x48>
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	9b 81       	ldd	r25, Y+3	; 0x03
 442:	85 30       	cpi	r24, 0x05	; 5
 444:	91 05       	cpc	r25, r1
 446:	89 f0       	breq	.+34     	; 0x46a <EXTI_deINIT+0x58>
 448:	17 c0       	rjmp	.+46     	; 0x478 <EXTI_deINIT+0x66>
	case INT0:
		CLR_BIT(GICR_Register, INT0);
 44a:	ab e5       	ldi	r26, 0x5B	; 91
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	eb e5       	ldi	r30, 0x5B	; 91
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	8f 7b       	andi	r24, 0xBF	; 191
 456:	8c 93       	st	X, r24
 458:	0f c0       	rjmp	.+30     	; 0x478 <EXTI_deINIT+0x66>
		break;
	case INT1:
		CLR_BIT(GICR_Register, INT1);
 45a:	ab e5       	ldi	r26, 0x5B	; 91
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	eb e5       	ldi	r30, 0x5B	; 91
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	8c 93       	st	X, r24
 468:	07 c0       	rjmp	.+14     	; 0x478 <EXTI_deINIT+0x66>
		break;
	case INT2:
		CLR_BIT(GICR_Register, INT2);
 46a:	ab e5       	ldi	r26, 0x5B	; 91
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	eb e5       	ldi	r30, 0x5B	; 91
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	8f 7d       	andi	r24, 0xDF	; 223
 476:	8c 93       	st	X, r24
		CLR_BIT(MCUCR_Register, ISC00);
		CLR_BIT(MCUCR_Register, ISC01);
		CLR_BIT(MCUCR_Register, ISC10);
		CLR_BIT(MCUCR_Register, ISC11);
	}
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	08 95       	ret

00000484 <EXTI_TRIG>:

void EXTI_TRIG(const SRC_EXTI_INT EXINT_Mode, const TRIG_EXTI_INT EDGE) {
 484:	df 93       	push	r29
 486:	cf 93       	push	r28
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	2a 97       	sbiw	r28, 0x0a	; 10
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	6a 83       	std	Y+2, r22	; 0x02

	switch (EXINT_Mode) {
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	3a 87       	std	Y+10, r19	; 0x0a
 4a4:	29 87       	std	Y+9, r18	; 0x09
 4a6:	89 85       	ldd	r24, Y+9	; 0x09
 4a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 4aa:	86 30       	cpi	r24, 0x06	; 6
 4ac:	91 05       	cpc	r25, r1
 4ae:	69 f0       	breq	.+26     	; 0x4ca <EXTI_TRIG+0x46>
 4b0:	29 85       	ldd	r18, Y+9	; 0x09
 4b2:	3a 85       	ldd	r19, Y+10	; 0x0a
 4b4:	27 30       	cpi	r18, 0x07	; 7
 4b6:	31 05       	cpc	r19, r1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <EXTI_TRIG+0x38>
 4ba:	62 c0       	rjmp	.+196    	; 0x580 <EXTI_TRIG+0xfc>
 4bc:	89 85       	ldd	r24, Y+9	; 0x09
 4be:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	91 05       	cpc	r25, r1
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <EXTI_TRIG+0x44>
 4c6:	b7 c0       	rjmp	.+366    	; 0x636 <EXTI_TRIG+0x1b2>
 4c8:	dd c0       	rjmp	.+442    	; 0x684 <EXTI_TRIG+0x200>
	case INT0:
		switch (EDGE) {
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	38 87       	std	Y+8, r19	; 0x08
 4d2:	2f 83       	std	Y+7, r18	; 0x07
 4d4:	8f 81       	ldd	r24, Y+7	; 0x07
 4d6:	98 85       	ldd	r25, Y+8	; 0x08
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 05       	cpc	r25, r1
 4dc:	21 f1       	breq	.+72     	; 0x526 <EXTI_TRIG+0xa2>
 4de:	2f 81       	ldd	r18, Y+7	; 0x07
 4e0:	38 85       	ldd	r19, Y+8	; 0x08
 4e2:	22 30       	cpi	r18, 0x02	; 2
 4e4:	31 05       	cpc	r19, r1
 4e6:	2c f4       	brge	.+10     	; 0x4f2 <EXTI_TRIG+0x6e>
 4e8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ea:	98 85       	ldd	r25, Y+8	; 0x08
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	61 f0       	breq	.+24     	; 0x508 <EXTI_TRIG+0x84>
 4f0:	c9 c0       	rjmp	.+402    	; 0x684 <EXTI_TRIG+0x200>
 4f2:	2f 81       	ldd	r18, Y+7	; 0x07
 4f4:	38 85       	ldd	r19, Y+8	; 0x08
 4f6:	22 30       	cpi	r18, 0x02	; 2
 4f8:	31 05       	cpc	r19, r1
 4fa:	21 f1       	breq	.+72     	; 0x544 <EXTI_TRIG+0xc0>
 4fc:	8f 81       	ldd	r24, Y+7	; 0x07
 4fe:	98 85       	ldd	r25, Y+8	; 0x08
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	91 05       	cpc	r25, r1
 504:	71 f1       	breq	.+92     	; 0x562 <EXTI_TRIG+0xde>
 506:	be c0       	rjmp	.+380    	; 0x684 <EXTI_TRIG+0x200>
		case Low_Level:
			CLR_BIT(MCUCR_Register, ISC00);
 508:	a5 e5       	ldi	r26, 0x55	; 85
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	e5 e5       	ldi	r30, 0x55	; 85
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	8e 7f       	andi	r24, 0xFE	; 254
 514:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC01);
 516:	a5 e5       	ldi	r26, 0x55	; 85
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e5 e5       	ldi	r30, 0x55	; 85
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	8d 7f       	andi	r24, 0xFD	; 253
 522:	8c 93       	st	X, r24
 524:	af c0       	rjmp	.+350    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Logical_Change:
			SET_BIT(MCUCR_Register, ISC00);
 526:	a5 e5       	ldi	r26, 0x55	; 85
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e5 e5       	ldi	r30, 0x55	; 85
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	81 60       	ori	r24, 0x01	; 1
 532:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC01);
 534:	a5 e5       	ldi	r26, 0x55	; 85
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e5 e5       	ldi	r30, 0x55	; 85
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	8c 93       	st	X, r24
 542:	a0 c0       	rjmp	.+320    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC00);
 544:	a5 e5       	ldi	r26, 0x55	; 85
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e5 e5       	ldi	r30, 0x55	; 85
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	8e 7f       	andi	r24, 0xFE	; 254
 550:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC01);
 552:	a5 e5       	ldi	r26, 0x55	; 85
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e5 e5       	ldi	r30, 0x55	; 85
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	8c 93       	st	X, r24
 560:	91 c0       	rjmp	.+290    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC00);
 562:	a5 e5       	ldi	r26, 0x55	; 85
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e5 e5       	ldi	r30, 0x55	; 85
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC01);
 570:	a5 e5       	ldi	r26, 0x55	; 85
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	e5 e5       	ldi	r30, 0x55	; 85
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	8c 93       	st	X, r24
 57e:	82 c0       	rjmp	.+260    	; 0x684 <EXTI_TRIG+0x200>
			break;
		}
		break;
	case INT1:
		switch (EDGE) {
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	3e 83       	std	Y+6, r19	; 0x06
 588:	2d 83       	std	Y+5, r18	; 0x05
 58a:	8d 81       	ldd	r24, Y+5	; 0x05
 58c:	9e 81       	ldd	r25, Y+6	; 0x06
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	91 05       	cpc	r25, r1
 592:	21 f1       	breq	.+72     	; 0x5dc <EXTI_TRIG+0x158>
 594:	2d 81       	ldd	r18, Y+5	; 0x05
 596:	3e 81       	ldd	r19, Y+6	; 0x06
 598:	22 30       	cpi	r18, 0x02	; 2
 59a:	31 05       	cpc	r19, r1
 59c:	2c f4       	brge	.+10     	; 0x5a8 <EXTI_TRIG+0x124>
 59e:	8d 81       	ldd	r24, Y+5	; 0x05
 5a0:	9e 81       	ldd	r25, Y+6	; 0x06
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	61 f0       	breq	.+24     	; 0x5be <EXTI_TRIG+0x13a>
 5a6:	6e c0       	rjmp	.+220    	; 0x684 <EXTI_TRIG+0x200>
 5a8:	2d 81       	ldd	r18, Y+5	; 0x05
 5aa:	3e 81       	ldd	r19, Y+6	; 0x06
 5ac:	22 30       	cpi	r18, 0x02	; 2
 5ae:	31 05       	cpc	r19, r1
 5b0:	21 f1       	breq	.+72     	; 0x5fa <EXTI_TRIG+0x176>
 5b2:	8d 81       	ldd	r24, Y+5	; 0x05
 5b4:	9e 81       	ldd	r25, Y+6	; 0x06
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	91 05       	cpc	r25, r1
 5ba:	71 f1       	breq	.+92     	; 0x618 <EXTI_TRIG+0x194>
 5bc:	63 c0       	rjmp	.+198    	; 0x684 <EXTI_TRIG+0x200>
		case Low_Level:
			CLR_BIT(MCUCR_Register, ISC10);
 5be:	a5 e5       	ldi	r26, 0x55	; 85
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e5 e5       	ldi	r30, 0x55	; 85
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	8b 7f       	andi	r24, 0xFB	; 251
 5ca:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC11);
 5cc:	a5 e5       	ldi	r26, 0x55	; 85
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e5 e5       	ldi	r30, 0x55	; 85
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	87 7f       	andi	r24, 0xF7	; 247
 5d8:	8c 93       	st	X, r24
 5da:	54 c0       	rjmp	.+168    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Logical_Change:
			SET_BIT(MCUCR_Register, ISC10);
 5dc:	a5 e5       	ldi	r26, 0x55	; 85
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e5 e5       	ldi	r30, 0x55	; 85
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	84 60       	ori	r24, 0x04	; 4
 5e8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register, ISC11);
 5ea:	a5 e5       	ldi	r26, 0x55	; 85
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e5 e5       	ldi	r30, 0x55	; 85
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	87 7f       	andi	r24, 0xF7	; 247
 5f6:	8c 93       	st	X, r24
 5f8:	45 c0       	rjmp	.+138    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC10);
 5fa:	a5 e5       	ldi	r26, 0x55	; 85
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e5 e5       	ldi	r30, 0x55	; 85
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	8b 7f       	andi	r24, 0xFB	; 251
 606:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC11);
 608:	a5 e5       	ldi	r26, 0x55	; 85
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e5 e5       	ldi	r30, 0x55	; 85
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	88 60       	ori	r24, 0x08	; 8
 614:	8c 93       	st	X, r24
 616:	36 c0       	rjmp	.+108    	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC10);
 618:	a5 e5       	ldi	r26, 0x55	; 85
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e5 e5       	ldi	r30, 0x55	; 85
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	84 60       	ori	r24, 0x04	; 4
 624:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register, ISC11);
 626:	a5 e5       	ldi	r26, 0x55	; 85
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e5 e5       	ldi	r30, 0x55	; 85
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	88 60       	ori	r24, 0x08	; 8
 632:	8c 93       	st	X, r24
 634:	27 c0       	rjmp	.+78     	; 0x684 <EXTI_TRIG+0x200>
			break;
		}
		break;
	case INT2:
		switch (EDGE) {
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	3c 83       	std	Y+4, r19	; 0x04
 63e:	2b 83       	std	Y+3, r18	; 0x03
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	9c 81       	ldd	r25, Y+4	; 0x04
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	91 05       	cpc	r25, r1
 648:	31 f0       	breq	.+12     	; 0x656 <EXTI_TRIG+0x1d2>
 64a:	2b 81       	ldd	r18, Y+3	; 0x03
 64c:	3c 81       	ldd	r19, Y+4	; 0x04
 64e:	23 30       	cpi	r18, 0x03	; 3
 650:	31 05       	cpc	r19, r1
 652:	49 f0       	breq	.+18     	; 0x666 <EXTI_TRIG+0x1e2>
 654:	10 c0       	rjmp	.+32     	; 0x676 <EXTI_TRIG+0x1f2>
		case Falling_Edge:
			CLR_BIT(MCUCR_Register, ISC2);
 656:	a5 e5       	ldi	r26, 0x55	; 85
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e5 e5       	ldi	r30, 0x55	; 85
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	8f 7b       	andi	r24, 0xBF	; 191
 662:	8c 93       	st	X, r24
 664:	0f c0       	rjmp	.+30     	; 0x684 <EXTI_TRIG+0x200>
			break;
		case Rising_Edge:
			SET_BIT(MCUCR_Register, ISC2);
 666:	a5 e5       	ldi	r26, 0x55	; 85
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e5 e5       	ldi	r30, 0x55	; 85
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	80 64       	ori	r24, 0x40	; 64
 672:	8c 93       	st	X, r24
 674:	07 c0       	rjmp	.+14     	; 0x684 <EXTI_TRIG+0x200>
			break;
		default:
			CLR_BIT(MCUCR_Register, ISC2);
 676:	a5 e5       	ldi	r26, 0x55	; 85
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e5 e5       	ldi	r30, 0x55	; 85
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	8f 7b       	andi	r24, 0xBF	; 191
 682:	8c 93       	st	X, r24
		}
		break;
	}
}
 684:	2a 96       	adiw	r28, 0x0a	; 10
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	cf 91       	pop	r28
 692:	df 91       	pop	r29
 694:	08 95       	ret

00000696 <DIO_INIT>:

uint8 *REG_ARR[12] = { DDRA_Address, DDRB_Address, DDRC_Address, DDRD_Address,
PORTA_Address, PORTB_Address, PORTC_Address, PORTD_Address,
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
 696:	df 93       	push	r29
 698:	cf 93       	push	r28
 69a:	00 d0       	rcall	.+0      	; 0x69c <DIO_INIT+0x6>
 69c:	00 d0       	rcall	.+0      	; 0x69e <DIO_INIT+0x8>
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_INIT+0xa>
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
 6a4:	19 82       	std	Y+1, r1	; 0x01
 6a6:	bd c0       	rjmp	.+378    	; 0x822 <DIO_INIT+0x18c>
		PIN_STATE = DIO_PIN_CONFG[i];
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	fc 01       	movw	r30, r24
 6b0:	ec 57       	subi	r30, 0x7C	; 124
 6b2:	ff 4f       	sbci	r31, 0xFF	; 255
 6b4:	80 81       	ld	r24, Z
 6b6:	8c 83       	std	Y+4, r24	; 0x04
		PIN_VALUE = i % 8;
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	87 70       	andi	r24, 0x07	; 7
 6bc:	8b 83       	std	Y+3, r24	; 0x03
		PORT_STATE = i / 8;
 6be:	89 81       	ldd	r24, Y+1	; 0x01
 6c0:	86 95       	lsr	r24
 6c2:	86 95       	lsr	r24
 6c4:	86 95       	lsr	r24
 6c6:	8a 83       	std	Y+2, r24	; 0x02
		switch (PIN_STATE) {
 6c8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	3e 83       	std	Y+6, r19	; 0x06
 6d0:	2d 83       	std	Y+5, r18	; 0x05
 6d2:	8d 81       	ldd	r24, Y+5	; 0x05
 6d4:	9e 81       	ldd	r25, Y+6	; 0x06
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	91 05       	cpc	r25, r1
 6da:	81 f1       	breq	.+96     	; 0x73c <DIO_INIT+0xa6>
 6dc:	2d 81       	ldd	r18, Y+5	; 0x05
 6de:	3e 81       	ldd	r19, Y+6	; 0x06
 6e0:	22 30       	cpi	r18, 0x02	; 2
 6e2:	31 05       	cpc	r19, r1
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <DIO_INIT+0x52>
 6e6:	75 c0       	rjmp	.+234    	; 0x7d2 <DIO_INIT+0x13c>
 6e8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ea:	9e 81       	ldd	r25, Y+6	; 0x06
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <DIO_INIT+0x5c>
 6f0:	95 c0       	rjmp	.+298    	; 0x81c <DIO_INIT+0x186>
		case OUTPUT:
			SET_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	88 2f       	mov	r24, r24
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	fc 01       	movw	r30, r24
 6fe:	e4 59       	subi	r30, 0x94	; 148
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	a0 81       	ld	r26, Z
 704:	b1 81       	ldd	r27, Z+1	; 0x01
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	88 2f       	mov	r24, r24
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	fc 01       	movw	r30, r24
 712:	e4 59       	subi	r30, 0x94	; 148
 714:	ff 4f       	sbci	r31, 0xFF	; 255
 716:	01 90       	ld	r0, Z+
 718:	f0 81       	ld	r31, Z
 71a:	e0 2d       	mov	r30, r0
 71c:	80 81       	ld	r24, Z
 71e:	48 2f       	mov	r20, r24
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 2e       	mov	r0, r18
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_INIT+0x9c>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_INIT+0x98>
 736:	84 2b       	or	r24, r20
 738:	8c 93       	st	X, r24
 73a:	70 c0       	rjmp	.+224    	; 0x81c <DIO_INIT+0x186>
			break;
		case INPUT_PULLUP:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	88 2f       	mov	r24, r24
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	fc 01       	movw	r30, r24
 748:	e4 59       	subi	r30, 0x94	; 148
 74a:	ff 4f       	sbci	r31, 0xFF	; 255
 74c:	a0 81       	ld	r26, Z
 74e:	b1 81       	ldd	r27, Z+1	; 0x01
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	88 2f       	mov	r24, r24
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	fc 01       	movw	r30, r24
 75c:	e4 59       	subi	r30, 0x94	; 148
 75e:	ff 4f       	sbci	r31, 0xFF	; 255
 760:	01 90       	ld	r0, Z+
 762:	f0 81       	ld	r31, Z
 764:	e0 2d       	mov	r30, r0
 766:	80 81       	ld	r24, Z
 768:	48 2f       	mov	r20, r24
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	28 2f       	mov	r18, r24
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_INIT+0xe4>
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	2a 95       	dec	r18
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_INIT+0xe0>
 77e:	80 95       	com	r24
 780:	84 23       	and	r24, r20
 782:	8c 93       	st	X, r24
			SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_VALUE);
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	88 2f       	mov	r24, r24
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	04 96       	adiw	r24, 0x04	; 4
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	fc 01       	movw	r30, r24
 792:	e4 59       	subi	r30, 0x94	; 148
 794:	ff 4f       	sbci	r31, 0xFF	; 255
 796:	a0 81       	ld	r26, Z
 798:	b1 81       	ldd	r27, Z+1	; 0x01
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	88 2f       	mov	r24, r24
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	04 96       	adiw	r24, 0x04	; 4
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	fc 01       	movw	r30, r24
 7a8:	e4 59       	subi	r30, 0x94	; 148
 7aa:	ff 4f       	sbci	r31, 0xFF	; 255
 7ac:	01 90       	ld	r0, Z+
 7ae:	f0 81       	ld	r31, Z
 7b0:	e0 2d       	mov	r30, r0
 7b2:	80 81       	ld	r24, Z
 7b4:	48 2f       	mov	r20, r24
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 2e       	mov	r0, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_INIT+0x132>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_INIT+0x12e>
 7cc:	84 2b       	or	r24, r20
 7ce:	8c 93       	st	X, r24
 7d0:	25 c0       	rjmp	.+74     	; 0x81c <DIO_INIT+0x186>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	88 2f       	mov	r24, r24
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	fc 01       	movw	r30, r24
 7de:	e4 59       	subi	r30, 0x94	; 148
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	a0 81       	ld	r26, Z
 7e4:	b1 81       	ldd	r27, Z+1	; 0x01
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	88 2f       	mov	r24, r24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	fc 01       	movw	r30, r24
 7f2:	e4 59       	subi	r30, 0x94	; 148
 7f4:	ff 4f       	sbci	r31, 0xFF	; 255
 7f6:	01 90       	ld	r0, Z+
 7f8:	f0 81       	ld	r31, Z
 7fa:	e0 2d       	mov	r30, r0
 7fc:	80 81       	ld	r24, Z
 7fe:	48 2f       	mov	r20, r24
 800:	8b 81       	ldd	r24, Y+3	; 0x03
 802:	28 2f       	mov	r18, r24
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 2e       	mov	r0, r18
 80c:	02 c0       	rjmp	.+4      	; 0x812 <DIO_INIT+0x17c>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	0a 94       	dec	r0
 814:	e2 f7       	brpl	.-8      	; 0x80e <DIO_INIT+0x178>
 816:	80 95       	com	r24
 818:	84 23       	and	r24, r20
 81a:	8c 93       	st	X, r24
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	8f 5f       	subi	r24, 0xFF	; 255
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	80 32       	cpi	r24, 0x20	; 32
 826:	08 f4       	brcc	.+2      	; 0x82a <DIO_INIT+0x194>
 828:	3f cf       	rjmp	.-386    	; 0x6a8 <DIO_INIT+0x12>
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
			break;
		}
	}
}
 82a:	26 96       	adiw	r28, 0x06	; 6
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	de bf       	out	0x3e, r29	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	cd bf       	out	0x3d, r28	; 61
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <DIO_Write_Channel>:


void DIO_Write_Channel(uint8 CHANNEL, uint8 LEVEL) {
 83c:	df 93       	push	r29
 83e:	cf 93       	push	r28
 840:	00 d0       	rcall	.+0      	; 0x842 <DIO_Write_Channel+0x6>
 842:	00 d0       	rcall	.+0      	; 0x844 <DIO_Write_Channel+0x8>
 844:	00 d0       	rcall	.+0      	; 0x846 <DIO_Write_Channel+0xa>
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	8b 83       	std	Y+3, r24	; 0x03
 84c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 PIN_STATE = CHANNEL % 8;
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	87 70       	andi	r24, 0x07	; 7
 852:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_STATE = CHANNEL / 8;
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	86 95       	lsr	r24
 858:	86 95       	lsr	r24
 85a:	86 95       	lsr	r24
 85c:	89 83       	std	Y+1, r24	; 0x01
	switch (LEVEL) {
 85e:	8c 81       	ldd	r24, Y+4	; 0x04
 860:	28 2f       	mov	r18, r24
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	3e 83       	std	Y+6, r19	; 0x06
 866:	2d 83       	std	Y+5, r18	; 0x05
 868:	8d 81       	ldd	r24, Y+5	; 0x05
 86a:	9e 81       	ldd	r25, Y+6	; 0x06
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	69 f1       	breq	.+90     	; 0x8ca <__stack+0x6b>
 870:	2d 81       	ldd	r18, Y+5	; 0x05
 872:	3e 81       	ldd	r19, Y+6	; 0x06
 874:	21 30       	cpi	r18, 0x01	; 1
 876:	31 05       	cpc	r19, r1
 878:	09 f0       	breq	.+2      	; 0x87c <__stack+0x1d>
 87a:	4e c0       	rjmp	.+156    	; 0x918 <__stack+0xb9>
	case HIGH:
		SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	04 96       	adiw	r24, 0x04	; 4
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	fc 01       	movw	r30, r24
 88a:	e4 59       	subi	r30, 0x94	; 148
 88c:	ff 4f       	sbci	r31, 0xFF	; 255
 88e:	a0 81       	ld	r26, Z
 890:	b1 81       	ldd	r27, Z+1	; 0x01
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	04 96       	adiw	r24, 0x04	; 4
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	fc 01       	movw	r30, r24
 8a0:	e4 59       	subi	r30, 0x94	; 148
 8a2:	ff 4f       	sbci	r31, 0xFF	; 255
 8a4:	01 90       	ld	r0, Z+
 8a6:	f0 81       	ld	r31, Z
 8a8:	e0 2d       	mov	r30, r0
 8aa:	80 81       	ld	r24, Z
 8ac:	48 2f       	mov	r20, r24
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 2e       	mov	r0, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	0a 94       	dec	r0
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	84 2b       	or	r24, r20
 8c6:	8c 93       	st	X, r24
 8c8:	27 c0       	rjmp	.+78     	; 0x918 <__stack+0xb9>
		break;
	case LOW:
		CLR_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	88 2f       	mov	r24, r24
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	04 96       	adiw	r24, 0x04	; 4
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	fc 01       	movw	r30, r24
 8d8:	e4 59       	subi	r30, 0x94	; 148
 8da:	ff 4f       	sbci	r31, 0xFF	; 255
 8dc:	a0 81       	ld	r26, Z
 8de:	b1 81       	ldd	r27, Z+1	; 0x01
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	88 2f       	mov	r24, r24
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	04 96       	adiw	r24, 0x04	; 4
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	fc 01       	movw	r30, r24
 8ee:	e4 59       	subi	r30, 0x94	; 148
 8f0:	ff 4f       	sbci	r31, 0xFF	; 255
 8f2:	01 90       	ld	r0, Z+
 8f4:	f0 81       	ld	r31, Z
 8f6:	e0 2d       	mov	r30, r0
 8f8:	80 81       	ld	r24, Z
 8fa:	48 2f       	mov	r20, r24
 8fc:	8a 81       	ldd	r24, Y+2	; 0x02
 8fe:	28 2f       	mov	r18, r24
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 2e       	mov	r0, r18
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	0a 94       	dec	r0
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	80 95       	com	r24
 914:	84 23       	and	r24, r20
 916:	8c 93       	st	X, r24
		break;
	}
}
 918:	26 96       	adiw	r28, 0x06	; 6
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	cf 91       	pop	r28
 926:	df 91       	pop	r29
 928:	08 95       	ret

0000092a <DIO_Write_Port>:

void DIO_Write_Port(uint8 PORT, uint8 VALUE) {
 92a:	df 93       	push	r29
 92c:	cf 93       	push	r28
 92e:	00 d0       	rcall	.+0      	; 0x930 <DIO_Write_Port+0x6>
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
 934:	89 83       	std	Y+1, r24	; 0x01
 936:	6a 83       	std	Y+2, r22	; 0x02

	*REG_ARR[PORT + 4] = VALUE;
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	88 2f       	mov	r24, r24
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	04 96       	adiw	r24, 0x04	; 4
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	fc 01       	movw	r30, r24
 946:	e4 59       	subi	r30, 0x94	; 148
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	01 90       	ld	r0, Z+
 94c:	f0 81       	ld	r31, Z
 94e:	e0 2d       	mov	r30, r0
 950:	8a 81       	ldd	r24, Y+2	; 0x02
 952:	80 83       	st	Z, r24
}
 954:	0f 90       	pop	r0
 956:	0f 90       	pop	r0
 958:	cf 91       	pop	r28
 95a:	df 91       	pop	r29
 95c:	08 95       	ret

0000095e <DIO_Read_Channel>:

uint8 DIO_Read_Channel(uint8 CHANNEL) {
 95e:	df 93       	push	r29
 960:	cf 93       	push	r28
 962:	00 d0       	rcall	.+0      	; 0x964 <DIO_Read_Channel+0x6>
 964:	00 d0       	rcall	.+0      	; 0x966 <DIO_Read_Channel+0x8>
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	8c 83       	std	Y+4, r24	; 0x04
	uint8 PIN_STATE, val;
	uint8 PORT_STATE;

	PIN_STATE = CHANNEL % 8;
 96c:	8c 81       	ldd	r24, Y+4	; 0x04
 96e:	87 70       	andi	r24, 0x07	; 7
 970:	8b 83       	std	Y+3, r24	; 0x03
	PORT_STATE = CHANNEL / 8;
 972:	8c 81       	ldd	r24, Y+4	; 0x04
 974:	86 95       	lsr	r24
 976:	86 95       	lsr	r24
 978:	86 95       	lsr	r24
 97a:	89 83       	std	Y+1, r24	; 0x01
	val = GET_BIT(*REG_ARR[PORT_STATE + 8], PIN_STATE);
 97c:	89 81       	ldd	r24, Y+1	; 0x01
 97e:	88 2f       	mov	r24, r24
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	08 96       	adiw	r24, 0x08	; 8
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	fc 01       	movw	r30, r24
 98a:	e4 59       	subi	r30, 0x94	; 148
 98c:	ff 4f       	sbci	r31, 0xFF	; 255
 98e:	01 90       	ld	r0, Z+
 990:	f0 81       	ld	r31, Z
 992:	e0 2d       	mov	r30, r0
 994:	80 81       	ld	r24, Z
 996:	28 2f       	mov	r18, r24
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	88 2f       	mov	r24, r24
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	a9 01       	movw	r20, r18
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_Read_Channel+0x4a>
 9a4:	55 95       	asr	r21
 9a6:	47 95       	ror	r20
 9a8:	8a 95       	dec	r24
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_Read_Channel+0x46>
 9ac:	ca 01       	movw	r24, r20
 9ae:	81 70       	andi	r24, 0x01	; 1
 9b0:	8a 83       	std	Y+2, r24	; 0x02


	return val;
 9b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	0f 90       	pop	r0
 9ba:	0f 90       	pop	r0
 9bc:	cf 91       	pop	r28
 9be:	df 91       	pop	r29
 9c0:	08 95       	ret

000009c2 <DIO_Read_Port>:

uint8 DIO_Read_Port(uint8 PORT) {
 9c2:	df 93       	push	r29
 9c4:	cf 93       	push	r28
 9c6:	00 d0       	rcall	.+0      	; 0x9c8 <DIO_Read_Port+0x6>
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val;
	val = *REG_ARR[PORT + 8];
 9ce:	8a 81       	ldd	r24, Y+2	; 0x02
 9d0:	88 2f       	mov	r24, r24
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	08 96       	adiw	r24, 0x08	; 8
 9d6:	88 0f       	add	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	fc 01       	movw	r30, r24
 9dc:	e4 59       	subi	r30, 0x94	; 148
 9de:	ff 4f       	sbci	r31, 0xFF	; 255
 9e0:	01 90       	ld	r0, Z+
 9e2:	f0 81       	ld	r31, Z
 9e4:	e0 2d       	mov	r30, r0
 9e6:	80 81       	ld	r24, Z
 9e8:	89 83       	std	Y+1, r24	; 0x01
	return val;
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <__vector_13>:
#include "DIO.h"
#include "UART.h"
#include <avr/interrupt.h>

uint8 Rx_Data = 0;
ISR(_VECTOR(13)) {
 9f6:	1f 92       	push	r1
 9f8:	0f 92       	push	r0
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	0f 92       	push	r0
 9fe:	11 24       	eor	r1, r1
 a00:	2f 93       	push	r18
 a02:	3f 93       	push	r19
 a04:	4f 93       	push	r20
 a06:	5f 93       	push	r21
 a08:	6f 93       	push	r22
 a0a:	7f 93       	push	r23
 a0c:	8f 93       	push	r24
 a0e:	9f 93       	push	r25
 a10:	af 93       	push	r26
 a12:	bf 93       	push	r27
 a14:	ef 93       	push	r30
 a16:	ff 93       	push	r31
 a18:	df 93       	push	r29
 a1a:	cf 93       	push	r28
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
	Rx_Data = UART_Receiver_With_Interrupt();
 a20:	0e 94 f5 00 	call	0x1ea	; 0x1ea <UART_Receiver_With_Interrupt>
 a24:	80 93 a4 00 	sts	0x00A4, r24
}
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	ff 91       	pop	r31
 a2e:	ef 91       	pop	r30
 a30:	bf 91       	pop	r27
 a32:	af 91       	pop	r26
 a34:	9f 91       	pop	r25
 a36:	8f 91       	pop	r24
 a38:	7f 91       	pop	r23
 a3a:	6f 91       	pop	r22
 a3c:	5f 91       	pop	r21
 a3e:	4f 91       	pop	r20
 a40:	3f 91       	pop	r19
 a42:	2f 91       	pop	r18
 a44:	0f 90       	pop	r0
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0f 90       	pop	r0
 a4a:	1f 90       	pop	r1
 a4c:	18 95       	reti

00000a4e <main>:

uint8 main() {
 a4e:	df 93       	push	r29
 a50:	cf 93       	push	r28
 a52:	00 d0       	rcall	.+0      	; 0xa54 <main+0x6>
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62

	uint8 Tx_Data0, Tx_Data1;

	DIO_INIT();
 a58:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_INIT>
	UART_INIT(51);
 a5c:	83 e3       	ldi	r24, 0x33	; 51
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 49 00 	call	0x92	; 0x92 <UART_INIT>
	UART_Send_String("Samaa Hany0",20);
 a64:	80 e6       	ldi	r24, 0x60	; 96
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	64 e1       	ldi	r22, 0x14	; 20
 a6a:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_Send_String>

	while (1) {
		Tx_Data0 = DIO_Read_Channel(PORTA0);
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	0e 94 af 04 	call	0x95e	; 0x95e <DIO_Read_Channel>
 a74:	8a 83       	std	Y+2, r24	; 0x02
		Tx_Data1 = DIO_Read_Channel(PORTA1);
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	0e 94 af 04 	call	0x95e	; 0x95e <DIO_Read_Channel>
 a7c:	89 83       	std	Y+1, r24	; 0x01
		if ((Tx_Data0 == 0) && (Tx_Data1 == 1)) {
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	88 23       	and	r24, r24
 a82:	39 f4       	brne	.+14     	; 0xa92 <main+0x44>
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	81 30       	cpi	r24, 0x01	; 1
 a88:	21 f4       	brne	.+8      	; 0xa92 <main+0x44>
			UART_Send_Char(LOW);
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	0e 94 86 00 	call	0x10c	; 0x10c <UART_Send_Char>
 a90:	ee cf       	rjmp	.-36     	; 0xa6e <main+0x20>
		} else if ((Tx_Data0 == 1) && (Tx_Data1 == 0)) {
 a92:	8a 81       	ldd	r24, Y+2	; 0x02
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	59 f7       	brne	.-42     	; 0xa6e <main+0x20>
 a98:	89 81       	ldd	r24, Y+1	; 0x01
 a9a:	88 23       	and	r24, r24
 a9c:	41 f7       	brne	.-48     	; 0xa6e <main+0x20>
			UART_Send_Char(HIGH);
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	0e 94 86 00 	call	0x10c	; 0x10c <UART_Send_Char>
 aa4:	e4 cf       	rjmp	.-56     	; 0xa6e <main+0x20>

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
