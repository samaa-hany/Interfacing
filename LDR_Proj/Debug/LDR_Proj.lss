
LDR_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000706  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800098  00800098  000007d2  2**0
                  ALLOC
  3 .stab         00000ca8  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c45  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 02 	call	0x520	; 0x520 <main>
  8a:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_INIT>:

uint8 *REG_ARR[12] = { DDRA_Address, DDRB_Address, DDRC_Address, DDRD_Address,
PORTA_Address, PORTB_Address, PORTC_Address, PORTD_Address,
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_INIT+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <DIO_INIT+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <DIO_INIT+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	bd c0       	rjmp	.+378    	; 0x21e <DIO_INIT+0x18c>
		PIN_STATE = DIO_PIN_CONFG[i];
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	fc 01       	movw	r30, r24
  ac:	e8 58       	subi	r30, 0x88	; 136
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	80 81       	ld	r24, Z
  b2:	8c 83       	std	Y+4, r24	; 0x04
		PIN_VALUE = i % 8;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	87 70       	andi	r24, 0x07	; 7
  b8:	8b 83       	std	Y+3, r24	; 0x03
		PORT_STATE = i / 8;
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	86 95       	lsr	r24
  be:	86 95       	lsr	r24
  c0:	86 95       	lsr	r24
  c2:	8a 83       	std	Y+2, r24	; 0x02
		switch (PIN_STATE) {
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	3e 83       	std	Y+6, r19	; 0x06
  cc:	2d 83       	std	Y+5, r18	; 0x05
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	81 f1       	breq	.+96     	; 0x138 <DIO_INIT+0xa6>
  d8:	2d 81       	ldd	r18, Y+5	; 0x05
  da:	3e 81       	ldd	r19, Y+6	; 0x06
  dc:	22 30       	cpi	r18, 0x02	; 2
  de:	31 05       	cpc	r19, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_INIT+0x52>
  e2:	75 c0       	rjmp	.+234    	; 0x1ce <DIO_INIT+0x13c>
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	9e 81       	ldd	r25, Y+6	; 0x06
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_INIT+0x5c>
  ec:	95 c0       	rjmp	.+298    	; 0x218 <DIO_INIT+0x186>
		case OUTPUT:
			SET_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	fc 01       	movw	r30, r24
  fa:	e0 5a       	subi	r30, 0xA0	; 160
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	a0 81       	ld	r26, Z
 100:	b1 81       	ldd	r27, Z+1	; 0x01
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	fc 01       	movw	r30, r24
 10e:	e0 5a       	subi	r30, 0xA0	; 160
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	01 90       	ld	r0, Z+
 114:	f0 81       	ld	r31, Z
 116:	e0 2d       	mov	r30, r0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_INIT+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_INIT+0x98>
 132:	84 2b       	or	r24, r20
 134:	8c 93       	st	X, r24
 136:	70 c0       	rjmp	.+224    	; 0x218 <DIO_INIT+0x186>
			break;
		case INPUT_PULLUP:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	fc 01       	movw	r30, r24
 144:	e0 5a       	subi	r30, 0xA0	; 160
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	a0 81       	ld	r26, Z
 14a:	b1 81       	ldd	r27, Z+1	; 0x01
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	fc 01       	movw	r30, r24
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	01 90       	ld	r0, Z+
 15e:	f0 81       	ld	r31, Z
 160:	e0 2d       	mov	r30, r0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_INIT+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_INIT+0xe0>
 17a:	80 95       	com	r24
 17c:	84 23       	and	r24, r20
 17e:	8c 93       	st	X, r24
			SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_VALUE);
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	04 96       	adiw	r24, 0x04	; 4
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	fc 01       	movw	r30, r24
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	a0 81       	ld	r26, Z
 194:	b1 81       	ldd	r27, Z+1	; 0x01
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	04 96       	adiw	r24, 0x04	; 4
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	fc 01       	movw	r30, r24
 1a4:	e0 5a       	subi	r30, 0xA0	; 160
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	01 90       	ld	r0, Z+
 1aa:	f0 81       	ld	r31, Z
 1ac:	e0 2d       	mov	r30, r0
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 2e       	mov	r0, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_INIT+0x132>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_INIT+0x12e>
 1c8:	84 2b       	or	r24, r20
 1ca:	8c 93       	st	X, r24
 1cc:	25 c0       	rjmp	.+74     	; 0x218 <DIO_INIT+0x186>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	fc 01       	movw	r30, r24
 1da:	e0 5a       	subi	r30, 0xA0	; 160
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	a0 81       	ld	r26, Z
 1e0:	b1 81       	ldd	r27, Z+1	; 0x01
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	88 2f       	mov	r24, r24
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	fc 01       	movw	r30, r24
 1ee:	e0 5a       	subi	r30, 0xA0	; 160
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	01 90       	ld	r0, Z+
 1f4:	f0 81       	ld	r31, Z
 1f6:	e0 2d       	mov	r30, r0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_INIT+0x17c>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_INIT+0x178>
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	8c 93       	st	X, r24
PINA_Address, PINB_Address, PINC_Address, PIND_Address };

void DIO_INIT(void) {
	uint8 PIN_STATE;
	uint8 PIN_VALUE, PORT_STATE;
	for (uint8 i = 0; i < PIN_Limit; i++) {
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	80 32       	cpi	r24, 0x20	; 32
 222:	08 f4       	brcc	.+2      	; 0x226 <DIO_INIT+0x194>
 224:	3f cf       	rjmp	.-386    	; 0xa4 <DIO_INIT+0x12>
		case INPUT_FLOATING:
			CLR_BIT(*REG_ARR[PORT_STATE], PIN_VALUE);
			break;
		}
	}
}
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <DIO_Write_Channel>:


void DIO_Write_Channel(uint8 CHANNEL, uint8 LEVEL) {
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <DIO_Write_Channel+0x6>
 23e:	00 d0       	rcall	.+0      	; 0x240 <DIO_Write_Channel+0x8>
 240:	00 d0       	rcall	.+0      	; 0x242 <DIO_Write_Channel+0xa>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	8b 83       	std	Y+3, r24	; 0x03
 248:	6c 83       	std	Y+4, r22	; 0x04
	uint8 PIN_STATE = CHANNEL % 8;
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	87 70       	andi	r24, 0x07	; 7
 24e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_STATE = CHANNEL / 8;
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	86 95       	lsr	r24
 254:	86 95       	lsr	r24
 256:	86 95       	lsr	r24
 258:	89 83       	std	Y+1, r24	; 0x01
	switch (LEVEL) {
 25a:	8c 81       	ldd	r24, Y+4	; 0x04
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	3e 83       	std	Y+6, r19	; 0x06
 262:	2d 83       	std	Y+5, r18	; 0x05
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	9e 81       	ldd	r25, Y+6	; 0x06
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	69 f1       	breq	.+90     	; 0x2c6 <DIO_Write_Channel+0x8e>
 26c:	2d 81       	ldd	r18, Y+5	; 0x05
 26e:	3e 81       	ldd	r19, Y+6	; 0x06
 270:	21 30       	cpi	r18, 0x01	; 1
 272:	31 05       	cpc	r19, r1
 274:	09 f0       	breq	.+2      	; 0x278 <DIO_Write_Channel+0x40>
 276:	4e c0       	rjmp	.+156    	; 0x314 <DIO_Write_Channel+0xdc>
	case HIGH:
		SET_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	88 2f       	mov	r24, r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	04 96       	adiw	r24, 0x04	; 4
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	fc 01       	movw	r30, r24
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	a0 81       	ld	r26, Z
 28c:	b1 81       	ldd	r27, Z+1	; 0x01
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	04 96       	adiw	r24, 0x04	; 4
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	fc 01       	movw	r30, r24
 29c:	e0 5a       	subi	r30, 0xA0	; 160
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	01 90       	ld	r0, Z+
 2a2:	f0 81       	ld	r31, Z
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 81       	ld	r24, Z
 2a8:	48 2f       	mov	r20, r24
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 2e       	mov	r0, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_Write_Channel+0x84>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_Write_Channel+0x80>
 2c0:	84 2b       	or	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	27 c0       	rjmp	.+78     	; 0x314 <DIO_Write_Channel+0xdc>
		break;
	case LOW:
		CLR_BIT(*REG_ARR[PORT_STATE + 4], PIN_STATE);
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	88 2f       	mov	r24, r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	04 96       	adiw	r24, 0x04	; 4
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	fc 01       	movw	r30, r24
 2d4:	e0 5a       	subi	r30, 0xA0	; 160
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	a0 81       	ld	r26, Z
 2da:	b1 81       	ldd	r27, Z+1	; 0x01
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	88 2f       	mov	r24, r24
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	04 96       	adiw	r24, 0x04	; 4
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	fc 01       	movw	r30, r24
 2ea:	e0 5a       	subi	r30, 0xA0	; 160
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	01 90       	ld	r0, Z+
 2f0:	f0 81       	ld	r31, Z
 2f2:	e0 2d       	mov	r30, r0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_Write_Channel+0xd2>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_Write_Channel+0xce>
 30e:	80 95       	com	r24
 310:	84 23       	and	r24, r20
 312:	8c 93       	st	X, r24
		break;
	}
}
 314:	26 96       	adiw	r28, 0x06	; 6
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	cf 91       	pop	r28
 322:	df 91       	pop	r29
 324:	08 95       	ret

00000326 <DIO_Write_Port>:

void DIO_Write_Port(uint8 PORT, uint8 VALUE) {
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	00 d0       	rcall	.+0      	; 0x32c <DIO_Write_Port+0x6>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	6a 83       	std	Y+2, r22	; 0x02

	*REG_ARR[PORT + 4] = VALUE;
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	88 2f       	mov	r24, r24
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	04 96       	adiw	r24, 0x04	; 4
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	fc 01       	movw	r30, r24
 342:	e0 5a       	subi	r30, 0xA0	; 160
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	01 90       	ld	r0, Z+
 348:	f0 81       	ld	r31, Z
 34a:	e0 2d       	mov	r30, r0
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	80 83       	st	Z, r24
}
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	08 95       	ret

0000035a <DIO_Read_Channel>:

uint8 DIO_Read_Channel(uint8 CHANNEL) {
 35a:	df 93       	push	r29
 35c:	cf 93       	push	r28
 35e:	00 d0       	rcall	.+0      	; 0x360 <DIO_Read_Channel+0x6>
 360:	00 d0       	rcall	.+0      	; 0x362 <DIO_Read_Channel+0x8>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	8c 83       	std	Y+4, r24	; 0x04
	uint8 PIN_STATE, val;
	uint8 PORT_STATE;

	PIN_STATE = CHANNEL % 8;
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	87 70       	andi	r24, 0x07	; 7
 36c:	8b 83       	std	Y+3, r24	; 0x03
	PORT_STATE = CHANNEL / 8;
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	86 95       	lsr	r24
 376:	89 83       	std	Y+1, r24	; 0x01
	val = GET_BIT(*REG_ARR[PORT_STATE + 8], PIN_STATE);
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	08 96       	adiw	r24, 0x08	; 8
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	fc 01       	movw	r30, r24
 386:	e0 5a       	subi	r30, 0xA0	; 160
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	01 90       	ld	r0, Z+
 38c:	f0 81       	ld	r31, Z
 38e:	e0 2d       	mov	r30, r0
 390:	80 81       	ld	r24, Z
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_Read_Channel+0x4a>
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_Read_Channel+0x46>
 3a8:	ca 01       	movw	r24, r20
 3aa:	81 70       	andi	r24, 0x01	; 1
 3ac:	8a 83       	std	Y+2, r24	; 0x02


	return val;
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	cf 91       	pop	r28
 3ba:	df 91       	pop	r29
 3bc:	08 95       	ret

000003be <DIO_Read_Port>:

uint8 DIO_Read_Port(uint8 PORT) {
 3be:	df 93       	push	r29
 3c0:	cf 93       	push	r28
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <DIO_Read_Port+0x6>
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val;
	val = *REG_ARR[PORT + 8];
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	08 96       	adiw	r24, 0x08	; 8
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	fc 01       	movw	r30, r24
 3d8:	e0 5a       	subi	r30, 0xA0	; 160
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	01 90       	ld	r0, Z+
 3de:	f0 81       	ld	r31, Z
 3e0:	e0 2d       	mov	r30, r0
 3e2:	80 81       	ld	r24, Z
 3e4:	89 83       	std	Y+1, r24	; 0x01
	return val;
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <ADC_INIT>:
#include "MEMMAP.h"
#include "DIO_Confg.h"
#include "DIO.h"
#include "ADC.h"

void ADC_INIT(void) {
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62

	//Enable the Vref
	SET_BIT(ADMUX, CH6);
 3fa:	a7 e2       	ldi	r26, 0x27	; 39
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e7 e2       	ldi	r30, 0x27	; 39
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	80 64       	ori	r24, 0x40	; 64
 406:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, CH7);
 408:	a7 e2       	ldi	r26, 0x27	; 39
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e7 e2       	ldi	r30, 0x27	; 39
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	8c 93       	st	X, r24

	// ADC Pre-scaler
	SET_BIT(ADCSRA, CH0);
 416:	a6 e2       	ldi	r26, 0x26	; 38
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e6 e2       	ldi	r30, 0x26	; 38
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, CH1);
 424:	a6 e2       	ldi	r26, 0x26	; 38
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e6 e2       	ldi	r30, 0x26	; 38
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, CH2);
 432:	a6 e2       	ldi	r26, 0x26	; 38
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e6 e2       	ldi	r30, 0x26	; 38
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	8c 93       	st	X, r24

	// Enable ADC
	SET_BIT(ADCSRA, CH7);
 440:	a6 e2       	ldi	r26, 0x26	; 38
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e6 e2       	ldi	r30, 0x26	; 38
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	8c 93       	st	X, r24

	// Enable ADC Interrupt
	SET_BIT(ADCSRA, CH3);
 44e:	a6 e2       	ldi	r26, 0x26	; 38
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e6 e2       	ldi	r30, 0x26	; 38
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	8c 93       	st	X, r24

	// Enable Global Interrupt
	SET_BIT(SREG,CH7);
 45c:	af e5       	ldi	r26, 0x5F	; 95
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	ef e5       	ldi	r30, 0x5F	; 95
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	91 81       	ldd	r25, Z+1	; 0x01
 468:	80 68       	ori	r24, 0x80	; 128
 46a:	11 96       	adiw	r26, 0x01	; 1
 46c:	9c 93       	st	X, r25
 46e:	8e 93       	st	-X, r24
	ADMUX &= 0xf0;
 470:	a7 e2       	ldi	r26, 0x27	; 39
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e7 e2       	ldi	r30, 0x27	; 39
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 7f       	andi	r24, 0xF0	; 240
 47c:	8c 93       	st	X, r24
}
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	08 95       	ret

00000484 <ADC_StartConversion>:

void ADC_StartConversion(void) {
 484:	df 93       	push	r29
 486:	cf 93       	push	r28
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	//Start Conversion
	SET_BIT(ADCSRA, CH6);
 48c:	a6 e2       	ldi	r26, 0x26	; 38
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	e6 e2       	ldi	r30, 0x26	; 38
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	80 64       	ori	r24, 0x40	; 64
 498:	8c 93       	st	X, r24
}
 49a:	cf 91       	pop	r28
 49c:	df 91       	pop	r29
 49e:	08 95       	ret

000004a0 <ADC_Read>:

uint16 ADC_Read(void) {
 4a0:	df 93       	push	r29
 4a2:	cf 93       	push	r28
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
	return ADC;
 4a8:	e4 e2       	ldi	r30, 0x24	; 36
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	91 81       	ldd	r25, Z+1	; 0x01
}
 4b0:	cf 91       	pop	r28
 4b2:	df 91       	pop	r29
 4b4:	08 95       	ret

000004b6 <__vector_16>:
#include <avr/io.h>
#include "ADC.h"

volatile uint32 Global_ADC;

ISR( __vector_16) {
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
	Global_ADC = ADC_Read();
 4e0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ADC_Read>
 4e4:	cc 01       	movw	r24, r24
 4e6:	a0 e0       	ldi	r26, 0x00	; 0
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	80 93 98 00 	sts	0x0098, r24
 4ee:	90 93 99 00 	sts	0x0099, r25
 4f2:	a0 93 9a 00 	sts	0x009A, r26
 4f6:	b0 93 9b 00 	sts	0x009B, r27
}
 4fa:	cf 91       	pop	r28
 4fc:	df 91       	pop	r29
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <main>:

uint8 main() {
 520:	df 93       	push	r29
 522:	cf 93       	push	r28
 524:	00 d0       	rcall	.+0      	; 0x526 <main+0x6>
 526:	00 d0       	rcall	.+0      	; 0x528 <main+0x8>
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT();
 52c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_INIT>
	ADC_INIT();
 530:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ADC_INIT>
	while (1) {
		ADC_StartConversion();
 534:	0e 94 42 02 	call	0x484	; 0x484 <ADC_StartConversion>
		volatile uint32 Analog = ((uint32) (1000 * (Global_ADC * Vref))) / 1024;
 538:	80 91 98 00 	lds	r24, 0x0098
 53c:	90 91 99 00 	lds	r25, 0x0099
 540:	a0 91 9a 00 	lds	r26, 0x009A
 544:	b0 91 9b 00 	lds	r27, 0x009B
 548:	28 e8       	ldi	r18, 0x88	; 136
 54a:	33 e1       	ldi	r19, 0x13	; 19
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	bc 01       	movw	r22, r24
 552:	cd 01       	movw	r24, r26
 554:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsi3>
 558:	dc 01       	movw	r26, r24
 55a:	cb 01       	movw	r24, r22
 55c:	07 2e       	mov	r0, r23
 55e:	7a e0       	ldi	r23, 0x0A	; 10
 560:	b6 95       	lsr	r27
 562:	a7 95       	ror	r26
 564:	97 95       	ror	r25
 566:	87 95       	ror	r24
 568:	7a 95       	dec	r23
 56a:	d1 f7       	brne	.-12     	; 0x560 <main+0x40>
 56c:	70 2d       	mov	r23, r0
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	9a 83       	std	Y+2, r25	; 0x02
 572:	ab 83       	std	Y+3, r26	; 0x03
 574:	bc 83       	std	Y+4, r27	; 0x04

		if (Analog ==0) {
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	9a 81       	ldd	r25, Y+2	; 0x02
 57a:	ab 81       	ldd	r26, Y+3	; 0x03
 57c:	bc 81       	ldd	r27, Y+4	; 0x04
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	a1 05       	cpc	r26, r1
 582:	b1 05       	cpc	r27, r1
 584:	89 f4       	brne	.+34     	; 0x5a8 <main+0x88>
			DIO_Write_Channel(LED1, HIGH);
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED2, HIGH);
 58e:	89 e0       	ldi	r24, 0x09	; 9
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED3, HIGH);
 596:	8a e0       	ldi	r24, 0x0A	; 10
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED4, HIGH);
 59e:	8b e0       	ldi	r24, 0x0B	; 11
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
 5a6:	c6 cf       	rjmp	.-116    	; 0x534 <main+0x14>
		} else if (Analog > 3 && Analog <= 7) {
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	ab 81       	ldd	r26, Y+3	; 0x03
 5ae:	bc 81       	ldd	r27, Y+4	; 0x04
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	91 05       	cpc	r25, r1
 5b4:	a1 05       	cpc	r26, r1
 5b6:	b1 05       	cpc	r27, r1
 5b8:	d0 f0       	brcs	.+52     	; 0x5ee <main+0xce>
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	9a 81       	ldd	r25, Y+2	; 0x02
 5be:	ab 81       	ldd	r26, Y+3	; 0x03
 5c0:	bc 81       	ldd	r27, Y+4	; 0x04
 5c2:	88 30       	cpi	r24, 0x08	; 8
 5c4:	91 05       	cpc	r25, r1
 5c6:	a1 05       	cpc	r26, r1
 5c8:	b1 05       	cpc	r27, r1
 5ca:	88 f4       	brcc	.+34     	; 0x5ee <main+0xce>
			DIO_Write_Channel(LED1, HIGH);
 5cc:	88 e0       	ldi	r24, 0x08	; 8
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED2, HIGH);
 5d4:	89 e0       	ldi	r24, 0x09	; 9
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED3, HIGH);
 5dc:	8a e0       	ldi	r24, 0x0A	; 10
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED4, LOW);
 5e4:	8b e0       	ldi	r24, 0x0B	; 11
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
 5ec:	a3 cf       	rjmp	.-186    	; 0x534 <main+0x14>
		} else if (Analog > 8 && Analog <= 15) {
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	9a 81       	ldd	r25, Y+2	; 0x02
 5f2:	ab 81       	ldd	r26, Y+3	; 0x03
 5f4:	bc 81       	ldd	r27, Y+4	; 0x04
 5f6:	89 30       	cpi	r24, 0x09	; 9
 5f8:	91 05       	cpc	r25, r1
 5fa:	a1 05       	cpc	r26, r1
 5fc:	b1 05       	cpc	r27, r1
 5fe:	d0 f0       	brcs	.+52     	; 0x634 <main+0x114>
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	9a 81       	ldd	r25, Y+2	; 0x02
 604:	ab 81       	ldd	r26, Y+3	; 0x03
 606:	bc 81       	ldd	r27, Y+4	; 0x04
 608:	80 31       	cpi	r24, 0x10	; 16
 60a:	91 05       	cpc	r25, r1
 60c:	a1 05       	cpc	r26, r1
 60e:	b1 05       	cpc	r27, r1
 610:	88 f4       	brcc	.+34     	; 0x634 <main+0x114>
			DIO_Write_Channel(LED1, HIGH);
 612:	88 e0       	ldi	r24, 0x08	; 8
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED2, HIGH);
 61a:	89 e0       	ldi	r24, 0x09	; 9
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED3, LOW);
 622:	8a e0       	ldi	r24, 0x0A	; 10
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED4, LOW);
 62a:	8b e0       	ldi	r24, 0x0B	; 11
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
 632:	80 cf       	rjmp	.-256    	; 0x534 <main+0x14>
		} else if (Analog > 18 && Analog <= 30) {
 634:	89 81       	ldd	r24, Y+1	; 0x01
 636:	9a 81       	ldd	r25, Y+2	; 0x02
 638:	ab 81       	ldd	r26, Y+3	; 0x03
 63a:	bc 81       	ldd	r27, Y+4	; 0x04
 63c:	83 31       	cpi	r24, 0x13	; 19
 63e:	91 05       	cpc	r25, r1
 640:	a1 05       	cpc	r26, r1
 642:	b1 05       	cpc	r27, r1
 644:	d0 f0       	brcs	.+52     	; 0x67a <main+0x15a>
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	9a 81       	ldd	r25, Y+2	; 0x02
 64a:	ab 81       	ldd	r26, Y+3	; 0x03
 64c:	bc 81       	ldd	r27, Y+4	; 0x04
 64e:	8f 31       	cpi	r24, 0x1F	; 31
 650:	91 05       	cpc	r25, r1
 652:	a1 05       	cpc	r26, r1
 654:	b1 05       	cpc	r27, r1
 656:	88 f4       	brcc	.+34     	; 0x67a <main+0x15a>
			DIO_Write_Channel(LED1, HIGH);
 658:	88 e0       	ldi	r24, 0x08	; 8
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED2, LOW);
 660:	89 e0       	ldi	r24, 0x09	; 9
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED3, LOW);
 668:	8a e0       	ldi	r24, 0x0A	; 10
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED4, LOW);
 670:	8b e0       	ldi	r24, 0x0B	; 11
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
 678:	5d cf       	rjmp	.-326    	; 0x534 <main+0x14>
		} else if (Analog > 40 && Analog <= 70) {
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
 67e:	ab 81       	ldd	r26, Y+3	; 0x03
 680:	bc 81       	ldd	r27, Y+4	; 0x04
 682:	89 32       	cpi	r24, 0x29	; 41
 684:	91 05       	cpc	r25, r1
 686:	a1 05       	cpc	r26, r1
 688:	b1 05       	cpc	r27, r1
 68a:	08 f4       	brcc	.+2      	; 0x68e <main+0x16e>
 68c:	53 cf       	rjmp	.-346    	; 0x534 <main+0x14>
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	ab 81       	ldd	r26, Y+3	; 0x03
 694:	bc 81       	ldd	r27, Y+4	; 0x04
 696:	87 34       	cpi	r24, 0x47	; 71
 698:	91 05       	cpc	r25, r1
 69a:	a1 05       	cpc	r26, r1
 69c:	b1 05       	cpc	r27, r1
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <main+0x182>
 6a0:	49 cf       	rjmp	.-366    	; 0x534 <main+0x14>
			DIO_Write_Channel(LED1, LOW);
 6a2:	88 e0       	ldi	r24, 0x08	; 8
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED2, LOW);
 6aa:	89 e0       	ldi	r24, 0x09	; 9
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED3, LOW);
 6b2:	8a e0       	ldi	r24, 0x0A	; 10
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
			DIO_Write_Channel(LED4, LOW);
 6ba:	8b e0       	ldi	r24, 0x0B	; 11
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write_Channel>
 6c2:	38 cf       	rjmp	.-400    	; 0x534 <main+0x14>

000006c4 <__mulsi3>:
 6c4:	62 9f       	mul	r22, r18
 6c6:	d0 01       	movw	r26, r0
 6c8:	73 9f       	mul	r23, r19
 6ca:	f0 01       	movw	r30, r0
 6cc:	82 9f       	mul	r24, r18
 6ce:	e0 0d       	add	r30, r0
 6d0:	f1 1d       	adc	r31, r1
 6d2:	64 9f       	mul	r22, r20
 6d4:	e0 0d       	add	r30, r0
 6d6:	f1 1d       	adc	r31, r1
 6d8:	92 9f       	mul	r25, r18
 6da:	f0 0d       	add	r31, r0
 6dc:	83 9f       	mul	r24, r19
 6de:	f0 0d       	add	r31, r0
 6e0:	74 9f       	mul	r23, r20
 6e2:	f0 0d       	add	r31, r0
 6e4:	65 9f       	mul	r22, r21
 6e6:	f0 0d       	add	r31, r0
 6e8:	99 27       	eor	r25, r25
 6ea:	72 9f       	mul	r23, r18
 6ec:	b0 0d       	add	r27, r0
 6ee:	e1 1d       	adc	r30, r1
 6f0:	f9 1f       	adc	r31, r25
 6f2:	63 9f       	mul	r22, r19
 6f4:	b0 0d       	add	r27, r0
 6f6:	e1 1d       	adc	r30, r1
 6f8:	f9 1f       	adc	r31, r25
 6fa:	bd 01       	movw	r22, r26
 6fc:	cf 01       	movw	r24, r30
 6fe:	11 24       	eor	r1, r1
 700:	08 95       	ret

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
